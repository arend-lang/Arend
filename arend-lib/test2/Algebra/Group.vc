\import Algebra.Monoid

\class Group \extends Monoid {
  | inverse : El -> El
  | inverse-left (a : El) : inverse a * a = ident
  | inverse-right (a : El) : a * inverse a = ident
}

\func / {G : Group} (x y : G) => x * inverse y

\class AddGroup \extends AddMonoid => Group

\func - {A : AddGroup} (x y : A) => x + inverse y

\class CGroup \extends Group, CMonoid

\class AbGroup \extends AbMonoid => CGroup

\instance foo : Group Int
    | ...
    | ...

\instance bar : AddGroup Int
    | ...
    | ...

\func f {G : Group} (x y : G) => x * y      -- must typecheck all instances of Group and AddGroup first

\func f' (x : Int) => f x x                 -- must typecheck all instances of Group and AddGroup first

\func h {G : AddGroup} (x y : G) => x + y   -- must typecheck all instances of Group and AddGroup first

\func h' (x : Int) => h x x                 -- must typecheck all instances of Group and AddGroup first


\func k {G : Group} (x : G) => f x x        -- ok

\func k' {G : AddGroup} (x : G) => f x x    -- ?

\func m {G : Group} (x : G) => h x x        -- ?

\func m' {G : AddGroup} (x : G) => h x x    -- ?
