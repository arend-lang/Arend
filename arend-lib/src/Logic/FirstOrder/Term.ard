\class TermSig
  | \coerce Sort : \Set
  | Symb : Sort -> \Set
  | domain {s : Sort} : Symb s -> Array Sort

\data Term {S : TermSig} (V : S -> \Set) (s : S)
  | var (V s)
  | apply (f : Symb s) (DArray (\lam j => Term V (domain f j)))

\func subst {S : TermSig} {U V : S -> \Set} {s : S} (t : Term U s) (rho : \Pi {s : S} -> U s -> Term V s) : Term V s \elim t
  | var v => rho v
  | apply f ts => apply f (\lam j => subst (ts j) rho)