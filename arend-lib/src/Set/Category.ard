\import Category
\import Category.Limit
\import Equiv (Equiv, QEquiv)
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set

\record SetHom (Dom Cod : BaseSet)
  | \coerce func : Dom -> Cod

\instance SetCat : Cat \Set
  | Hom X Y => X -> Y
  | id _ => \lam x => x
  | o g f => \lam x => g (f x)
  | id-left _ => idp
  | id-right _ => idp
  | o-assoc _ _ _ => idp
  | univalence (e : Iso) =>
    \let p => path (iso e.f e.inv (\lam x => path ((e.inv_f @ __) x)) (\lam y => path ((e.f_inv @ __) y)))
    \in (p, simp_coe (\lam d => idp))

\instance SetCoproduct {J : \Type} (F : J -> \Set) : Product {J} {op SetCat} F
  | apex => Trunc0 (\Sigma (j : J) (F j))
  | proj j x => in0 (j,x)
  | tupleMap f => \case __ \with {
    | in0 (j,x) => f j x
  }
  | tupleBeta f j => idp
  | tupleEq e => ext (\case \elim __ \with {
    | in0 (j,x) => pmap (__ x) (e j)
  })

\instance SetCoequalizer {X Y : \Set} (f g : X -> Y) : Equalizer {op SetCat} f g
  | apex => Quotient (\lam y y' => \Sigma (x : X) (f x = y) (g x = y'))
  | eql => in~
  | equal => ext (\lam x => path (~-equiv _ _ ((x,idp,idp) : \Sigma (x' : X) (f x' = f x) (g x' = g x))))
  | eqMap h p => \case __ \with {
    | in~ y => h y
    | ~-equiv y y' (x,fx=y,gx=y') i => (inv (pmap h fx=y) *> (pmap (__ x) p) *> pmap h gx=y') @ i
  }
  | eqBeta h p => idp
  | eqMono p => ext (\case \elim __ \with {
    | in~ y => pmap (__ y) p
  })

\instance SetCompleteCat : BicompleteCat
  | Cat => SetCat
  | limit F => \new Limit {
    | apex => SmallCone F (\Sigma)
    | coneMap j x => coneMap {x} j ()
    | coneCoh h => ext (\lam s => pmap (__ ()) (coneCoh {s}  h))
    | isLimit Z => \new QEquiv {
      | ret c z => \new SmallCone {
        | coneMap j _ => coneMap {c} j z
        | coneCoh h => ext (\lam _ => pmap (__ z) (coneCoh {c} h ))
      }
      | ret_f => idpe
      | f_sec => idpe
    }
  }
  | colimit => limits<=pr+eq {op SetCat} (\lam J G => SetCoproduct G) (\lam {X} {Y} f g => SetCoequalizer f g)