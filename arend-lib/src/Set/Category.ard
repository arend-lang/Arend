\import Category
\import Category.Limit
\import Equiv (Equiv, QEquiv)
\import Meta
\import Paths
\import Paths.Meta
\import Set

\record SetHom (Dom Cod : BaseSet)
  | \coerce func : Dom -> Cod

\instance SetCat : Cat \Set
  | Hom X Y => X -> Y
  | id _ => \lam x => x
  | o g f => \lam x => g (f x)
  | id-left _ => idp
  | id-right _ => idp
  | o-assoc _ _ _ => idp
  | univalence (e : Iso) =>
    \let p => path (iso e.f e.inv (\lam x => path ((e.inv_f @ __) x)) (\lam y => path ((e.f_inv @ __) y)))
    \in (p, simp_coe (\lam d => idp))

\instance SetCompleteCat : CompleteCat
  | Cat => SetCat
  | limit F => \new Limit {
    | apex => SmallCone F (\Sigma)
    | coneMap j x => coneMap {x} j ()
    | coneCoh h => ext (\lam s => pmap (__ ()) (coneCoh {s}  h))
    | isLimit Z => \new QEquiv {
      | ret c z => \new SmallCone {
        | coneMap j _ => coneMap {c} j z
        | coneCoh h => ext (\lam _ => pmap (__ z) (coneCoh {c} h ))
      }
      | ret_f => idpe
      | f_sec => idpe
    }
  }