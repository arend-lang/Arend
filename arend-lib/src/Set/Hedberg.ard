\import Data.Or
\import Equiv
\import Equiv.Path
\import Equiv.Univalence
\import HLevel
\import Logic
\import Paths

\lemma Hedberg {A : \Type} (d : \Pi (a a' : A) -> (a = a') `Or` Not (a = a')) : isSet A => \lam x x' =>
  \let | R {a a' : A} (p : (a = a') `Or` Not (a = a')) : \Prop => \case p \with { | inl _ => \Sigma | inr _ => Empty }
       | R' (a a' : A) => R {a} {a'} (d a a')
       | refl {a : A} (p : (a = a) `Or` Not (a = a)) => \case \elim p \return R p \with { | inl _ => () | inr q => q idp }
       | equiv : Equiv {x = x'} {R' x x'} => propPathEquiv R' (\lam a => refl (d a a)) (\lam {a} {a'} s => \case d a a' \as p, s : R p \with {
         | inl p, _ => p
         | inr _, s' => absurd s'
       }) {x} {x'}
  \in transport isProp (inv (univalence.ret equiv)) Path.inProp
  \where
    \func propPathEquiv {A : \Type} (R : A -> A -> \Prop) (refl : \Pi (a : A) -> R a a) (p : \Pi {a a' : A} -> R a a' -> a = a') {a a' : A} : QEquiv {a = a'} {R a a'}
      => pathEquiv R (\lam {a} {a'} => \new Retraction (transport (R a) __ (refl a)) p (\lam _ => Path.inProp _ _))