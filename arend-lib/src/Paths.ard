\func idp  {A : \Type} {a : A} => path (\lam _ => a)

\func idpe {A : \Type} (a : A) => path (\lam _ => a)

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' => path (\lam i => f (p @ i))

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p @ i) (q @ i))

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  coe (\lam i => B (p @ i)) b right

\func transport2 {A B : \Type} (C : A -> B -> \Type) {a a' : A} {b b' : B} (p : a = a') (q : b = b') (c : C a b) : C a' b' =>
  transport (\lam b => C a' b) q (transport (\lam a => C a b) p c)

\func inv {A : \Type} {a a' : A} (p : a = a') : a' = a => transport (\lam a'' => a'' = a) p idp

\func \infixr 9 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' => concat p q
  \where
    \func concat {A : I -> \Type} {a : A left} {a' a'' : A right} (p : Path A a a') (q : a' = a'') : Path A a a'' =>
      transport (Path A a) q p

\func \infixr 9 <* {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' => concat p q
  \where
    \func concat {A : I -> \Type} {a a' : A left} {a'' : A right} (p : a = a') (q : Path A a' a'') : Path A a a'' =>
      transport (\lam x => Path A x a'') (inv p) q

\func psqueeze {A : \Type} {a a' : A} (p : a = a') (i : I) : a = p @ i => path (\lam j => p @ I.squeeze i j)

\func Jl {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type) (b : B a idp) {a' : A} (p : a = a') : B a' p =>
  coe (\lam i => B (p @ i) (psqueeze p i)) b right
  \where
    \func Jr {A : \Type} {a' : A} (B : \Pi (a : A) -> a = a' -> \Type) (b : B a' idp) {a : A} (p : a = a') : B a p
      => transport (B a) (inv_inv p) (Jl (\lam x (q : a' = x) => B x (inv q)) b (inv p))

\func pmap_*>-comm {A B : \Type} (f : A -> B) {a a' a'' : A} (p : a = a') (q : a' = a'')
  : pmap f (p *> q) = pmap f p *> pmap f q
  => Jl (\lam _ q' => pmap f (p *> q') = pmap f p *> pmap f q') idp q

\func pmap_<*-comm {A B : \Type} (f : A -> B) {a a' a'' : A} (p : a = a') (q : a' = a'')
  : pmap f (p <* q) = pmap f p <* pmap f q
  => Jl (\lam x p' => \Pi (q : x = a'') -> pmap f (p' <* q) = pmap f p' <* pmap f q) (\lam _ => idp) p q

\func inv_inv {A : \Type} {a a' : A} (p : a = a') : inv (inv p) = p => Jl (\lam _ p => inv (inv p) = p) idp p

\func inv_*> {A : \Type} {a a' : A} (p : a = a') : inv p *> p = idp => Jl (\lam _ q => inv q *> q = idp) idp p

\func *>_inv {A : \Type} {a a' : A} (p : a = a') : p *> inv p = idp => Jl (\lam _ q => q *> inv q = idp) idp p

\func idp_*> {A : \Type} {a a' : A} (p : a = a') : idp *> p = p => Jl (\lam _ p => idp *> p = p) idp p

\func <*_idp {A : \Type} {a a' : A} (p : a = a') : p <* idp = p => Jl (\lam _ p => p <* idp = p) idp p

\func <*_*> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : p <* q = p *> q
  => Jl (\lam _ q' => p <* q' = p *> q') (<*_idp p) q

\func *>_inv-comm {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : inv (p *> q) = inv q *> inv p =>
  Jl (\lam _ q => inv (p *> q) = inv q *> inv p) (inv (idp_*> (inv p))) q

\func pmap_inv-comm {A B : \Type} {a a' : A} (f : A -> B) (p : a = a') : pmap f (inv p) = inv (pmap f p) =>
  Jl (\lam _ p => pmap f (inv p) = inv (pmap f p)) idp p

\func *>-assoc {A : \Type} {a1 a2 a3 a4 : A} (p : a1 = a2) (q : a2 = a3) (r : a3 = a4) : (p *> q) *> r = p *> (q *> r) =>
  Jl (\lam _ r => (p *> q) *> r = p *> (q *> r)) idp r

\func \infix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

\func idpOver (A : I -> \Type) (a : A left) : Path A a (coe A a right) => path (coe A a)

\func pathOver {A : I -> \Type} {a : A left} {a' : A right} (p : coe A a right = a') : Path A a a' =>
  *>.concat (idpOver A a) p

\lemma pathInProp (A : I -> \Prop) (a : A left) (a' : A right) : Path A a a' => pathOver (Path.inProp (coe A a right) a')

\func coe_path {A : \Type} {a1 a2 a3 a4 : A} (p : a2 = a1) (q : a2 = a3) (r : a3 = a4)
  : coe (\lam i => p @ i = r @ i) q right = inv p *> q *> r
  => coe (\lam j => coe (\lam i => p @ i = r @ i) q j = inv (psqueeze p j) *> q *> psqueeze r j) (inv (idp_*> q)) right
  \where
    \func alt {A : \Type} {a1 a2 a3 a4 : A} (p : a1 = a2) (q : a2 = a3) (r : a4 = a3)
      : coe (\lam i => p @ i = r @ i) (p *> q *> inv r) right = q
      => Jl (\lam x r' => \Pi (q' : a2 = x) -> coe (\lam i => p @ i = r' @ i) (p *> q' *> inv r') right = q')
            (Jl (\lam x q' => coe (\lam i => p @ i = x) (p *> q') right = q')
                (Jl (\lam x p' => coe (\lam i => p' @ i = x) p' right = idp) idp p)) r q

\func path-sym {A : \Type} (a a' : A) : (a = a') = (a' = a) => path (iso inv inv inv_inv inv_inv)

\func rotatePathLeft {A : \Type} {a a' a'' : A} {p : a' = a} {q : a' = a''} {r : a = a''} (t : q = p *> r) : inv p *> q = r =>
  inv p *> q          ==< pmap (\lam s => inv p *> s) t >==
  inv p *> (p *> r)   ==< inv (*>-assoc (inv p) p r) >==
  (inv p *> p) *> r   ==< pmap (\lam s => s *> r) (inv_*> p) >==
  idp *> r            ==< idp_*> r >==
  r                   `qed

\func homotopy-isNatural {A B : \Type} (f g : A -> B) (h : \Pi (a : A) -> f a = g a) {a a' : A} (p : a = a') : pmap f p *> h a' = h a *> pmap g p =>
  Jl (\lam x q => pmap f q *> h x = h a *> pmap g q) (idp_*> (h a)) p

\func homotopy_app-comm {A : \Type} (f : A -> A) (h : \Pi (a : A) -> f a = a) (a : A) : h (f a) = pmap f (h a) =>
  h (f a)                             ==< pmap (\lam s => h (f a) *> s) (inv (*>_inv (h a))) >==
  h (f a) *> (h a *> inv (h a))       ==< inv (*>-assoc (h (f a)) (h a) (inv (h a))) >==
  (h (f a) *> h a) *> inv (h a)       ==< pmap (\lam s => s *> inv (h a)) (inv (homotopy-isNatural f (\lam a => a) h (h a))) >==
  (pmap f (h a) *> h a) *> inv (h a)  ==< *>-assoc (pmap f (h a)) (h a) (inv (h a)) >==
  pmap f (h a) *> (h a *> inv (h a))  ==< pmap (\lam s => pmap f (h a) *> s) (*>_inv (h a)) >==
  pmap f (h a)                        `qed

\func pmapd {A : \Type} (B : A -> \Type) (f : \Pi (x : A) -> B x) {a a' : A} (p : a = a') : transport B p (f a) = f a' =>
  Jl (\lam x (q : a = x) => transport B q (f a) = f x) idp p

\func transport_*> {A : \Type} (B : A -> \Type) {a a' a'' : A} (p : a = a') (q : a' = a'') (x : B a) : transport B (p *> q) x = transport B q (transport B p x) =>
  Jl (\lam a0 q' => transport B (p *> q') x = transport B q' (transport B p x)) idp q

\func transport_pi {A : \Type} (B C : A -> \Type) {a a' : A} (p : a = a') (f : B a -> C a) (x : B a') : transport (\lam y => B y -> C y) p f x = transport C p (f (transport B (inv p) x)) =>
  Jl (\lam z q => \Pi (x' : B z) -> transport (\lam y => B y -> C y) q f x' = transport C q (f (transport B (inv q) x')))
     (\lam (x' : B a) => idp) p x

\func transport_path-right {A : \Type} {a0 a b : A} (p : a = b) (q : a0 = a) : transport (a0 =) p q = q *> p =>
  coe_path {A} (idpe a0) q p *> idp_*> (q *> p)

\func transport_path-left {A : \Type} {a0 a b : A} (p : a = b) (q : a = a0) : transport (\lam x => x = a0) p q = inv p *> q =>
  coe_path {A} p q (idpe a0)

\func transport_inv_id {A : \Type} (B : A -> \Type) {a b : A} (p : a = b) (x : B a) : transport B (inv p) (transport B p x) = x =>
  Jl (\lam z (p' : a = z) => transport B (inv p') (transport B p' x) = x) idp p

\func transport_id_inv {A : \Type} (B : A -> \Type) {a b : A} (p : a = b) (x : B b) : transport B p (transport B (inv p) x) = x =>
  pmap (\lam p' => transport B p' (transport B (inv p) x)) (inv (inv_inv p)) *> transport_inv_id B (inv p) x

\func transport_inv_func {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (g : B a' -> B a) (gf : \Pi (x : B a) -> g (transport B p x) = x) (b : B a')
  : transport B (inv p) b = g b
  => inv (gf (transport B (inv p) b)) *> pmap g (transport_id_inv B p b)

\func funExt {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> (B x)) (h : \Pi (x : A) -> (f x = g x)) : f = g =>
  path (\lam i a => h a @ i)

\func SigmaExt {A : \Type} (B : A -> \Type) (x y : \Sigma (a : A) (B a)) (p : x.1 = y.1) (q : transport B p x.2 = y.2) : x = y =>
  path (\lam i => (p @ i, pathOver q @ i))

\func SigmaPropExt {A : \Type} (B : A -> \Prop) (x y : \Sigma (a : A) (B a)) (p : x.1 = y.1) : x = y =>
  path (\lam i => (p @ i, pathInProp (\lam j => B (p @ j)) x.2 y.2 @ i))

\func coe_sigma {A : I -> \Type} (B : \Pi (i : I) -> A i -> \Type) (p : \Sigma (a : A left) (B left a)) (j : I)
  : coe (\lam i => \Sigma (a : A i) (B i a)) p j = (coe A p.1 j, coe (\lam i => B i (coe A p.1 i)) p.2 j)
  => coe (\lam k => coe (\lam i => \Sigma (a : A i) (B i a)) p (I.squeeze j k) =
                    (coe A p.1 (I.squeeze j k), coe (\lam i => B i (coe A p.1 i)) p.2 (I.squeeze j k))) idp right
