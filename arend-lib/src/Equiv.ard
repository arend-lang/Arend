\import Equiv.Fiber
\import Equiv.Path
\import Function
\import HLevel
\import Paths
\import Logic

-- # Definition of equivalences

\record Map {A B : \Type} (f : A -> B)

\record Section (ret : B -> A) (ret_f : \Pi (x : A) -> ret (f x) = x) \extends Map
  \where {
    \func =Fiber {A B : \Type} (f : A -> B) : Section f = Fib (-o f) id
      => path (iso (\lam (s : Section f) => \new Fib (-o f) id s.ret (path (\lam i x => s.ret_f x @ i)))
                   (\lam (z : Fib (-o f) id) => \new Section f z.over (\lam x => path (\lam i => (z.basePath @ i) x)))
                   idpe
                   idpe)

    \lemma isContr (e : Equiv) : Contr (Section e.f)
      => transport (\lam X => Contr X) (inv (=Fiber e.f)) (Equiv=>contrFibers (-o e.f) (-o_Equiv e) id)

    \lemma isProp (r : Retraction) : \level (HLevel.isProp (Section r.f)) (HLevel.isProp.isProp (Section r.f))
      => \lam s => isContr=>isProp (isContr (\new Equiv { | Section => s | Retraction => r })) s
  }

\record Retraction (sec : B -> A) (f_sec : \Pi (y : B) -> f (sec y) = y) \extends Map
  \where {
    \func =Fiber {A B : \Type} (f : A -> B) : Retraction f = Fib (f `o-) id
      => path (iso (\lam (s : Retraction f) => \new Fib (f `o-) id s.sec (path (\lam i x => s.f_sec x @ i)))
                   (\lam (z : Fib (f `o-) id) => \new Retraction f z.over (\lam x => path (\lam i => (z.basePath @ i) x)))
                   idpe
                   idpe)

    \lemma isContr (e : Equiv) : Contr (Retraction e.f)
      => transport (\lam X => Contr X) (inv (=Fiber e.f)) (Equiv=>contrFibers (e.f `o-) (o-_Equiv e) id)

    \lemma isProp (s : Section) : \level (HLevel.isProp (Retraction s.f)) (HLevel.isProp.isProp (Retraction s.f))
      => \lam r => isContr=>isProp (isContr (\new Equiv { | Section => s | Retraction => r })) r
  }

\record Equiv \extends Section, Retraction
  \where {
    \use \level isProp {A B : \Type} {f : A -> B} (e e' : Equiv f) : e = e' =>
      path (\lam i => \new Equiv {
        | Section => isContr=>isProp {Section f} (Section.isContr e) e e' @ i
        | Retraction => isContr=>isProp {Retraction f} (Retraction.isContr e) e e' @ i
      })

    \func equals {A B : \Type} {e e' : Equiv {A} {B}} (p : e.f = e'.f) : e = e' =>
      path (\lam i => \new Equiv {
        | Section => pathOver (isContr=>isProp (Section.isContr e')
                                               (transport (\lam f => Section f) p (\new Section e.f e.ret e.ret_f))
                                               (\new Section e'.f e'.ret e'.ret_f)) @ i
        | Retraction => pathOver (isContr=>isProp (Retraction.isContr e')
                                                  (transport (\lam f => Retraction f) p (\new Retraction e.f e.sec e.f_sec))
                                                  (\new Retraction e'.f e'.sec e'.f_sec)) @ i
      })
  }

\record QEquiv \extends Equiv { | sec => ret }
  \where
    \use \coerce fromEquiv (e : Equiv) : QEquiv \cowith
      | Section => e
      | f_sec y => pmap (\lam y => e.f (e.ret y)) (inv (e.f_sec y)) *> pmap e.f (e.ret_f (e.sec y)) *> e.f_sec y

-- # Examples of equialences

\func idEquiv {A : \Type} : QEquiv \cowith
  | A => A
  | B => A
  | f x => x
  | ret x => x
  | ret_f _ => idp
  | f_sec _ => idp

\func -o_Equiv {C : \Type} (e : Equiv) : Equiv {e.B -> C} (-o e.f) \cowith
  | ret => -o e.sec
  | ret_f g => path (\lam i x => g (e.f_sec x @ i))
  | sec => -o e.ret
  | f_sec g => path (\lam i x => g (e.ret_f x @ i))

\func o-_Equiv {C : \Type} (e : Equiv) : Equiv {C -> e.A} (e.f `o-) \cowith
  | ret => e.ret `o-
  | ret_f g => path (\lam i x => e.ret_f (g x) @ i)
  | sec => e.sec `o-
  | f_sec g => path (\lam i x => e.f_sec (g x) @ i)

\func piEquiv {A : \Type} (B : A -> \Type) (f f' : \Pi (a : A) -> B a) : QEquiv \cowith
  | A => f = f'
  | B => \Pi (a : A) -> f a = f' a
  | f p a => path (\lam i => (p @ i) a)
  | ret g => path (\lam i a => g a @ i)
  | ret_f _ => idp
  | f_sec _ => idp

\func sigmaEquiv {A : \Type} (B : A -> \Type) (p p' : \Sigma (a : A) (B a)) : QEquiv \cowith
  | A => p = p'
  | B => \Sigma (s : p.1 = p'.1) (transport B s p.2 = p'.2)
  | f q => (pmap (\lam p => p.1) q, pmapd (\lam p => B p.1) (\lam p => p.2) q)
  | ret q => SigmaExt B p p' q.1 q.2
  | ret_f q => Jl (\lam p'' q' => SigmaExt B p p'' (pmap (\lam p => p.1) q') (pmapd (\lam p => B p.1) (\lam p => p.2) q') = q') idp q
  | f_sec q =>
    \let t => Jl
        (\lam p'1 q1 => \Pi (p'2 : B p'1) (q2 : transport B q1 p.2 = p'2) -> pmapd (\lam p => B p.1) (\lam p => p.2) (SigmaExt {A} B p (p'1,p'2) q1 q2) = q2)
        (\lam p'2 q2 => Jl (\lam p'2' q2' => pmapd (\lam p => B p.1) (\lam p => p.2) (SigmaExt {A} B p (p.1,p'2') idp q2') = q2') idp q2)
        q.1 p'.2 q.2
    \in path (\lam i => (q.1, t @ i))

-- # Embeddings and surjections

\record Embedding (isEmb : \Pi (a a' : A) -> Retraction (pmap f {a} {a'})) \extends Map {
  \func pmap-isEquiv {a a' : A} : QEquiv (pmap f {a} {a'}) => pathEquiv (\lam a a' => f a = f a') (\lam {a} {a'} => isEmb a a')
} \where {
  \use \level isProp {A B : \Type} {f : A -> B} (e e' : Embedding f) : e = e' =>
    path (\lam i => \new Embedding f (\lam a a' => Retraction.isProp (pmap-isEquiv {e} {a} {a'}) (e.isEmb a a') (e'.isEmb a a') @ i))
}

\func \infixr 1 >-> (A B : \Type) => Embedding {A} {B}

\record Surjection (isSurj : \Pi (y : B) -> TruncP (Fib f y)) \extends Map

\func \infixr 1 ->> (A B : \Type) => Surjection {A} {B}

\record ESEquiv \extends Embedding, Surjection
  \where {
    \use \level isProp {A B : \Type} {f : A -> B} (e e' : ESEquiv f) : e = e' =>
      path (\lam i => \new ESEquiv { | Embedding  => Embedding.isProp  e e' @ i
                                     | Surjection => Path.inProp {ESEquiv f} e e' @ i })

    \lemma embeddingFiber-isProp (e : Embedding) (b : e.B) : \level (HLevel.isProp (Fib e.f b)) (HLevel.isProp.isProp (Fib e.f b)) => \lam (x x' : Fib e.f b) =>
      \let | eq : Retraction (pmap e.f {x.over} {x'.over}) => e.isEmb x.over x'.over
           | fx=fx' => x.basePath *> inv x'.basePath
      \in Fib.ext e.f b x x' (eq.sec fx=fx') (
        pmap e.f (eq.sec fx=fx') *> x'.basePath       ==< pmap (\lam r => r *> x'.basePath) (eq.f_sec fx=fx') >==
        fx=fx' *> x'.basePath                         ==< *>-assoc _ _ _ >==
        x.basePath *> inv x'.basePath *> x'.basePath  ==< pmap (\lam r => x.basePath *> r) (inv_*> _) >==
        x.basePath                                    `qed
      )

    \use \coerce toEquiv (e : ESEquiv) : QEquiv e.f =>
      \let sec (y : e.B) => TruncP.remove (embeddingFiber-isProp e y) (e.isSurj y)
      \in \new QEquiv {
        | ret y => Fib.over {sec y}
        | ret_f x => Retraction.sec {e.isEmb _ _} (Fib.basePath {sec (e.f x)})
        | f_sec y => Fib.basePath {sec y}
      }

    \use \coerce fromEquiv (e : Equiv) : ESEquiv e.f \cowith
      | Embedding.isEmb a a' => pmapEquiv e {a} {a'}
      | Surjection.isSurj y => inP (\new Fib { | over => e.sec y | basePath => e.f_sec y })
  }
