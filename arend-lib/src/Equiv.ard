\import Paths

\record Map {A B : \Type} (f : A -> B)

\record Section (ret : B -> A) (ret_f : \Pi (x : A) -> ret (f x) = x) \extends Map

\record Retraction (sec : B -> A) (f_sec : \Pi (y : B) -> f (sec y) = y) \extends Map

\record Equiv \extends Section, Retraction

\record QEquiv \extends Equiv { | sec => ret }
  \where
    \coerce fromEquiv (e : Equiv) : QEquiv \cowith
      | Section => e
      | f_sec y => pmap (\lam y => e.f (e.ret y)) (inv (e.f_sec y)) *> pmap e.f (e.ret_f (e.sec y)) *> e.f_sec y

\record Embedding (proof : \Pi (a a' : A) -> Equiv (pmap f {a} {a'})) \extends Map

\func \infixr 1 >-> (A B : \Type) => Embedding {A} {B}

\func piEquiv {A : \Type} (B : A -> \Type) (f f' : \Pi (a : A) -> B a) : QEquiv \cowith
  | A => f = f'
  | B => \Pi (a : A) -> f a = f' a
  | f p a => path (\lam i => (p @ i) a)
  | ret g => path (\lam i a => g a @ i)
  | ret_f _ => idp
  | f_sec _ => idp

\func sigmaEquiv {A : \Type} (B : A -> \Type) (p p' : \Sigma (a : A) (B a)) : QEquiv \cowith
  | A => p = p'
  | B => \Sigma (s : p.1 = p'.1) (transport B s p.2 = p'.2)
  | f q => (pmap (\lam p => p.1) q, pmapd (\lam p => B p.1) (\lam p => p.2) q)
  | ret q => SigmaExt B p p' q.1 q.2
  | ret_f q => Jl (\lam p'' q' => SigmaExt B p p'' (pmap (\lam p => p.1) q') (pmapd (\lam p => B p.1) (\lam p => p.2) q') = q') idp q
  | f_sec q =>
    \let t => Jl
        (\lam p'1 q1 => \Pi (p'2 : B p'1) (q2 : transport B q1 p.2 = p'2) -> pmapd (\lam p => B p.1) (\lam p => p.2) (SigmaExt {A} B p (p'1,p'2) q1 q2) = q2)
        (\lam p'2 q2 => Jl (\lam p'2' q2' => pmapd (\lam p => B p.1) (\lam p => p.2) (SigmaExt {A} B p (p.1,p'2') idp q2') = q2') idp q2)
        q.1 p'.2 q.2
    \in path (\lam i => (q.1, t @ i))
