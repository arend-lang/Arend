\import Paths

\record Map {A B : \Type} (f : A -> B)

\record Section (ret : B -> A) (ret_f : \Pi (x : A) -> ret (f x) = x) \extends Map

\record Retraction (sec : B -> A) (f_sec : \Pi (y : B) -> f (sec y) = y) \extends Map

\record Equiv \extends Section, Retraction

\record QEquiv \extends Equiv { | sec => ret }

\record Embedding (proof : \Pi (a a' : A) -> Equiv (pmap f {a} {a'})) \extends Map

\func \infixr 1 >-> (A B : \Type) => Embedding {A} {B}

\func piEquality {A : \Type} (B : A -> \Type) (f f' : \Pi (a : A) -> B a) => \new QEquiv {
  | A => f = f'
  | B => \Pi (a : A) -> f a = f' a
  | f p a => path (\lam i => (p @ i) a)
  | ret g => path (\lam i a => g a @ i)
  | ret_f p => idp
  | f_sec => \lam _ => idp
  }

\func sigmaEquality {A : \Type} (B : A -> \Type) (p p' : \Sigma (a : A) (B a)) => \new QEquiv {
  | A => p = p'
  | B => \Sigma (s : p.1 = p'.1) (transport B s p.2 = p'.2)
  | f => {?}
  | ret => {?}
  | ret_f => {?}
  | f_sec => {?}
  }
