\import Logic
\import Logic.Meta
\import Order.Lattice
\import Paths
\import Paths.Meta
\import Set
\import Set.Category
\import Set.Subset

\class TopSpace \extends BaseSet {
  | isOpen : Set E -> \Prop
  | open-top : isOpen Bounded.top
  | open-inter {U V : Set E} : isOpen U -> isOpen V -> isOpen (U ∧ V)
  | open-Union {S : Set (Set E)} : ∀ {U : S} (isOpen U) -> isOpen (Set.Union S)

  \lemma cover-open {U : Set E} (c : ∀ {x : U} (∃ (V : isOpen) (V x) (V ⊆ U))) : isOpen U
    => \have uo => open-Union {_} {\lam V => \Sigma (isOpen V) (V ⊆ U)} __.1
       \in transport isOpen (ext \lam x => ext (\lam (inP (V,(_,V<=U),Vx)) => V<=U Vx, \lam Ux => TruncP.map (c Ux) \lam (V,Vo,Vx,V<=U) => (V, (Vo, V<=U), Vx))) uo

  \type \infix 4 <=<T (V U : Set E) : \Prop
    => \Pi (y : E) -> ∃ (W : isOpen) (W y) (Given (V ∧ W) -> W ⊆ U)

  \func IsRegular => ∀ {U : isOpen} {x : U} (∃ (V : isOpen) (V x) (V <=<T U))
}

\class ContMap \extends SetHom {
  \override Dom : TopSpace
  \override Cod : TopSpace
  | func-cont {U : Cod -> \Prop} : isOpen U -> isOpen (\lam x => U (func x))
}