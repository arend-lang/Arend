\import Category
\import Category.Meta
\import Logic.Meta
\import Order.Lattice
\import Paths.Meta
\import Set
\import Set.Category
\import Set.Subset

\class TopSpace \extends BaseSet
  | isOpen : Set E -> \Prop
  | open-top : isOpen Bounded.top
  | open-inter {U V : Set E} : isOpen U -> isOpen V -> isOpen (U ∧ V)
  | open-Union {S : Set (Set E)} : ∀ (U : S) (isOpen U) -> isOpen (Set.Union S)

\class ContMap \extends SetHom {
  \override Dom : TopSpace
  \override Cod : TopSpace
  | func-cont {U : Cod -> \Prop} : isOpen U -> isOpen (\lam x => U (func x))
}

\instance TopCat : Cat TopSpace
  | Hom => ContMap
  | id X => \new ContMap {
    | func x => x
    | func-cont t => t
  }
  | o g f => \new ContMap {
    | func x => g (f x)
    | func-cont t => func-cont {f} (func-cont {g} t)
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam {X} {S1} {S2} h1 h2 => exts (\lam U => ext (func-cont {h2} {U}, func-cont {h1} {U})))