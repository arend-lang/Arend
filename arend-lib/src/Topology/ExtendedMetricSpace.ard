\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Pointed
\import Arith.Rat
\import Arith.Real
\import Data.Or
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Subset
\import Topology.CoverSpace
\import Topology.CoverSpace.Complete
\import Topology.UniformSpace
\import Topology.UniformSpace.Complete
\open Bounded(top)
\open RealAbGroup \hiding (+, join, meet, negative, zro<ide)
\open ExtendedPseudoMetricSpace \hiding (isUniform)

\class ExtendedPseudoMetricSpace \extends UniformSpace {
  | edist : E -> E -> LowerReal
  | edist-refl {x : E} : edist x x = zro
  | edist-symm {x y : E} : edist x y = edist y x
  | edist-triang {x y z : E} : edist x z <= edist x y + edist y z
  | edist-uniform {C : Set (Set E)} : isUniform C <-> ∃ (eps : LowerReal) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (edist x y < eps -> U y)

  | uniform-cover Cu x => \case edist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => \case h x \with {
      | inP (U,CU,g) => inP (U, CU, g $ rewrite edist-refl eps>0)
    }
  }
  | uniform-top => edist-uniform.2 $ inP ((1 : Real), LowerRealBiordered.zro<ide, \lam x => inP (top, idp, \lam _ => ()))
  | uniform-refine Cu e => \case edist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => edist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
      | inP (U,CU,g) => \case e CU \with {
        | inP (V,DV,U<=V) => inP (V, DV, \lam d => U<=V $ g d)
      }
    })
  }
  | uniform-inter Cu C'u => \case edist-uniform.1 Cu, edist-uniform.1 C'u \with {
    | inP (eps,eps>0,h), inP (eps',eps'>0,h') => edist-uniform.2 $ inP (eps ∧ eps', LowerRealBiordered.<_meet-univ eps>0 eps'>0, \lam x => \case h x, h' x \with {
      | inP (U,CU,g), inP (U',DU',g') => inP (U ∧ U', inP $ later (U, CU, U', DU', idp), \lam d => (g $ d <∘l LowerRealLattice.meet-left, g' $ d <∘l LowerRealLattice.meet-right))
    })
  }
  | uniform-star Cu => \case edist-uniform.1 Cu \with {
    | inP (eps',eps'>0,h) => \case L-rounded $ (LowerRealBiordered.lowerReal_<_L {0}).1 eps'>0 \with {
      | inP (eps,eps<eps',eps>0) => \have eps>0 => real_<_L.2 eps>0 \in
        inP (\lam U => ∃ (x : E) (U = \lam y => edist x y < half (half eps)), edist-uniform.2 $ inP (half (half eps), LowerRealBiordered.<-char.2 $ half>0 $ later $ half>0 eps>0, \lam x => inP $ later (_, inP (x,idp), \lam d => d)), \lam {_} (inP (x,idp)) => \case h x \with {
          | inP (U,CU,g) => inP (U, CU, \lam {_} (inP (y,idp)) => later \lam (z,(xz,yz)) {w} yw => g $
              (transport (_ <) (later (pmap {LowerReal} (`+ _) $ inv (\peval _ RealAbGroup.+ _) *> half+half) *> {LowerReal} inv (\peval _ RealAbGroup.+ _) *> {LowerReal} half+half) $ edist-triang LowerRealBiordered.<∘r LowerRealBiordered.<_+ (edist-triang LowerRealBiordered.<∘r LowerRealBiordered.<_+ xz (transport {LowerReal} (`< _) edist-symm yz)) (yw <∘ LowerRealBiordered.<-char.2 (half<id $ half>0 eps>0))) <∘ LowerRealBiordered.lowerReal_<_L.2 eps<eps')
        })
    }
  }

  \default isUniform C : \Prop => ∃ (eps : LowerReal) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (edist x y < eps -> U y)
  \default edist-uniform \as edist-uniform-impl {C} : isUniform C <-> _ => <->refl

  \lemma properUniform : IsProperUniform
    => \lam Cu => \case edist-uniform.1 Cu \with {
      | inP (eps,eps>0,h) => edist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
        | inP (U,CU,g) => inP (U, later (CU, inP (x, g $ rewrite edist-refl eps>0)), g)
      })
    }

  \lemma halving {z x y : E} {eps : Real} (d1 : edist z x < half eps) (d2 : edist z y < half eps) : edist x y < eps
    => edist-triang <∘r transport (_ <) (inv (\peval _ RealAbGroup.+ _) *> half+half) (LowerRealBiordered.<_+ (rewrite edist-symm in d1) d2)

  \lemma makeUniform {eps : LowerReal} (eps>0 : 0 < eps) : UniformSpace.isUniform \lam U => ∃ (x : E) (U = \lam y => edist x y < eps)
    => edist-uniform.2 $ inP $ later (eps, eps>0, \lam x => inP (_, inP (x, idp), \lam r => r))
}

\lemma edist>=0 {X : ExtendedPseudoMetricSpace} {x y : X} : 0 <= edist x y
  => \lam {a} a<0 => \case LowerRealAbMonoid.+_L.1 $ (rewrite (edist-refl,edist-symm) in edist-triang {_} {y} {x} {y}) {a + a} linarith \with {
    | inP (b,b<d,c,c<d,a+a<b+c) => \case LinearOrder.dec<_<= a b \with {
      | inl a<b => L-closed b<d a<b
      | inr b<=a => L-closed c<d linarith
    }
  }

\class ExtendedMetricSpace \extends ExtendedPseudoMetricSpace, SeparatedCoverSpace
  | edist-ext {x y : E} : edist x y = zro -> x = y
  | isSeparatedCoverSpace {x} {y} f => edist-ext $ <=-antisymmetric (LowerRealBiordered.<=-char \lam d>0 => \case L-rounded d>0 \with {
    | inP (eps,eps<d,eps>0) => \case f (makeCauchy $ makeUniform {_} {half eps} $ LowerRealBiordered.<-char.2 $ half>0 $ real_<_L.2 eps>0) \with {
        | inP (U, inP (z,p), (Ux,Uy)) =>
          \have | U'x => rewrite p Ux
                | U'y => rewrite p Uy
          \in <-irreflexive $ halving U'x U'y <∘ LowerRealBiordered.lowerReal_<_L.2 eps<d
      }
  }) edist>=0

\class CompleteExtendedMetricSpace \extends ExtendedMetricSpace, CompleteUniformSpace