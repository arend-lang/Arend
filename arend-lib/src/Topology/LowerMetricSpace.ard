\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Pointed
\import Arith.Rat
\import Arith.Real
\import Data.Or
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Filter
\import Set.Subset
\import Topology.CoverSpace
\import Topology.CoverSpace.Complete
\import Topology.TopSpace
\import Topology.UniformSpace
\import Topology.UniformSpace.Complete
\open Bounded(top)
\open RealAbGroup \hiding (+, join, meet, negative, zro<ide)
\open LowerRealBiordered (<-char, <=-char, lowerReal_<_L)

\class LowerPseudoMetricSpace \extends UniformSpace {
  | ldist : E -> E -> LowerReal
  | ldist-refl {x : E} : ldist x x = zro
  | ldist-symm {x y : E} : ldist x y = ldist y x
  | ldist-triang {x y z : E} : ldist x z <= ldist x y + ldist y z
  | ldist-uniform {C : Set (Set E)} : isUniform C <-> ∃ (eps : LowerReal) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (ldist x y < eps -> U y)

  | uniform-cover Cu x => \case ldist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => \case h x \with {
      | inP (U,CU,g) => inP (U, CU, g $ rewrite ldist-refl eps>0)
    }
  }
  | uniform-top => ldist-uniform.2 $ inP ((1 : Real), LowerRealBiordered.zro<ide, \lam x => inP (top, idp, \lam _ => ()))
  | uniform-refine Cu e => \case ldist-uniform.1 Cu \with {
    | inP (eps,eps>0,h) => ldist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
      | inP (U,CU,g) => \case e CU \with {
        | inP (V,DV,U<=V) => inP (V, DV, \lam d => U<=V $ g d)
      }
    })
  }
  | uniform-inter Cu C'u => \case ldist-uniform.1 Cu, ldist-uniform.1 C'u \with {
    | inP (eps,eps>0,h), inP (eps',eps'>0,h') => ldist-uniform.2 $ inP (eps ∧ eps', LowerRealBiordered.<_meet-univ eps>0 eps'>0, \lam x => \case h x, h' x \with {
      | inP (U,CU,g), inP (U',DU',g') => inP (U ∧ U', inP $ later (U, CU, U', DU', idp), \lam d => (g $ d <∘l LowerRealLattice.meet-left, g' $ d <∘l LowerRealLattice.meet-right))
    })
  }
  | uniform-star Cu => \case ldist-uniform.1 Cu \with {
    | inP (eps',eps'>0,h) => \case L-rounded $ (lowerReal_<_L {0}).1 eps'>0 \with {
      | inP (eps,eps<eps',eps>0) => \have eps>0 => real_<_L.2 eps>0 \in
        inP (\lam U => ∃ (x : E) (U = \lam y => ldist x y < half (half eps)), ldist-uniform.2 $ inP (half (half eps), <-char.2 $ half>0 $ later $ half>0 eps>0, \lam x => inP $ later (_, inP (x,idp), \lam d => d)), \lam {_} (inP (x,idp)) => \case h x \with {
          | inP (U,CU,g) => inP (U, CU, \lam {_} (inP (y,idp)) => later \lam (z,(xz,yz)) {w} yw => g $
              (transport (_ <) (later (pmap {LowerReal} (`+ _) $ inv (\peval _ RealAbGroup.+ _) *> half+half) *> {LowerReal} inv (\peval _ RealAbGroup.+ _) *> {LowerReal} half+half) $ ldist-triang LowerRealBiordered.<∘r LowerRealBiordered.<_+ (ldist-triang LowerRealBiordered.<∘r LowerRealBiordered.<_+ xz (transport {LowerReal} (`< _) ldist-symm yz)) (yw <∘ <-char.2 (half<id $ half>0 eps>0))) <∘ lowerReal_<_L.2 eps<eps')
        })
    }
  }

  \default isUniform C : \Prop => ∃ (eps : LowerReal) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (ldist x y < eps -> U y)
  \default ldist-uniform \as edist-uniform-impl {C} : isUniform C <-> _ => <->refl

  \lemma properUniform : IsProperUniform
    => \lam Cu => \case ldist-uniform.1 Cu \with {
      | inP (eps,eps>0,h) => ldist-uniform.2 $ inP (eps, eps>0, \lam x => \case h x \with {
        | inP (U,CU,g) => inP (U, later (CU, inP (x, g $ rewrite ldist-refl eps>0)), g)
      })
    }

  \lemma halving {z x y : E} {eps : Real} (d1 : ldist z x < half eps) (d2 : ldist z y < half eps) : ldist x y < eps
    => ldist-triang <∘r transport (_ <) (inv (\peval _ RealAbGroup.+ _) *> half+half) (LowerRealBiordered.<_+ (rewrite ldist-symm in d1) d2)

  \lemma makeUniform {eps : LowerReal} (eps>0 : 0 < eps) : UniformSpace.isUniform \lam U => ∃ (x : E) (U = \lam y => ldist x y < eps)
    => ldist-uniform.2 $ inP $ later (eps, eps>0, \lam x => inP (_, inP (x, idp), \lam r => r))

  \lemma makeUniform-real {eps : Real} (eps>0 : 0 < eps) : UniformSpace.isUniform \lam U => ∃ (x : E) (U = \lam y => ldist x y < eps)
    => makeUniform (<-char.2 eps>0)

  \lemma ldist-uniform-real {C : Set (Set E)} : UniformSpace.isUniform C <-> ∃ (eps : Real) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (ldist x y < eps -> U y)
    => (\lam Cu => \case ldist-uniform.1 Cu \with {
      | inP (eps, eps>0, h) => \case L-rounded $ lowerReal_<_L.1 eps>0 \with {
        | inP (delta,delta<eps,delta>0) => inP (delta, rat_real_<.1 delta>0, \lam x => \case h x \with {
          | inP (U,CU,g) => inP (U, CU, \lam d => g $ d <∘ lowerReal_<_L.2 delta<eps)
        })
      }
    }, \lam (inP (eps,eps>0,h)) => ldist-uniform.2 $ inP (eps, <-char.2 eps>0, h))

  \func NFilter (x : E) : SetFilter E \cowith
    | F U => ∃ (eps : Real) (0 < eps) (LOBall eps x ⊆ U)
    | filter-mono (inP (eps,eps>0,q)) p => inP (eps, eps>0, q <=∘ p)
    | filter-top => inP (1, RealAbGroup.zro<ide, \lam _ => ())
    | filter-meet (inP (eps,eps>0,p)) (inP (eps',eps'>0,p')) => inP (eps ∧ eps', LinearOrder.<_meet-univ eps>0 eps'>0, \lam d => (p $ d <∘l transportInv (LowerRealLattice.`<= _) (\peval RealAbGroup.meet _ _) meet-left, p' $ d <∘l transportInv (LowerRealLattice.`<= _) (\peval RealAbGroup.meet _ _) meet-right))

}

\lemma ldist>=0 {X : LowerPseudoMetricSpace} {x y : X} : 0 <= ldist x y
  => \lam {a} a<0 => \case LowerRealAbMonoid.+_L.1 $ (rewrite (ldist-refl,ldist-symm) in ldist-triang {_} {y} {x} {y}) {a + a} linarith \with {
    | inP (b,b<d,c,c<d,a+a<b+c) => \case LinearOrder.dec<_<= a b \with {
      | inl a<b => L-closed b<d a<b
      | inr b<=a => L-closed c<d linarith
    }
  }

\func LOBall {X : LowerPseudoMetricSpace} (eps : LowerReal) (x : X) : Set X
  => \lam y => ldist x y < eps

\lemma LOBall-center {X : LowerPseudoMetricSpace} {eps : Real} (eps>0 : 0 < eps) {x : X} : LOBall eps x x
  => transportInv (LowerRealBiordered.`< _) ldist-refl (LowerRealBiordered.<-char.2 eps>0)

\lemma LOBall-open {X : LowerPseudoMetricSpace} {eps : Real} {x : X} : isOpen (LOBall eps x)
  => cauchy-open.2 $ later \lam {y} (inP (b,b<eps,h)) => \case L-rounded b<eps \with {
    | inP (c,c<eps,b<c) => X.makeCauchy $ uniform-refine (X.makeUniform-real $ half>0 {c - b} $ rat_real_<.1 linarith) \lam {_} (inP (z,idp)) => inP (_, later \lam d {w} e => inP (c, c<eps, transport (_ <=) (inv (\peval _ RealAbGroup.+ _) *> pmap (b RealAbGroup.+) (inv RealAbGroup.minus-rat) *> +-comm *> +-assoc *> pmap (c RealAbGroup.+) negative-left *> zro-right) $ ldist-triang <=∘ LowerRealBiordered.<=_+ h (<=-less (X.halving d e))), <=-refl)
  }

\lemma ldist_open {X : LowerPseudoMetricSpace} {U : Set X} : isOpen U <-> ∀ {x : U} ∃ (eps : Real) (0 < eps) (LOBall eps x ⊆ U)
  => (\lam Uo {x} Ux => \case cauchy-lball (cauchy-open.1 Uo Ux) x \with {
    | inP (eps,eps>0,V,h,p) => inP (eps, eps>0, p <=∘ h (p $ LOBall-center eps>0))
  }, \lam f => X.cover-open \lam Ux => \case f Ux \with {
    | inP (eps,eps>0,h) => inP (_, LOBall-open, LOBall-center eps>0, h)
  })

\lemma cauchy-lball {X : LowerPseudoMetricSpace} {C : Set (Set X)} (Cc : isCauchy C) (x : X) : ∃ (eps : Real) (0 < eps) (U : C) (LOBall eps x ⊆ U)
  => \case ClosurePrecoverSpace.closure-filter (X.NFilter x) (\lam {D} Du => \case LowerPseudoMetricSpace.ldist-uniform-real.1 Du \with {
    | inP (eps,eps>0,h) => \case h x \with {
      | inP (U,DU,p) => inP (U, DU, inP (eps, eps>0, p __))
    }
  }) (uniform-cauchy.1 Cc) \with {
    | inP (U, CU, inP (eps,eps>0,p)) => inP (eps, eps>0, U, CU, p)
  }

\class LowerMetricSpace \extends LowerPseudoMetricSpace, SeparatedCoverSpace
  | ldist-ext {x y : E} : ldist x y = zro -> x = y
  | isSeparatedCoverSpace {x} {y} f => ldist-ext $ <=-antisymmetric (<=-char \lam d>0 => \case L-rounded d>0 \with {
    | inP (eps,eps<d,eps>0) => \case f (makeCauchy $ makeUniform {_} {half eps} $ <-char.2 $ half>0 $ real_<_L.2 eps>0) \with {
        | inP (U, inP (z,p), (Ux,Uy)) =>
          \have | U'x => rewrite p Ux
                | U'y => rewrite p Uy
          \in <-irreflexive $ halving U'x U'y <∘ lowerReal_<_L.2 eps<d
      }
  }) ldist>=0

\class CompleteLowerMetricSpace \extends LowerMetricSpace, CompleteUniformSpace