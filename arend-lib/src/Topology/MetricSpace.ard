\import Algebra.Domain.Euclidean
\import Algebra.Linear.Solver
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Ordered
\import Algebra.Pointed
\import Algebra.Ring.Solver
\import Arith.Rat
\import Arith.Real
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths.Meta
\import Set.Subset
\import Topology.CoverSpace.Real
\import Topology.UniformSpace
\open Bounded(top)

\class PseudoMetricSpace \extends UniformSpace {
  | dist : E -> E -> Real
  | dist-refl {x : E} : dist x x = zro
  | dist-symm {x y : E} : dist x y = dist y x
  | dist-triang {x y z : E} : dist x z <= dist x y + dist y z

  | isUniform C => ∃ (eps : Real) (0 < eps) ∀ x ∃ (U : C) ∀ {y} (dist x y < eps -> U y)
  | uniform-cover (inP (eps,eps>0,h)) x => \case h x \with {
    | inP (U,CU,g) => inP (U, CU, g $ rewrite dist-refl eps>0)
  }
  | uniform-top => inP (1, zro<ide, \lam x => inP (top, idp, \lam _ => ()))
  | uniform-extend (inP (eps,eps>0,h)) e => inP (eps, eps>0, \lam x => \case h x \with {
    | inP (U,CU,g) => \case e CU \with {
      | inP (V,DV,U<=V) => inP (V, DV, \lam d => U<=V $ g d)
    }
  })
  | uniform-inter (inP (eps,eps>0,h)) (inP (eps',eps'>0,h')) => inP (eps ∧ eps', LinearOrder.<_meet-univ eps>0 eps'>0, \lam x => \case h x, h' x \with {
    | inP (U,CU,g), inP (U',DU',g') => inP (U ∧ U', inP (U, CU, U', DU', idp), \lam d => (g $ d <∘l meet-left, g' $ d <∘l meet-right))
  })
  | uniform-star (inP (eps,eps>0,h)) => inP (\lam V => \Sigma (∃ V) (∀ {x y : V} (dist x y < eps * ratio 1 2)), inP (eps * ratio 1 4, linarith, \lam x => inP (\lam y => dist x y < eps * ratio 1 4, (inP (x, rewrite dist-refl linarith), \lam {z} p q => dist-triang {_} {z} {x} <∘r rewrite dist-symm (OrderedAddMonoid.<_+ p q <∘l linarith)), \lam c => c)), \case \elim __ \with {
    | (inP (x,Vx),g) => \case h x \with {
      | inP (U,CU,f) => inP (U, CU, \case \elim __ \with {
        | (inP (y,V'y),g') => \lam (z,(Vz,V'z)) => \lam {w} V'w => f $ dist-triang <∘r OrderedAddMonoid.<_+ (g Vx Vz) (g' V'z V'w) <∘l linarith (usingOnly ())
      })
    }
  })

  \lemma dist>=0 {x y : E} : 0 <= dist x y
    => linarith $ rewriteF (dist-refl,dist-symm) (dist-triang {_} {y} {x} {y})
}

\class LinearBaseRingData \extends LinearData, BaseRingData {
  \override R : OrderedRing
}

\class MetricSpace \extends PseudoMetricSpace
  | dist-ext {x y : E} : dist x y = zro -> x = y