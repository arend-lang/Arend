\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid
\import Algebra.Ordered
\import Arith.Real
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Biordered
\import Order.Lattice
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Subset
\import Topology.MetricSpace
\import Topology.MetricSpace.ValuedMetricSpace
\import Topology.NormedAbGroup.ValuedNormedAbGroup
\import Topology.TopAbGroup
\import Topology.TopAbGroup.Complete
\import Topology.UniformSpace.Product

\class PseudoNormedAbGroup \extends LinearlyValuedPseudoNormedAbGroup, PseudoMetricSpace {
  \func IsUnbounded : \Prop
    => \Pi (B : Nat) -> ∃ (x : E) (B RealAbGroup.< norm x)

  \lemma norm_BigSum {l : Array E} : norm (BigSum l) <= RealAbGroup.BigSum \lam j => norm (l j) \elim l
    | nil => transportInv (`<= _) norm_zro <=-refl
    | x :: l => norm_+ <=∘ <=_+ <=-refl norm_BigSum
}

\class NormedAbGroup \extends PseudoNormedAbGroup, MetricSpace
  | norm-ext {x : E} : norm x = (0 : Real) -> x = zro
  | dist-ext p => fromZero $ norm-ext $ inv norm-dist *> p

\lemma norm_-left {X : PseudoNormedAbGroup} {x y : X} : norm x - norm y <= norm (x - y)
  => transport (_ <=) (+-assoc *> pmap (_ +) negative-right *> zro-right) $ <=_+ (transport (norm __ <= _) (+-assoc *> pmap (x +) negative-left *> zro-right) norm_+) <=-refl

\lemma norm_-right {X : PseudoNormedAbGroup} {x y : X} : norm y - norm x <= norm (x - y)
  => transport (_ <=) norm_- norm_-left

\lemma norm_-_abs {X : PseudoNormedAbGroup} {x y : X} : RealAbGroup.abs (norm x - norm y) <= norm (x - y)
  => join-univ norm_-left (simplify norm_-right)

\record UniformNormedAbGroupMap \extends UniformMetricMap, TopAbGroupMap {
  \override Dom : PseudoNormedAbGroup
  \override Cod : PseudoNormedAbGroup

  | func-norm-uniform : ∀ {eps : Real} (0 < eps) ∃ (delta : Real) (0 < delta) ∀ {x : Dom} (norm x < delta -> norm (func x) < eps)
  | func-dist-uniform eps>0 => \case func-norm-uniform eps>0 \with {
    | inP (delta,delta>0,h) => inP (delta, delta>0, unfold \lam d => rewrite (norm-dist {Cod}, inv AddGroupHom.func-minus) $ h $ rewriteI (norm-dist {Dom}) d)
  }

  \default func-norm-uniform eps>0 => \case dist_open.1 (func-cont OBall-open) $ rewrite func-zro $ OBall-center eps>0 \with {
    | inP (delta,delta>0,h) => inP (delta, delta>0, \lam d => rewrite (norm_dist {Cod}, inv func-zro) $ h $ rewrite (norm_dist {Dom}) in d)
  }
}

\record NormedAbGroupMap \extends UniformNormedAbGroupMap, MetricMap {
  \override Dom : PseudoNormedAbGroup
  \override Cod : PseudoNormedAbGroup

  | func-norm {x : Dom} : norm (func x) <= norm x
  | func-norm-uniform {eps} eps>0 => inP (eps, eps>0, \lam d => func-norm <∘r d)
  | func-dist => unfold $ rewrite (norm-dist {Dom}, norm-dist {Cod}, inv AddGroupHom.func-minus) func-norm
}

\record NormedIsometricMap \extends NormedAbGroupMap, IsometricMap {
  \override Dom : PseudoNormedAbGroup
  \override Cod : PseudoNormedAbGroup

  | func-norm-isometry {x : Dom} : norm (func x) = norm x
  | func-norm => Preorder.=_<= func-norm-isometry
  | func-isometry => norm-dist *> pmap norm (inv func-minus) *> func-norm-isometry *> inv norm-dist
}

\class CompleteNormedAbGroup \extends NormedAbGroup, CompleteMetricSpace, CompleteTopAbGroup
