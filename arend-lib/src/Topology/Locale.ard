\import Algebra.Meta
\import Algebra.Ordered
\import Arith.Fin
\import Arith.Nat
\import Category
\import Category.Functor
\import Category.Meta
\import Category.Sub
\import Data.Array
\import Data.Bool
\import Data.Maybe
\import Data.Or
\import Equiv (ESEquiv, Embedding, Equiv, QEquiv, idEquiv)
\import Equiv.Univalence (Equiv-to-=)
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice \hiding (DistributiveLattice)
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Set.Category
\import Set.Fin
\open Bounded(DistributiveLattice,top,top-univ)
\open MeetSemilattice

\class Locale \extends DistributiveLattice {
  | Join {J : \Set} : (J -> E) -> E
  | Join-cond {J : \Set} (j : J) {f : J -> E} : f j <= Join f
  | Join-univ {J : \Set} {f : J -> E} {e : E} : (\Pi (j : J) -> f j <= e) -> Join f <= e
  | Join-ldistr>= {J : \Set} {f : J -> E} {e : E} : e ∧ Join f <= Join (\lam (j : J) => e ∧ f j)

  | bottom => Join absurd
  | bottom-univ {x} => Join-univ (\case __)
  | join x y => Join (if __ x y)
  | join-left {x} {y} => Join-cond true
  | join-right {x} {y} => Join-cond false
  | join-univ x<=z y<=z => Join-univ (\case \elim __ \with {
    | true => x<=z
    | false => y<=z
  })
  | ldistr>= {x} {y} {z} =>
    \have t : (\lam b => if b (x ∧ y) (x ∧ z)) = (\lam b => x ∧ if b y z)
            => ext (\lam b => cases b idp)
    \in unfold (rewrite t Join-ldistr>=)

  \lemma Join-ldistr {J : \Set} {f : J -> E} {e : E} : e ∧ Join f = Join (\lam (j : J) => e ∧ f j)
    => <=-antisymmetric Join-ldistr>= (Join-univ (\lam j => meet-univ meet-left (<=-transitive meet-right (Join-cond j))))

  \lemma Join-rdistr {J : \Set} {f : J -> E} {e : E} : Join f ∧ e = Join (\lam (j : J) => f j ∧ e)
    => meet-comm *> Join-ldistr *> pmap Join (ext (\lam j => meet-comm))

  \lemma Join-double {I J : \Set} {f : I -> J -> E} : Join (\lam i => Join (\lam j => f i j)) = Join (\lam (p : \Sigma I J) => f p.1 p.2)
    => <=-antisymmetric (Join-univ (\lam i => Join-univ (\lam j => Join-cond (i,j)))) (Join-univ (\lam p => <=-transitive (Join-cond p.2) (Join-cond p.1)))

  \lemma Join-distr {I J : \Set} {f : I -> E} {g : J -> E} : Join f ∧ Join g = Join (\lam (p : \Sigma I J) => f p.1 ∧ g p.2)
    => Join-rdistr *> path (\lam i => Join (\lam i' => Join-ldistr {_} {J} {g} {f i'} @ i)) *> Join-double {_} {I} {J} {\lam i j => f i ∧ g j}

  \func SJoin (U : E -> \Prop) => Join (\lam (t : \Sigma (x : E) (U x)) => t.1)

  \type \infix 4 << (x y : E) => \Pi {J : \Set} {g : J -> E} -> y <= Join g -> ∃ (l : Array J) (x <= Join (\lam i => g (l i)))

  \type isCompact => top << top

  \type isLocallyCompact => \Pi (x : E) -> x <= SJoin (`<< x)

  \func \infixr 5 --> (x y : E) => SJoin (__ ∧ x <= y)

  \lemma exponent {x y z : E} : (x ∧ y <= z) = (x <= y --> z)
    => ext (dir,conv)
    \where {
      \lemma dir {x y z : E} (p : x ∧ y <= z) : x <= y --> z
        => Join-cond (later (x,p))

      \lemma conv {x y z : E} (p : x <= y --> z) : x ∧ y <= z
        => <=-transitive (meet-monotone p <=-reflexive) eval
    }

  \lemma eval {x y : E} : (x --> y) ∧ x <= y
    => rewrite Join-rdistr (Join-univ __.2)

  \lemma trueExponent {x y : E} (p : x <= y) : top <= x --> y
    => exponent.dir (<=-transitive meet-right p)

  \func open (a : E) : Nucleus (a --> __) \cowith
    | nucleus-meet => <=-antisymmetric
        (meet-univ (exponent.dir (<=-transitive eval meet-left)) (exponent.dir (<=-transitive eval meet-right)))
        (exponent.dir (meet-univ (<=-transitive (meet-monotone meet-left <=-reflexive) eval) (<=-transitive (meet-monotone meet-right <=-reflexive) eval)))
    | nucleus-unit => exponent.dir meet-left
    | nucleus-join => exponent.dir (transport (_ ∧ __ <= _) meet-idemp (transport (`<= _) meet-assoc (<=-transitive (meet-monotone eval <=-reflexive) eval)))

  \func closed (a : E) : Nucleus (a ∨ __) \cowith
    | nucleus-meet => equation
    | nucleus-unit => join-right
    | nucleus-join => join-univ join-left <=-reflexive

  \lemma closed-isClosed (a : E) : Nucleus.isClosed {closed a}
    => \lam {x} => join-univ (<=-transitive join-left join-left) join-right
}

\record FrameHom \extends SetHom {
  \override Dom : Locale
  \override Cod : Locale
  | func-top : func top = top
  | func-meet {x y : Dom} : func (x ∧ y) = func x ∧ func y
  | func-Join {J : \Set} {f : J -> Dom} : func (Join f) = Join (\lam j => func (f j))
  | func-Join>= {J : \Set} {f : J -> Dom} : func (Join f) <= Join (\lam j => func (f j))

  \default func-Join>= {J} {f} => transport (_ <=) func-Join <=-reflexive
  \default func-Join \as func-Join-impl {J} {f} => <=-antisymmetric func-Join>= (Join-univ (\lam j => func-<= (Join-cond j)))

  \lemma func-<= {x y : Dom} (x<=y : x <= y) : func x <= func y
    => rewrite (inv (pmap func (meet_<= x<=y)) *> func-meet) meet-right

  \func direct (y : Cod) : Dom => SJoin (func __ <= y)

  \lemma direct-<= {y z : Cod} (p : y <= z) : direct y <= direct z
    => Join-univ (\lam (x,q) => Join-cond (later (x, <=-transitive q p)))

  \lemma direct-meet {y z : Cod} : direct (y ∧ z) = direct y ∧ direct z
    => <=-antisymmetric (meet-univ (direct-<= meet-left) (direct-<= meet-right)) (Join-cond (later (direct y ∧ direct z, meet-univ (<=-transitive (func-<= meet-left) direct-counit) (<=-transitive (func-<= meet-right) direct-counit))))

  \lemma direct-counit {y : Cod} : func (direct y) <= y
    => <=-transitive func-Join>= (Join-univ __.2)

  \func nucleus : Nucleus (\lam x => direct (func x)) \cowith
    | nucleus-meet => pmap direct func-meet *> direct-meet
    | nucleus-unit {x} => Join-cond (later (x,<=-reflexive))
    | nucleus-join => direct-<= direct-counit
}

-- | Nuclei encode sublocales
\record Nucleus {L : Locale} (\coerce nucleus : L -> L) {
  | nucleus-meet {x y : L} : nucleus (x ∧ y) = nucleus x ∧ nucleus y
  | nucleus-unit {x : L} : x <= nucleus x
  | nucleus-join {x : L} : nucleus (nucleus x) <= nucleus x

  \lemma nucleus-<= {x y : L} (p : x <= y) : nucleus x <= nucleus y
    => rewrite (inv (pmap nucleus (meet_<= p)) *> nucleus-meet) meet-right

  \lemma nucleus-univ {x y : L} (p : x <= nucleus y) : nucleus x <= nucleus y
    => <=-transitive (nucleus-<= p) nucleus-join

  \func locale : Locale (\Sigma (x : L) (nucleus x <= x)) \cowith
    | <= (x,_) (y,_) => x <= y
    | <=-reflexive => <=-reflexive
    | <=-transitive => <=-transitive
    | <=-antisymmetric p q => ext (<=-antisymmetric p q)
    | meet (x,p) (y,q) => (x ∧ y, rewrite nucleus-meet (meet-monotone p q))
    | meet-left => meet-left
    | meet-right => meet-right
    | meet-univ => meet-univ
    | top => (top, top-univ)
    | top-univ => top-univ
    | Join f => (nucleus (Join (f __).1), nucleus-join)
    | Join-cond j {f} => <=-transitive (Join-cond j) nucleus-unit
    | Join-univ {J} {f} {e} h => <=-transitive (nucleus-<= (Join-univ h)) e.2
    | Join-ldistr>= {J} {f} {e} => <=-transitive (meet-monotone nucleus-unit <=-reflexive) (transport (`<= _) nucleus-meet (nucleus-<= Join-ldistr>=))

  \func map : FrameHom L locale \cowith
    | func x => (nucleus x, nucleus-join)
    | func-top => ext (<=-antisymmetric top-univ nucleus-unit)
    | func-meet => ext nucleus-meet
    | func-Join>= => nucleus-<= (Join-univ (\lam j => <=-transitive nucleus-unit (Join-cond j)))

  \func isClosed => \Pi {x : L} -> nucleus x <= nucleus L.bottom ∨ x
}

-- | The order of nuclei is inversed. That is, `n <= m` iff `m.locale` is a sublocale of `n.locale`.
\instance NucleusPoset (L : Locale) : Poset (Nucleus {L})
  | <= j j' => \Pi {x : L} -> j x <= j' x
  | <=-reflexive => <=-reflexive
  | <=-transitive p q {x} => <=-transitive p q
  | <=-antisymmetric p q => exts (\lam x => <=-antisymmetric p q)
  \where {
    \lemma closed>=open {L : Locale} {c a : L} (p : top <= c ∨ a) : closed c >= open a
      => \lam {x} => <=-transitive (meet-univ <=-reflexive (<=-transitive top-univ p)) (<=-transitive ldistr>= (JoinSemilattice.join-monotone meet-right eval))
      \where
        \lemma conv {L : Locale} {c a : L} (p : closed c >= open a) : top <= c ∨ a
          => <=-transitive (trueExponent <=-reflexive) p

    \lemma open<=closed {L : Locale} {c a : L} (p : c ∧ a <= L.bottom) : open a >= closed c
      => \lam {x} => unfold (join-univ (exponent.dir (<=-transitive p L.bottom-univ)) (exponent.dir meet-left))
      \where
        \lemma conv {L : Locale} {c a : L} (p : open a >= closed c) : c ∧ a <= L.bottom
          => <=-transitive (meet-monotone join-left <=-reflexive) (exponent.conv p)
  }

-- | A closed and "bounded" sublocale is compact.
\lemma closed-compact {L : Locale} {N : Nucleus {L}} (c : N.isClosed) {a : L} (w : a << top) (b : N >= open a) : N.locale.isCompact
  => \lam {J} {g} top<=g =>
      \let | g' (j : Maybe J) : L => \case \elim j \with { | nothing => N L.bottom | just j => (g j).1 }
           | top<=g' : top <= Join g' => <=-transitive (<=-transitive top<=g c) (join-univ (Join-cond nothing) (Join-univ (\lam j => Join-cond (just j))))
           | (inP (l,a<=g'l)) => w top<=g'
      \in inP (filterMap (\lam x => x) l, unfold (<=-transitive (trueExponent a<=g'l) (<=-transitive b (Nucleus.nucleus-univ (Join-univ (\lam j' => later (cases (l j' arg addPath) \with {
        | nothing, _ => Nucleus.nucleus-<= L.bottom-univ
        | just j, p => \have (k,q) => filterMap-index (\lam x => x) l p
                       \in <=-transitive (rewriteI q (Join-cond k)) nucleus-unit
      })))))))

\func FrameCat : Cat Locale \cowith
  | Hom => FrameHom
  | id L => \new FrameHom {
    | func x => x
    | func-top => idp
    | func-meet => idp
    | func-Join => idp
  }
  | o g f => \new FrameHom {
    | func x => g (f x)
    | func-top => pmap g func-top *> func-top
    | func-meet {x} {y} => pmap g func-meet *> func-meet
    | func-Join {J} {h} => pmap g func-Join *> func-Join
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam {X} {S1} {S2} (h1 : FrameHom) (h2 : FrameHom) => exts Locale {
    | <= x y => ext (h1.func-<=, h2.func-<=)
    | meet x y => h1.func-meet
    | top => h1.func-top
    | Join f => h1.func-Join
  })

\instance LocaleCat => op FrameCat

{- | Presentation of frames.
 -   {conj} represents meets and {BasicCover} represents relation `__ <= Join __`.
 -}
\class FramePres \extends BaseSet {
  | conj : E -> E -> E
  | BasicCover {J : \Set} : E -> (J -> E) -> \Prop

  \type \infix 4 << (x y : E) => \Pi {J : \Set} {g : J -> E} -> Cover y g -> ∃ (l : Array J) (Cover x (\lam i => g (l i)))

  \func SCover (x : E) (U : E -> \Prop) => Cover x (\lam (t : \Sigma (x : E) (U x)) => t.1)

  \type isLocallyCompact => \Pi (x : E) -> SCover x (`<< x)
} \where {
  \type Indexing {I X : \Set} (h : I -> \Sigma (J : \Set) X (J -> X)) {J : \Set} (e : X) (g : J -> X)
    => ∃ (i : I) (p : Equiv {(h i).1} {J}) ((h i).2 = e) (\Pi (j : (h i).1) -> (h i).3 j = g (p j))

  \lemma indexing-make {I X : \Set} {h : I -> \Sigma (J : \Set) X (J -> X)} (i : I) : Indexing h (h i).2 (h i).3
    => inP (i, idEquiv, idp, \lam j => idp)

  \lemma indexing-transport {I X : \Set} {g : I -> \Sigma (J : \Set) X (J -> X)}
                              (P : \Pi {J : \Set} (e : X) (f : J -> X) -> \Prop)
                              (p : \Pi (i : I) -> P (g i).2 (g i).3)
                              {J : \Set} {e : X} {f : J -> X} (b : Indexing g e f) : P e f \elim b
    | inP (i,q,s,t) =>
      \have r : ((g i).1, (g i).3) = {\Sigma (K : \Set) (K -> X)} (J,f) => exts (Equiv-to-= q, t)
      \in coe (\lam i => P {(r @ i).1} (s @ i) (r @ i).2) (p i) right
}

\truncated \data Cover {P : FramePres} (x : P) {J : \Set} (g : J -> P) : \Prop
  | cover-basic (BasicCover x g)
  | cover-inj (j : J) (g j = x)
  | cover-trans {I : \Set} {f : I -> P} (Cover x f) (\Pi (i : I) -> Cover (f i) g)
  | cover-proj1 {a b : P} (x = conj a b) (j : J) (g j = a)
  | cover-proj2 {a b : P} (x = conj a b) (j : J) (g j = b)
  | cover-idemp (j : J) (g j = conj x x)
  | cover-comm {a b : P} (x = conj a b) (j : J) (g j = conj b a)
  | cover-ldistr {a b : P} (x = conj a b) {f : J -> P} (Cover b f) (\Pi (j : J) -> g j = conj a (f j))
  \where {
    \lemma cover-index {P : FramePres} {x : P} {l : Array P} (i : Index x l) : Cover x l
      => cover-inj i.1 i.2

    \lemma cover-ldistr' {P : FramePres} {x : P} {J : \Set} {g : J -> P} {a b : P} (x=ab : x = conj a b) {I : \Set} {h : I -> P} (ah : Cover b h) (f : \Pi (i : I) -> ∃ (j : J) (g j = conj a (h i))) : Cover x g
      => cover-trans (cover-ldistr {_} {_} {I} {\lam i => conj a (h i)} x=ab ah (\lam j => idp)) (\lam i => \case f i \with {
        | inP (j,p) => cover-inj j p
      })

    \lemma cover-rdistr' {P : FramePres} {x : P} {J : \Set} {g : J -> P} {a b : P} (x=ab : x = conj a b) {I : \Set} {h : I -> P} (ah : Cover a h) (f : \Pi (i : I) -> ∃ (j : J) (g j = conj (h i) b)) : Cover x g
      => \have t => cover-trans {P} {_} {I} {\lam j => conj b (h j)} (cover-comm {P} {x} {\Sigma} {\lam _ => conj b a} x=ab () idp) (\lam _ => cover-ldistr' idp ah (\lam j => inP (j,idp)))
         \in cover-trans t (\lam j => \case f j \with {
          | inP (i,p) => cover-comm idp i p
        })

    \lemma cover-rdistr {P : FramePres} {x : P} {J : \Set} {g : J -> P} {a b : P} (x=ab : x = conj a b) {h : J -> P} (ah : Cover a h) (f : \Pi (j : J) -> g j = conj (h j) b) : Cover x g
      => cover-rdistr' x=ab ah (\lam j => inP (j, f j))

    \lemma cover-conj {P : FramePres} {J : \Set} {g : J -> P} {a b : P} {I1 : \Set} {h1 : I1 -> P} (aV : Cover a h1) {I2 : \Set} {h2 : I2 -> P} (bW : Cover b h2) (f : \Pi {i1 : I1} {i2 : I2} -> ∃ (j : J) (g j = conj (h1 i1) (h2 i2))) : Cover (conj a b) g
      => cover-trans {P} {_} {J} {g} {_} {\lam i => conj a (h2 i)} (cover-ldistr' idp bW (\lam i => inP (i, idp))) (\lam i2 => cover-rdistr' idp aV (\lam i1 => f))

    \lemma cover-prod {P : FramePres} {x y z : P} (c : Cover x {\Sigma} (\lam _ => y)) (d : Cover x {\Sigma} (\lam _ => z)) : Cover x {\Sigma} (\lam _ => conj y z)
      => cover-trans (cover-idemp {_} {_} {_} {\lam _ => conj x x} () idp) (\lam _ => cover-conj c d (\lam {i1} {i2} => inP ((),idp)))

    \lemma map {F : FramePresHom} {x : F.Dom} {J : \Set} {g : J -> F.Dom} (c : Cover x g) : Cover (F x) (\lam j => F (g j)) \elim c
      | cover-basic b => cover-basic (func-cover b)
      | cover-inj j p => cover-inj j (pmap F p)
      | cover-trans c g => cover-trans (map c) (\lam i => map (g i))
      | cover-proj1 p j q => cover-proj1 (pmap F p *> func-conj) j (pmap F q)
      | cover-proj2 p j q => cover-proj2 (pmap F p *> func-conj) j (pmap F q)
      | cover-idemp j p => cover-idemp j (pmap F p *> func-conj)
      | cover-comm p j q => cover-comm (pmap F p *> func-conj) j (pmap F q *> func-conj)
      | cover-ldistr p c f => cover-ldistr (pmap F p *> func-conj) (map c) (\lam j => pmap F (f j) *> func-conj)
  }

\record FramePresHom \extends SetHom {
  \override Dom : FramePres
  \override Cod : FramePres
  | func-conj {x y : Dom} : func (conj x y) = conj (func x) (func y)
  | func-cover {J : \Set} {x : Dom} {f : J -> Dom} : BasicCover x f -> BasicCover (func x) (\lam j => func (f j))
  | func-image {y : Cod} : Cover y func
}

\instance FramePresCat : Cat FramePres
  | Hom => FramePresHom
  | id X => \new FramePresHom {
    | func x => x
    | func-conj => idp
    | func-cover c => c
    | func-image {x} => cover-inj x idp
  }
  | o g f => \new FramePresHom {
    | func x => g (f x)
    | func-conj => pmap g func-conj *> func-conj
    | func-cover c => func-cover (func-cover c)
    | func-image => cover-trans func-image (\lam y => Cover.map func-image)
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam {X} {S1} {S2} (h1 : FramePresHom) (h2 : FramePresHom) => exts FramePres {
    | conj x y => h1.func-conj
    | BasicCover x f => ext (h1.func-cover, h2.func-cover)
  })

{- | We can define the underlying set of {PresentedFrame} as the quotient of the set `P -> \Prop`
 -   under the relation `\Sigma (U <= V) (V <= U)`, where `U <= V` iff `\Pi (x : P) -> U x -> Cover x V`.
 -   Alternatively, we can define this set as a maximal element of an equivalence class.
 -   A subset is maximal if every element covered by it actually belongs to it.
 -   We use the second option.
 -}
\instance PresentedFrame (P : FramePres) : Locale
  | E => Opens P
  | <= => <=
  | <=-reflexive u => u
  | <=-transitive U<=V V<=W xU => V<=W (U<=V xU)
  | <=-antisymmetric U<=V V<=U => exts (\lam x => ext (U<=V, V<=U))
  | meet U V => closure (\lam (t : \Sigma (a b : P) (U.1 a) (V.1 b)) => conj t.1 t.2)
  | meet-left {U} {V} => closure<= (\lam t => cover-proj1 idp (t.1,t.3) idp)
  | meet-right {U} {V} => closure<= (\lam t => cover-proj2 idp (t.2,t.4) idp)
  | meet-univ {U} {V} {W} W<=U W<=V {x} xW => cover-trans (cover-idemp {P} {x} {\Sigma} {\lam _ => conj x x} () idp) (\lam _ => cover-inj (x, x, W<=U xW, W<=V xW) idp)
  | top => (\lam _ => \Sigma, \lam _ _ => ())
  | top-univ _ => ()
  | Join {J} f => closure {_} {\Sigma (j : J) (x : P) ((f j).1 x)} __.2
  | Join-cond j {_} {x} c => cover-inj (j,x,c) idp
  | Join-univ {J} {f} {U} d => closure<= (\lam t => cover-inj (t.2, d t.1 t.3) idp)
  | Join-ldistr>= => cover-trans __ (\lam t => Cover.cover-ldistr' idp t.4 (\lam s => inP ((s.1, conj t.1 s.2, cover-inj (t.1, s.2, t.3, s.3) idp), idp)))
  \where {
    \open FramePres(SCover)

    \func Opens (P : FramePres) => \Sigma (U : P -> \Prop) (\Pi (x : P) -> SCover x U -> U x)

    \func closure {P : FramePres} {J : \Set} (g : J -> P) : Opens P
      => (Cover __ g, \lam x c => cover-trans c __.2)

    \type \infix 4 <= {P : FramePres} (U V : Opens P) => \Pi {x : P} -> U.1 x -> V.1 x

    \lemma closure<= {P : FramePres} {J : \Set} {g : J -> P} {U : Opens P} (p : \Pi (j : J) -> SCover (g j) U.1) : closure g <= U
      => \lam {x} c => U.2 x (cover-trans c p)

    \func embed {P : FramePres} (x : P) : PresentedFrame P
      => closure {_} {\Sigma} (\lam _ => x)

    \lemma embed<= {P : FramePres} {x : P} {U : Opens P} (p : SCover x U.1) : embed x <= U
      => closure<= (\lam _ => p)
  }

{- | Unital presentation of frames.
 -   {unit} represents the top element.
 -}
\class FrameUnitalPres \extends FramePres
  | unit : E
  | isUnit {x : E} : Cover x {\Sigma} (\lam _ => unit)

\record FrameUnitalPresHom \extends FramePresHom {
  \override Dom : FrameUnitalPres
  \override Cod : FrameUnitalPres
  | func-unit : func unit = unit
  | func-image => cover-trans isUnit (\lam _ => cover-inj unit func-unit)
}

\instance FrameUnitalPresCat : Cat FrameUnitalPres
  | Hom => FrameUnitalPresHom
  | id X => \new FrameUnitalPresHom {
    | FramePresHom => FramePresCat.id X
    | func-unit => idp
  }
  | o g f => \new FrameUnitalPresHom {
    | FramePresHom => FramePresCat.o g f
    | func-unit => pmap g func-unit *> func-unit
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam {X} {S1} {S2} (h1 : FrameUnitalPresHom) (h2 : FrameUnitalPresHom) => exts FrameUnitalPres {
    | conj x y => h1.func-conj
    | BasicCover x f => ext (h1.func-cover, h2.func-cover)
    | unit => h1.func-unit
  })

\func FrameUnitalSubcat : FullyFaithfulFunctor FrameCat FrameUnitalPresCat \cowith
  | F (L : Locale) : FrameUnitalPres \cowith {
    | E => L
    | conj => meet
    | BasicCover x f => x <= Join f
    | unit => top
    | isUnit => cover-basic (<=-transitive top-univ (Join-cond ()))
  }
  | Func {X Y : Locale} (h : FrameHom X Y) : FrameUnitalPresHom (F X) (F Y) \cowith {
    | func => h
    | func-conj => func-meet
    | func-cover c => transport (_ <=) func-Join (FrameHom.func-<= c)
    | func-unit => func-top
  }
  | Func-id => idp
  | Func-o g f => idp
  | isFullyFaithful => \new QEquiv {
    | ret h => \new FrameHom {
      | func => h
      | func-top => func-unit
      | func-meet => func-conj
      | func-Join>= => func-cover {h} <=-reflexive
    }
    | ret_f h => idp
    | f_sec h => idp
  }

\func FrameReflectiveSubcat : ReflectiveSubPrecat FrameCat FramePresCat \cowith
  | F => F
  | Func => Func
  | Func-id => idp
  | Func-o g f => idp
  | isFullyFaithful => FrameUnitalSubcat.isFullyFaithful
  | reflector => PresentedFrame
  | reflectorMap (X : FramePres) : FramePresHom X (F (PresentedFrame X)) \cowith {
    | func => PresentedFrame.embed
    | func-conj {x} {y} => <=-antisymmetric
        (cover-trans __ (\lam _ => cover-inj (x, y, cover-inj () idp, cover-inj () idp) idp))
        (cover-trans __ (\lam t => Cover.cover-conj t.3 t.4 (\lam {_} {_} => inP ((),idp))))
    | func-cover {_} {_} {f} b c => cover-trans c (\lam _ => cover-trans (cover-basic b) (\lam j => cover-inj (j, f j, cover-inj () idp) idp))
    | func-image => cover-basic (\lam {x} _ => cover-inj (x, x, cover-inj () idp) idp)
  }
  | isReflective {X : FramePres} {Y : Locale} => ESEquiv.toEquiv (\new ESEquiv {
    | Embedding => Embedding.fromInjection (\lam {h} {h'} p => exts (\lam e =>
        \let | g (q : \Sigma (x : X) (e.1 x)) => reflectorMap X q.1
             | t : e = Join {PresentedFrame X} g => exts (\lam x => ext (\lam u => cover-inj ((x, u), x, cover-inj () idp) idp, closure<= (\lam t => cover-trans t.3 (\lam _ => cover-inj t.1 idp))))
        \in rewrite t (func-Join {h} {_} {g} *> path (\lam i => Join (\lam (j : \Sigma (x : X) (e.1 x)) => (p @ i) j.1)) *> inv (func-Join {h'} {_} {g}))))
    | isSurj f => inP (adjointMap f, exts (\lam x => unfold (<=-antisymmetric
        (Join-univ (\lam j => <=-transitive (locale_cover (Cover.map j.2)) (Join-univ (\lam _ => <=-reflexive))))
        (Join-cond (later (x, cover-inj () idp))))))
  })
  \where {
    \open PresentedFrame \hiding (<=)
    \open FrameUnitalSubcat

    \lemma locale_cover {L : Locale} {x : L} {J : \Set} {g : J -> L} (c : Cover {F L} x g) : x <= L.Join g \elim c
      | cover-basic b => b
      | cover-inj j p => rewriteI p (Join-cond j)
      | cover-trans c f => <=-transitive (locale_cover c) (Join-univ (\lam i => locale_cover (f i)))
      | cover-proj1 p j q => rewrite p (<=-transitive meet-left (rewriteI q (Join-cond j)))
      | cover-proj2 p j q => rewrite p (<=-transitive meet-right (rewriteI q (Join-cond j)))
      | cover-idemp j p => transport (`<= _) (p *> meet-idemp) (Join-cond j)
      | cover-comm p j q => transport (`<= _) (q *> meet-comm *> inv p) (Join-cond j)
      | cover-ldistr p c f => rewrite p (<=-transitive (meet-univ meet-left (<=-transitive meet-right (locale_cover c))) (<=-transitive Join-ldistr>= (Join-univ (\lam j => transport (`<= _) (f j) (Join-cond j)))))

    \func adjointMap {X : FramePres} {Y : Locale} (f : FramePresHom X (F Y)) : FrameHom (PresentedFrame X) Y \cowith
      | func U => Y.Join {\Sigma (x : X) (U.1 x)} (\lam j => f j.1)
      | func-top => <=-antisymmetric top-univ (<=-transitive (locale_cover f.func-image) (Join-univ (\lam x => Join-cond (x, ()))))
      | func-meet {U} {V} => <=-antisymmetric
          (Join-univ (later (\lam p => <=-transitive (locale_cover (Cover.map p.2)) (Join-univ (\lam t => rewrite f.func-conj (Join-cond (later ((t.1,t.3),(t.2,t.4)))))))))
          (Join-univ (\lam p => transport (`<= _) f.func-conj (Y.Join-cond (later (conj p.1.1 p.2.1, cover-inj (later (p.1.1, p.2.1, p.1.2, p.2.2)) idp))))) *> inv (Locale.Join-distr)
      | func-Join>= => Join-univ (\lam p => <=-transitive (locale_cover (Cover.map p.2)) (Join-univ (\lam t => <=-transitive (Join-cond (later (t.2,t.3))) (Join-cond t.1))))
  }

\func FrameUnitalReflectiveSubcat : ReflectiveSubPrecat FrameCat FrameUnitalPresCat \cowith
  | FullyFaithfulFunctor => FrameUnitalSubcat
  | reflector X => FrameReflectiveSubcat.reflector X
  | reflectorMap X => \new FrameUnitalPresHom {
    | FramePresHom => FrameReflectiveSubcat.reflectorMap X
    | func-unit => exts (\lam e => ext (\lam _ => (), \lam _ => isUnit))
  }
  | isReflective {X} {Y} => \new QEquiv {
    | ret h => FrameReflectiveSubcat.isReflective.ret h
    | ret_f h => FrameReflectiveSubcat.isReflective.ret_f h
    | f_sec h => ext (pmap {FramePresHom X (FrameUnitalSubcat.F Y)} (func {__}) (FrameReflectiveSubcat.isReflective.f_ret h))
  }

\open PresentedFrame \hiding (<=)
\open Locale

\lemma <<-fromPres {P : FramePres} {x y : P} (x<<y : x FramePres.<< y) : embed x << {PresentedFrame P} embed y
  => \lam {J} {g} y<=Jg => \case x<<y (y<=Jg (cover-inj () idp)) \with {
       | inP (l,x<=l) => inP (map __.1 l, \lam c => cover-trans c (\lam _ => cover-trans x<=l (\lam i => cover-inj (i, (l i).2, (l i).3) idp)))
     }

\lemma <<_<= {L : Locale} {x y : L} (x<<y : x << y) : x <= y
  => \case x<<y {\Sigma} {\lam _ => y} (Join-cond ()) \with {
       | inP (_,x<=Jy) => <=-transitive x<=Jy (Join-univ (\lam _ => <=-reflexive))
     }

\lemma <<-left {L : Locale} {x y z : L} (x<<y : x << y) (y<=z : y <= z) : x << z
  => \lam {J} {g} z<=Jg => TruncP.map (x<<y (<=-transitive y<=z z<=Jg)) (\lam t => t)

\lemma <<-right {L : Locale} {x y z : L} (x<=y : x <= y) (y<<z : y << z) : x << z
  => \lam {J} {g} z<=Jg => TruncP.map (y<<z z<=Jg) (\lam t => (t.1, <=-transitive x<=y t.2))

\lemma locallyCompact-fromPres {P : FramePres} (lc : P.isLocallyCompact) : isLocallyCompact {PresentedFrame P}
  => \lam U {x} u => cover-trans (lc x) (\lam t => cover-inj ((embed t.1, <<-left (<<-fromPres t.2) (embed<= (cover-inj (x,u) idp))), t.1, cover-inj () idp) idp)

-- | If {R} is a relation that satisfies conditions {basic}, {leq}, {dense}, and {comm}, then `R x y` implies `x << y`
\lemma wayBelowPredicate {P : FramePres} (R : P -> P -> \Prop) {x y : P} (Rxy : R x y) {J : \Set} {g : J -> P} (c : Cover y g)
                         (basic : \Pi {x y : P} -> R x y -> \Pi {J : \Set} {g : J -> P} -> BasicCover y g -> ∃ (l : Array J) (Cover x (\lam i => g (l i))))
                         (leq : \Pi {x y : P} -> R x y -> Cover x {\Sigma} (\lam _ => y))
                         (dense : \Pi {x z : P} -> R x z -> ∃ (y : P) (R x y) (R y z))
                         (comm : \Pi {x y : P} -> R x y -> \Pi (z : P) (l : Array P) -> Cover y (z :: l) -> ∃ (l' : Array P) (\Pi (j : Fin l'.len) -> R (l' j) z) (Cover x (l' ++ l)))
  : ∃ (l : Array J) (Cover x (\lam i => g (l i))) \elim c
  | cover-basic b => basic Rxy b
  | cover-inj j p => inP (j :: nil, cover-trans (leq Rxy) (\lam _ => cover-inj 0 p))
  | cover-trans {_} {f} c h =>
    \let | (inP (z,Rxz,Rzy)) => dense Rxy
         | (inP (l,z<=l)) => wayBelowPredicate R Rzy c basic leq dense comm
         | (inP (g',x<=g',Q,_)) => comm-lem R leq dense comm (Array.len {l}) Rxz <=-reflexive z<=l
         | (inP S) => finiteAC {finSum (finFin (Array.len {l})) (\lam i => finFin (Array.len {g' i}))} (\lam t => wayBelowPredicate R (Q t.1 (fin_< t.1) t.2) (h (l t.1)) basic leq dense comm)
    \in inP (Big (++) nil (\lam i => Big (++) nil (\lam j => (S (i,j)).1)), cover-trans x<=g' (\lam k =>
      \have (i,j,p) => split g' k
      \in rewrite p (cover-trans (S (i,j)).2 (\lam m =>
        \have p => unsplit2 (\lam i => Array.len {g' i}) (\lam p => (S p).1) i j m
        \in cover-inj p.1 (pmap g p.2)))))
  | cover-proj1 p j q => inP (j :: nil, cover-trans (leq Rxy) (\lam _ => cover-proj1 p 0 q))
  | cover-proj2 p j q => inP (j :: nil, cover-trans (leq Rxy) (\lam _ => cover-proj2 p 0 q))
  | cover-idemp j p => inP (j :: nil, cover-trans (leq Rxy) (\lam _ => cover-idemp 0 p))
  | cover-comm p j q => inP (j :: nil, cover-trans (leq Rxy) (\lam _ => cover-comm p 0 q))
  | cover-ldistr {a} {b} p {f} c h =>
    \let | (inP (b',Rb'b,x<=b')) => comm Rxy b nil (cover-proj2 p 0 idp)
         | (inP k) => finiteAC.aux (\lam j => wayBelowPredicate R (Rb'b j) c basic leq dense comm)
         | l' => Big (++) nil (\lam i => (k i).1)
    \in inP (l', cover-trans (Cover.cover-prod (cover-trans (leq Rxy) (\lam _ => cover-proj1 p () idp)) (cover-inj () idp))
      (\lam _ => cover-ldistr idp {\lam i => f (l' i)}
        (cover-trans (transport (\lam (l : Array P) => Cover x l.at) ++_nil x<=b') (\lam i => cover-trans (k i).2 (\lam j => \have (m,r) => unsplit (\lam j => (k j).1) i j \in cover-inj m (pmap f r))))
        (\lam j => h (l' j))))
  \where {
    \lemma comm-lem {P : FramePres} (R : P -> P -> \Prop)
                    (leq : \Pi {x y : P} -> R x y -> Cover x {\Sigma} (\lam _ => y))
                    (dense : \Pi {x z : P} -> R x z -> ∃ (y : P) (R x y) (R y z))
                    (comm : \Pi {x y : P} -> R x y -> \Pi (z : P) (l : Array P) -> Cover y (z :: l) -> ∃ (l' : Array P) (\Pi (j : Fin l'.len) -> R (l' j) z) (Cover x (l' ++ l)))
                    (k : Nat) {x y : P} (Rxy : R x y) {n : Nat} {g : Fin n -> P} (k<=n : k <= n) (c : Cover y g)
                    : ∃ (g' : Fin n -> Array P) (Cover x (Big (++) nil g')) (\Pi (j : Fin n) -> (j : Nat) < k -> \Pi (i : Fin (Array.len {g' j})) -> R (g' j i) (g j)) (\Pi (j : Fin n) -> k <= j -> g' j = g j :: nil) \elim k, n

      | 0, _ => inP (\lam i => g i :: nil, cover-trans (leq Rxy) (\lam _ => cover-trans c (\lam i => transportInv (\lam (l : Array P) => Cover (g i) (\lam j => l j)) (++_singleton g) (cover-inj i idp))), \lam _ => \case __ \with {}, \lam _ _ => idp)
      | _, 0 => inP (\case __ \with {}, cover-trans (leq Rxy) (\lam _ => cover-trans c (\case __)), \case __ \with {}, \case __)
      | suc k, suc n =>
        \let | (inP (z,Rxz,Rzy)) => dense Rxy
             | (inP (g',z<=g',Q,S)) => comm-lem R leq dense comm k Rzy (LinearlyOrderedSemiring.<=_+ (suc<=suc.conv k<=n) (zero<=_ {1})) c
             | l => Big (++) nil (\lam i => g' (sface k i))
             | kmod=k => mod_< (<-transitive-left id<suc k<=n)
             | (inP (l',Rl'gk,x<=l'+g')) => comm Rxz (g k) l (transport (\lam t => Cover z (t ++ l)) (S k (rewrite kmod=k <=-reflexive)) (cover-trans z<=g' (\lam m =>
                 \have (i,j,p) => split g' m
                 \in Cover.cover-index (rewrite p (transport (\lam (x : Array P) => \Pi (j : Fin x.len) -> Index (x j) (g' k ++ l))
                                                             (pmap g' (QEquiv.f_sec {cyclePerm k} i))
                                                             (\lam j' => unsplit (\lam i => g' (cyclePerm k i)) (QEquiv.ret {cyclePerm k} i) j') j)))))
             | F (j : Fin (suc n)) : Array P => \case decideEq k j \with { | yes _ => l' | no _ => g' j }
        \in inP (F,
              cover-trans x<=l'+g' (\case split_++ __ \with {
                | inl (m,p) =>
                  \have s : F (k Nat.mod suc n) = l' => unfold F (rewrite (decideEq=_reduce (inv kmod=k)) idp)
                  \in transportInv (Cover __ _) p (Cover.cover-index (rewriteF s (unsplit F (k Nat.mod suc n)) m))
                | inr (m,p) =>
                  \have | (i,j,q) => split (\lam i => g' (sface k i)) m
                        | s : F (sface k i) = g' (sface k i) => unfold F (rewrite (decideEq/=_reduce {_} {k} {sface k i} (\lam p => sface-skip k i (fin_nat-inj (inv (kmod=k *> p))))) idp)
                  \in transportInv (Cover __ _) (p *> q) (Cover.cover-index (rewriteF s (unsplit F (sface k i)) j))
              }),
              \lam j j<k+1 => unfold F (mcases \with {
                | yes k=j => rewriteF (fin_nat-inj (kmod=k *> k=j)) Rl'gk
                | no k/=j => Q j (\case LinearOrder.<=-dec (<_suc_<= j<k+1) \with {
                  | inl j<k => j<k
                  | inr j=k => absurd (k/=j (inv j=k))
                })
              }),
              \lam j k+1<=j => unfold F (rewrite (decideEq/=_reduce (\lam (k=j : k = j) => <-irreflexive (<-transitive-left id<suc (rewriteF (inv k=j) k+1<=j)))) (S j (<=-transitive (<=-less id<suc) k+1<=j))))

    \func ++_singleton {A : \Type} (l : Array A) : Big (++) nil (map (`:: nil) l) = l \elim l
      | nil => idp
      | :: a l => pmap (a ::) (++_singleton l)

    \func split_++ {A : \Type} {l1 l2 : Array A} (k : Fin (Array.len {l1 ++ l2}))
      : Or (\Sigma (i : Fin l1.len) ((l1 ++ l2) k = l1 i)) (\Sigma (i : Fin l2.len) ((l1 ++ l2) k = l2 i)) \elim l1, k
      | nil, k => inr (k,idp)
      | :: a l1, 0 => inl (0,idp)
      | :: a l1, suc k => \case split_++ k \with {
        | inl (i,p) => inl (suc i, p)
        | inr (i,p) => inr (i,p)
      }

    \func split {A : \Type} {n : Nat} (g : Fin n -> Array A) (k : Fin (Array.len {Big (++) nil (mkArray g)}))
      : \Sigma (i : Fin n) (j : Fin (Array.len {g i})) (Big (++) nil g k = g i j) \elim n
      | suc n => \case split_++ k \with {
        | inl (j,p) => (0,j,p)
        | inr (m,p) =>
          \have (i,j,q) => split (\lam i => g (suc i)) m
          \in (suc i, j, p *> q)
      }

    \func unsplit {A : \Type} {n : Nat} (S : Fin n -> Array A) (i : Fin n) (j : Fin (Array.len {S i})) : Index (S i j) (Big (++) nil S) \elim n, i
      | suc n, 0 => index-left (j,idp)
      | suc n, suc i => index-right (unsplit (\lam k => S (suc k)) i j)

    \func unsplit2 {A : \Type} {n : Nat} (Q : Fin n -> Nat) (S : \Sigma (i : Fin n) (Fin (Q i)) -> Array A) (i : Fin n) (j : Fin (Q i)) (k : Fin (Array.len {S (i,j)}))
      : Index (S (i,j) k) (Big (++) nil (\lam i => Big (++) nil (mkArray (\lam j => S (i,j))))) \elim n, i
      | suc n, 0 => index-left (unsplit (\lam j => S (0,j)) j k)
      | suc n, suc i => index-right (unsplit2 (\lam i => Q (suc i)) (\lam p => S (suc p.1, p.2)) i j k)

    \lemma indexing-basic {P : FramePres} {I : \Set} {h : I -> \Sigma (J : \Set) P (J -> P)} {x : P} (R : P -> P -> \Prop)
                          (p : \Pi (i : I) -> R x (h i).2 -> ∃ (l : Array (h i).1) (Cover x (\lam j => (h i).3 (l j))))
                          {y : P} (Rxy : R x y) {J : \Set} {g : J -> P} (ind : FramePres.Indexing h y g) : ∃ (l : Array J) (Cover x (\lam i => g (l i)))
      => FramePres.indexing-transport (\lam {J'} y' g' =>  R x y' -> ∃ (l : Array J') (Cover x (\lam j => g' (l j)))) p ind Rxy
  }
