\import Data.Bool
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Operations
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Set.Filter
\import Set.Subset
\import Topology.TopSpace
\open Bounded(top,top-univ)
\open Set
\open ClosurePrecoverSpace

\class PrecoverSpace \extends TopSpace {
  | isCauchy : Set (Set E) -> \Prop
  | cauchy-cover {C : Set (Set E)} : isCauchy C -> \Pi (x : E) -> ∃ (U : C) (U x)
  | cauchy-top : isCauchy (single top)
  | cauchy-extend {C D : Set (Set E)} : isCauchy C -> (\Pi {U : Set E} -> C U -> ∃ (V : D) (U ⊆ V)) -> isCauchy D
  | cauchy-trans {C : Set (Set E)} : isCauchy C -> \Pi {D : Set E -> Set (Set E)} -> (\Pi {U : Set E} -> C U -> isCauchy (D U))
    -> isCauchy (\lam U => ∃ (V W : Set E) (C V) (D V W) (U = V ∧ W))

  | isOpen S => ∀ {x : S} (isCauchy \lam U => U x -> U ⊆ S)
  | open-top _ => cauchy-extend cauchy-top \lam {U} _ => inP (U, \lam _ _ => (), <=-refl)
  | open-inter Uo Vo => \lam {x} (Ux,Vx) => cauchy-extend (cauchy-trans (Uo Ux) (\lam _ => Vo Vx))
      \lam (inP (U',V',Uc,Vc,W=U'V')) => inP (U' ∧ V', \lam (U'x,V'x) {y} (U'y,V'y) => (Uc U'x U'y, Vc V'x V'y), Preorder.=_<= W=U'V')
  | open-Union So {x} (inP (U,SU,Ux)) => cauchy-extend (So SU Ux) \lam {V} Vc => inP (V, \lam Vx => Vc Vx <=∘ Set.Union-cond SU, <=-refl)

  \lemma cauchy-trans-dep {C : Set (Set E)} {D : \Pi {U : Set E} -> C U -> Set (Set E)} (Cc : isCauchy C) (Dc : \Pi {U : Set E} (c : C U) -> isCauchy (D c))
    : isCauchy (\lam U => ∃ (V W : Set E) (c : C V) (D c W) (U = V ∧ W))
    => transport isCauchy (ext \lam U => ext (\lam (inP (V,W,CV,DW,p)) => inP (V, W, CV, transport (D __ W) prop-pi DW.2, p), \lam (inP (V,W,c,DW,p)) => inP (V, W, c, (c,DW), p))) $ cauchy-trans Cc {\lam U V => \Sigma (c : C U) (D c V)} \lam CU => transport isCauchy (ext \lam V => ext (\lam d => (CU,d), \lam s => transport (D __ V) prop-pi s.2)) (Dc CU)

  \lemma open-char {S : Set E} : isOpen S <-> ∀ {x : S} (single x <=< S)
    => (\lam So Sx => cauchy-subset (So Sx) $ later \lam f (y,(p,q)) => f $ rewrite p q,
        \lam f {x} Sx => cauchy-subset (later $ f Sx) $ later \lam g Ux => g (x, (idp,Ux)))

  \func IsOvert => ∀ {C : isCauchy} (isCauchy \lam U => \Sigma (C U) (∃ U))
}

\lemma cauchy-subset {X : PrecoverSpace} {C D : Set (Set X)} (Cc : isCauchy C) (e : \Pi {U : Set X} -> C U -> D U) : isCauchy D
  => cauchy-extend Cc \lam {U} CU => inP (U, e CU, <=-refl)

\lemma top-cauchy {X : PrecoverSpace} {C : Set (Set X)} (Ct : C top) : isCauchy C
  => cauchy-subset cauchy-top $ later \lam p => rewriteI p Ct

\lemma cauchy-inter {X : PrecoverSpace} {C D : Set (Set X)} (Cc : isCauchy C) (Dc : isCauchy D)
  : isCauchy (\lam U => ∃ (V W : Set X) (C V) (D W) (U = V ∧ W))
  => cauchy-trans Cc \lam _ => Dc

\lemma cauchy-array-inter {X : PrecoverSpace} (Cs : Array (Given X.isCauchy)) : isCauchy \lam V => ∃ (Us : Array (Set X) Cs.len) (\Pi (j : Fin Cs.len) -> (Cs j).1 (Us j)) (V = MeetSemilattice.Big_∧ (top :: Us)) \elim Cs
  | nil => top-cauchy $ inP $ later (nil, \case __ \with {}, idp)
  | C :: Cs => cauchy-subset (cauchy-inter C.2 (cauchy-array-inter Cs)) \lam {W} (inP (U, V, CU, inP (Us,f,q), p)) => inP $ later (U :: Us, \case \elim __ \with {
    | 0 => CU
    | suc j => f j
  }, p *> pmap (U ∧) q)

\func IsDenseSet {X : PrecoverSpace} (S : Set X) : \Prop
  => \Pi {x : X} {U : Set X} -> single x <=< U -> ∃ (y : S) (U y)

\record CoverMap \extends ContMap {
  \override Dom : PrecoverSpace
  \override Cod : PrecoverSpace
  | func-cover {D : Set (Set Cod)} : isCauchy D -> isCauchy \lam U => ∃ (V : D) (U = func ^-1 V)
  | func-cont Uo {x} Ufx => cauchy-extend (func-cover (Uo Ufx)) \lam (inP (W,c,d)) => inP (func ^-1 W, \lam a {_} => c a, Preorder.=_<= d)

  \func IsEmbedding : \Prop
    => \Pi {C : Set (Set Dom)} -> isCauchy C -> isCauchy \lam V => ∃ (U : C) (func ^-1 V ⊆ U)

  -- | A map is an embedding if and only if the structure on the domain is the smallest compatible with the map.
  \lemma embedding-char : TFAE (
    {- 0 -} IsEmbedding,
    {- 1 -} \Pi {X : PrecoverSpace Dom} -> CoverMap X Cod func -> \Pi {C : Set (Set Dom)} -> isCauchy C -> X.isCauchy C,
    {- 2 -} \Pi {C : Set (Set Dom)} -> isCauchy C -> isCauchy {PrecoverTransfer func} C,
    {- 3 -} Dom = {PrecoverSpace Dom} PrecoverTransfer func
  ) => TFAE.cycle (
    \lam p f Cc => cauchy-extend (func-cover {f} $ p Cc) \lam (inP (V, inP (U',CU',p), q)) => inP (U', CU', rewrite q p),
    \lam f => f PrecoverTransfer-map,
    \lam f => exts \lam C => ext (f, PrecoverTransfer-char),
    \lam p => unfolds $ rewrite p \lam (inP (D,Dc,f)) => cauchy-subset Dc f)

  \func IsDense : \Prop
    => \Pi {y : Cod} {U : Set Cod} -> single y <=< U -> ∃ (x : Dom) (U (func x))

  \lemma dense-char : IsDense <-> IsDenseSet (\lam y => ∃ (x : Dom) (func x = y))
    => (\lam d p => TruncP.map (d p) \lam s => (func s.1, inP (s.1, idp), s.2), \lam d p => \case d p \with {
      | inP (_, inP (x,idp), Ufx) => inP (x, Ufx)
    })

  \func IsDenseEmbedding : \Prop
    => \Sigma IsDense IsEmbedding
} \where {
  \func id {X : PrecoverSpace} : CoverMap X X \cowith
    | func x => x
    | func-cover Dc => cauchy-subset Dc \lam {U} DU => inP $ later (U, DU, idp)

  \func compose \alias \infixl 8 ∘ {X Y Z : PrecoverSpace} (g : CoverMap Y Z) (f : CoverMap X Y) : CoverMap X Z \cowith
    | func x => g (f x)
    | func-cover Dc => cauchy-subset (f.func-cover $ g.func-cover Dc) \lam (inP (V, inP (W,DW,q), p)) => inP $ later (W, DW, p *> rewrite q idp)

  \func const {Y X : PrecoverSpace} (x : X) : CoverMap Y X \cowith
    | func _ => x
    | func-cover Dc => top-cauchy \case cauchy-cover Dc x \with {
      | inP (U,DU,Ux) => inP $ later (U, DU, ext \lam y => ext (\lam _ => Ux, \lam _ => ()))
    }
}

\type \infix 4 <=< {X : PrecoverSpace} (V U : Set X) : \Prop
  => isCauchy \lam W => Given (V ∧ W) -> W ⊆ U

\lemma <=<_<= {X : PrecoverSpace} {V U : Set X} (p : V <=< U) : V <= U
  => unfolds at p $ \lam {x} Vx => \case cauchy-cover p x \with {
    | inP (W,f,Wx) => f (x, (Vx, Wx)) Wx
  }

\lemma <=<_^-1 {X Y : PrecoverSpace} {f : CoverMap X Y} {U V : Set Y} (U<=<V : U <=< V) : f ^-1 U <=< f ^-1 V
  => cauchy-subset (f.func-cover U<=<V) \lam (inP (W,g,p)) => rewrite p $ later \lam (x,s) => g (f x, s) __

\type \infix 4 s<=< {X : PrecoverSpace} (V U : Set X) : \Prop
  => isCauchy \lam W => (W = Compl V) || (W = U)

\lemma s<=<_<=< {X : PrecoverSpace} {V U : Set X} (p : V s<=< U) : V <=< U
  => unfolds at p $ cauchy-subset p $ later \case \elim __ \with {
    | byLeft q => rewrite q \lam (x,(Vx,nVx)) => absurd (nVx Vx)
    | byRight q => \lam _ => rewrite q <=-refl
  }

\lemma s<=<_<= {X : PrecoverSpace} {V U : Set X} (p : V s<=< U) : V <= U
  => <=<_<= (s<=<_<=< p)

\lemma s<=<_^-1 {X Y : PrecoverSpace} {f : CoverMap X Y} {U V : Set Y} (U<=<V : U s<=< V) : f ^-1 U s<=< f ^-1 V
  => cauchy-subset (f.func-cover U<=<V) \case \elim __ \with {
    | inP (_, byLeft idp, p) => byLeft p
    | inP (_, byRight idp, p) => byRight p
  }

\class RatherBelow {X : \Set} (R : Set X -> Set X -> \Prop) {
  | <=<-left {U V W : Set X} : R U V -> V ⊆ W -> R U W
  | <=<-right {U V W : Set X} : U ⊆ V -> R V W -> R U W
  | <=<_top {V : Set X} : R V top
  | <=<_meet {U V U' V' : Set X} : R U V -> R U' V' -> R (U ∧ U') (V ∧ V')

  \lemma <=<_single_meet {x : X} {U V : Set X} (p : R (single x) U) (q : R (single x) V) : R (single x) (U ∧ V)
    => <=<-right (\lam r => later $ rewrite r (idp,idp)) (<=<_meet p q)

  \type \infix 4 <=<o (V U : Set X) : \Prop
    => ∃ (R' : Set X -> Set X -> \Prop) (\Pi {V U : Set X} -> R' V U -> R V U) (\Pi {V U : Set X} -> R' V U -> ∃ (W : Set X) (R' V W) (R W U)) (R' V U)

  \lemma <=<o_<=< {V U : Set X} (p : V <=<o U) : R V U \elim p
    | inP (R,p,q,r) => p r

  \lemma <=<o-inter {V U : Set X} (p : V <=<o U) : ∃ (W : Set X) (V <=<o W) (R W U) \elim p
    | inP (R,p,q,RVU) => \case q RVU \with {
      | inP (W,RVW,W<=<U) => inP (W, inP (R, p, q, RVW), W<=<U)
    }

  \func Omega : RatherBelow {X} \cowith
    | R => <=<o
    | <=<_top => inP (\lam V U => U = {Set X} top, \lam p => rewrite p <=<_top, \lam p => inP (top, idp, rewrite p <=<_top), idp)
    | <=<-left {W} {V} {U} p V<=U => \case \elim p \with {
      | inP (R,p,q,RWV) => inP (\lam V U => ∃ (U' : Set X) (R V U') (U' ⊆ U), \lam (inP (U',RVU',U'<=U)) => <=<-left (p RVU') U'<=U, \lam (inP (U',RVU',U'<=U)) => \case q RVU' \with {
        | inP (W,RVW,W<=<U') => inP (W, inP (W, RVW, <=-refl), <=<-left W<=<U' U'<=U)
      }, inP (V, RWV, V<=U))
    }
    | <=<-right {W} {V} {U} W<=V => \case \elim __ \with {
      | inP (R,p,q,RVU) => inP (\lam V U => ∃ (V' : Set X) (R V' U) (V ⊆ V'), \lam (inP (V',RV'U,V<=V')) => <=<-right V<=V' (p RV'U), \lam (inP (V',RV'U,V<=V')) => \case q RV'U \with {
        | inP (W,RV'W,W<=<U) => inP (W, inP (V', RV'W, V<=V'), W<=<U)
      }, inP (V, RVU, W<=V))
    }
    | <=<_meet {V1} {U1} {V2} {U2} => \case \elim __, \elim __ \with {
      | inP (R,p,q,RV1U1), inP (R',p',q',R'V2U2) => inP
          (\lam V U => ∃ (V1 V2 U1 U2 : Set X) (R V1 U1) (R' V2 U2) (V = V1 ∧ V2) (U = U1 ∧ U2),
           \lam (inP (V1,V2,U1,U2,RV1U1,R'V2U2,Vp,Up)) => rewrite (Vp,Up) $ <=<_meet (p RV1U1) (p' R'V2U2),
           \lam (inP (V1,V2,U1,U2,RV1U1,R'V2U2,Vp,Up)) => \case q RV1U1, q' R'V2U2 \with {
             | inP (W1,RV1W1,W1<=<U1), inP (W2,R'V2W2,W2<=<U2) => inP (W1 ∧ W2, inP (V1, V2, W1, W2, RV1W1, R'V2W2, Vp, idp), rewrite Up $ <=<_meet W1<=<U1 W2<=<U2)
           },
           inP (V1, V2, U1, U2, RV1U1, R'V2U2, idp, idp))
    }

  \type \infix 4 <=<c (V U : Set X) : \Prop
    => ∃ (R' : Set X -> Set X -> \Prop) (\Pi {V U : Set X} -> R' V U -> R V U) (\Pi {V U : Set X} -> R' V U -> ∃ (W : Set X) (R' V W) (R' W U)) (R' V U)

  \lemma <=<c_<=<o {V U : Set X} (p : V <=<c U) : V <=<o U \elim p
    | inP (R,p,q,r) => inP (R, p, \lam r => TruncP.map (q r) \lam (W,RVW,RWU) => (W, RVW, p RWU), r)

  \lemma <=<c_<=< {V U : Set X} (p : V <=<c U) : R V U
    => <=<o_<=< (<=<c_<=<o p)

  \lemma <=<c-inter {V U : Set X} (p : V <=<c U) : ∃ (W : Set X) (V <=<c W) (W <=<c U) \elim p
    | inP (R,p,q,RVU) => \case q RVU \with {
      | inP (W,RVW,RWU) => inP (W, inP (R, p, q, RVW), inP (R, p, q, RWU))
    }

  \lemma <=<c-func {R2 : RatherBelow {X}} (p : \Pi {V U : Set X} -> R V U -> R2 V U) {V U : Set X} (q : V <=<c U) : V R2.<=<c U \elim q
    | inP (R',f,g,r) => inP (R', \lam r => p (f r), g, r)

  \func Interpolative : RatherBelow {X} \cowith
    | R => <=<c
    | <=<_top => inP (\lam V U => U = {Set X} top, \lam p => rewrite p <=<_top, \lam p => inP (top, idp, p), idp)
    | <=<-left {W} {V} {U} p V<=U => \case \elim p \with {
      | inP (R,p,q,RWV) => inP (\lam V U => ∃ (U' : Set X) (R V U') (U' ⊆ U), \lam (inP (U',RVU',U'<=U)) => <=<-left (p RVU') U'<=U, \lam (inP (U',RVU',U'<=U)) => \case q RVU' \with {
        | inP (W,RVW,RWU') => inP (W, inP (W, RVW, <=-refl), inP (U', RWU', U'<=U))
      }, inP (V, RWV, V<=U))
    }
    | <=<-right {W} {V} {U} W<=V => \case \elim __ \with {
      | inP (R,p,q,RVU) => inP (\lam V U => ∃ (V' : Set X) (R V' U) (V ⊆ V'), \lam (inP (V',RV'U,V<=V')) => <=<-right V<=V' (p RV'U), \lam (inP (V',RV'U,V<=V')) => \case q RV'U \with {
        | inP (W,RV'W,RWU) => inP (W, inP (V', RV'W, V<=V'), inP (W, RWU, <=-refl))
      }, inP (V, RVU, W<=V))
    }
    | <=<_meet {V1} {U1} {V2} {U2} => \case \elim __, \elim __ \with {
      | inP (R,p,q,RV1U1), inP (R',p',q',R'V2U2) => inP
          (\lam V U => ∃ (V1 V2 U1 U2 : Set X) (R V1 U1) (R' V2 U2) (V = V1 ∧ V2) (U = U1 ∧ U2),
           \lam (inP (V1,V2,U1,U2,RV1U1,R'V2U2,Vp,Up)) => rewrite (Vp,Up) $ <=<_meet (p RV1U1) (p' R'V2U2),
           \lam (inP (V1,V2,U1,U2,RV1U1,R'V2U2,Vp,Up)) => \case q RV1U1, q' R'V2U2 \with {
             | inP (W1,RV1W1,RW1U1), inP (W2,R'V2W2,R'W2U2) => inP (W1 ∧ W2, inP (V1, V2, W1, W2, RV1W1, R'V2W2, Vp, idp), inP (W1, W2, U1, U2, RW1U1, R'W2U2, idp, Up))
           },
           inP (V1, V2, U1, U2, RV1U1, R'V2U2, idp, idp))
    }
} \where {
  \lemma <=<c_^-1 {X Y : PrecoverSpace} {RX : RatherBelow {X}} {RY : RatherBelow {Y}} {f : CoverMap X Y} (<=<_^-1 : \Pi {U V : Set Y} -> RY U V -> RX (f ^-1 U) (f ^-1 V)) {U V : Set Y} (p : U RY.<=<c V) : f ^-1 U RX.<=<c f ^-1 V \elim p
    | inP (R',g,h,r) => inP (\lam U V => ∃ (U' V' : R') (U = f ^-1 U') (V = f ^-1 V'), \lam (inP (U',V',R'U'V',p,q)) => rewrite (p,q) $ <=<_^-1 $ g R'U'V', \lam (inP (U',V',R'U'V',p,q)) => \case h R'U'V' \with {
      | inP (W,R'U'W,R'WV') => inP (f ^-1 W, inP (U', W, R'U'W, p, idp), inP (W, V', R'WV', idp, q))
    }, inP (U, V, r, idp, idp))
}

\instance RegularRatherBelow {X : PrecoverSpace} : RatherBelow {X} (<=<)
  | <=<_top => unfolds $ top-cauchy \lam _ => <=-refl
  | <=<-left p q => unfolds at p $ cauchy-subset p \lam f t => f t <=∘ q
  | <=<-right p q => unfolds at q $ cauchy-subset q $ later \lam {Z} f (x,(Wx,Zx)) => f (x, (p Wx, Zx))
  | <=<_meet U<=<U' V<=<V' => unfolds at U<=<U' $ cauchy-subset (cauchy-inter U<=<U' V<=<V') $ later \lam (inP (U'', V'', t1, t2, p)) =>
      rewrite p \lam (x,((Ux,Vx),(U''x,V''x))) => MeetSemilattice.meet-monotone (t1 (x,(Ux,U''x))) (t2 (x,(Vx,V''x)))

\instance StronglyRatherBelow {X : PrecoverSpace} : RatherBelow {X} (s<=<)
  | <=<_top => unfolds $ top-cauchy $ byRight idp
  | <=<-left p q => unfolds at p $ cauchy-extend p \lam {U'} => later \case \elim __ \with {
    | byLeft r => rewrite r $ inP (_, byLeft idp, <=-refl)
    | byRight r => rewrite r $ inP (_, byRight idp, q)
  }
  | <=<-right p q => unfolds at q $ cauchy-extend q \lam {U'} => later \case \elim __ \with {
    | byLeft r => inP (_, byLeft idp, rewrite r \lam nVx Wx => nVx (p Wx))
    | byRight r => inP (U', byRight r, <=-refl)
  }
  | <=<_meet U<=<U' V<=<V' => unfolds at U<=<U' $ cauchy-extend (cauchy-inter U<=<U' V<=<V') $ later \lam (inP (U'', V'', t1, t2, p)) => rewrite p \case \elim t1, \elim t2 \with {
    | byLeft r, _ => inP (_, byLeft idp, rewrite r \lam (nUx,_) (Ux,_) => nUx Ux)
    | _, byLeft r => inP (_, byLeft idp, rewrite r \lam (_,nVx) (_,Vx) => nVx Vx)
    | byRight q, byRight r => inP (_, byRight $ pmap2 (∧) q r, <=-refl)
  }
  \where {
    \lemma <=<_bottom {X : PrecoverSpace} {U : Set X} : Bounded.bottom s<=< U
      => unfolds $ top-cauchy $ byLeft $ <=-antisymmetric (later \lam _ => \case \elim __ \with {
        | inP ((),_)
      }) top-univ
  }

\class CoverSpace \extends PrecoverSpace {
  | isRegular {C : Set (Set E)} : isCauchy C -> isCauchy \lam V => ∃ (U : C) (V <=< U)

  \lemma cauchy-regular-cover {C : Set (Set E)} (Cc : isCauchy C) (x : E) : ∃ (U : C) (single x <=< U)
    => \case cauchy-cover (isRegular Cc) x \with {
      | inP (U, inP (V, CV, U<=<V), Ux) => inP (V, CV, <=<-right (single_<= Ux) U<=<V)
    }
}

\lemma <=<-inter {X : CoverSpace} {x : X} {U : Set X} (x<=<U : single x <=< U) : ∃ (V : Set X) (single x <=< V) (V <=< U)
  => \case X.cauchy-regular-cover (isRegular x<=<U) x \with {
    | inP (V, inP (U', f, V<=<U'), x<=<V) => inP (V, x<=<V, <=<-left V<=<U' $ f (x, (idp, <=<_<= V<=<U' $ <=<_<= x<=<V idp)))
  }

\lemma s<=<c-inter {X : CompletelyStronglyRegularCoverSpace} {x : X} {U : Set X} (x<=<U : single x <=< U) : ∃ (V : Set X) (single x RatherBelow.<=<c V) (V RatherBelow.<=<c U)
  => unfolds at x<=<U $ \case cauchy-cover (isCompletelyStronglyRegular $ isCompletelyStronglyRegular x<=<U) x \with {
    | inP (V'', inP (V', inP (V, h, V'<=<V), V''<=<V'), V''x) => inP (V', RatherBelow.Interpolative.<=<-right (single_<= V''x) V''<=<V', RatherBelow.Interpolative.<=<-left V'<=<V $ h (x, (idp, s<=<_<= (RatherBelow.<=<c_<=< V'<=<V) $ s<=<_<= (RatherBelow.<=<c_<=< V''<=<V') V''x)))
  }

\lemma denseSet-char {X : CoverSpace} {S : Set X} : IsDenseSet S <-> ∀ {C : isCauchy} (isCauchy \lam V => ∃ (U : C) (V ⊆ U) (Given V -> ∃ (x : S) (U x)))
  => (\lam d Cc => cauchy-subset (isRegular Cc) \lam (inP (V,CV,U<=<V)) => inP $ later (V, CV, <=<_<= U<=<V, \lam (x,Ux) => d $ <=<-right (single_<= Ux) U<=<V),
      \lam d {x} {U} x<=<U => \case cauchy-cover (d x<=<U) x \with {
        | inP (V, inP (W,f,V<=W,g), Vx) => \case g (x,Vx) \with {
          | inP (y,Sy,Wy) => inP (y, Sy, f (x, (idp, V<=W Vx)) Wy)
        }
      })

\class StronglyRegularCoverSpace \extends CoverSpace
  | isStronglyRegular {C : Set (Set E)} : isCauchy C -> isCauchy \lam V => ∃ (U : C) (V s<=< U)
  | isRegular Cc => cauchy-subset (isStronglyRegular Cc) \lam (inP (V,CV,Us<=<V)) => inP $ later (V, CV, s<=<_<=< Us<=<V)

\class OmegaRegularCoverSpace \extends CoverSpace
  | isOmegaRegular {C : Set (Set E)} : isCauchy C -> isCauchy \lam V => ∃ (U : C) (V RegularRatherBelow.<=<o U)
  | isRegular Cc => cauchy-subset (isOmegaRegular Cc) \lam (inP (V,CV,p)) => inP $ later (V, CV, RegularRatherBelow.<=<o_<=< p)

\class CompletelyRegularCoverSpace \extends OmegaRegularCoverSpace
  | isCompletelyRegular {C : Set (Set E)} : isCauchy C -> isCauchy \lam V => ∃ (U : C) (V RegularRatherBelow.<=<c U)
  | isOmegaRegular Cc => cauchy-subset (isCompletelyRegular Cc) \lam (inP (V,CV,U<=<cV)) => inP $ later (V, CV, RatherBelow.<=<c_<=<o U<=<cV)

\class CompletelyStronglyRegularCoverSpace \extends StronglyRegularCoverSpace, CompletelyRegularCoverSpace
  | isCompletelyStronglyRegular {C : Set (Set E)} : isCauchy C -> isCauchy \lam V => ∃ (U : C) (V StronglyRatherBelow.<=<c U)
  | isStronglyRegular Cc => cauchy-subset (isCompletelyStronglyRegular Cc) \lam {V} (inP (U,CU,V<=<U)) => inP $ later (U, CU, RatherBelow.<=<c_<=< V<=<U)
  | isCompletelyRegular Cc => cauchy-subset (isCompletelyStronglyRegular Cc) \lam {V} (inP (U,CU,V<=<U)) => inP $ later (U, CU, StronglyRatherBelow.<=<c-func s<=<_<=< V<=<U)

\func AntiDiscreteCover (X : \Set) : CompletelyRegularCoverSpace X \cowith
  | isCauchy C => C top
  | cauchy-cover Ct x => inP (top, Ct, ())
  | cauchy-top => idp
  | cauchy-extend Ct e => \case e Ct \with {
    | inP (V,DV,t<=V) => rewrite (<=-antisymmetric t<=V top-univ) DV
  }
  | cauchy-trans Ct e => inP (top, top, Ct, e Ct, <=-antisymmetric (\lam _ => ((), ())) top-univ)
  | isCompletelyRegular Ct => inP (top, Ct, RatherBelow.Interpolative.<=<_top)

\func DiscreteCover (X : \Set) : CompletelyRegularCoverSpace X \cowith
  | isCauchy C => \Pi (x : X) -> ∃ (U : C) (U x)
  | cauchy-cover c => c
  | cauchy-top x => inP (top, idp, ())
  | cauchy-extend c d x =>
    \have | (inP (U,CU,Ux)) => c x
          | (inP (V,DV,U<=V)) => d CU
    \in inP (V, DV, U<=V Ux)
  | cauchy-trans c d x =>
    \have | (inP (U,CU,Ux)) => c x
          | (inP (V,DV,Vx)) => d CU x
    \in inP (U ∧ V, inP (U, V, CU, DV, idp), (Ux,Vx))
  | isCompletelyRegular f x => \case f x \with {
    | inP (U,CU,Ux) => inP (U, inP (U, CU, inP (=, \lam p => rewrite p \lam x => inP (single x, \lam (y,(Uy,x=y)) => rewrite x=y $ single_<= Uy, idp), \lam p => inP (_, idp, p), idp)), Ux)
  }

\func PrecoverTransfer {X : \Set} {Y : PrecoverSpace} (f : X -> Y) : PrecoverSpace X \cowith
  | isCauchy C => ∃ (D : Set (Set Y)) (Y.isCauchy D) (\Pi {V : Set Y} -> D V -> ∃ (U : C) (f ^-1 V ⊆ U))
  | cauchy-cover (inP (D,Dc,d)) x =>
    \have | (inP (V,DV,Vfx)) => cauchy-cover Dc (f x)
          | (inP (U,CU,p)) => d DV
    \in inP (U, CU, p Vfx)
  | cauchy-top => inP (single top, cauchy-top, \lam p => rewriteI p $ inP (top,idp,<=-refl))
  | cauchy-extend (inP (D,Dc,d)) e => inP (D, Dc, \lam DV =>
      \have | (inP (U,CU,p)) => d DV
            | (inP (W,DW,q)) => e CU
      \in inP (W, DW, p <=∘ q))
  | cauchy-trans {C} (inP (C',C'c,C'e)) {D} d =>
    \have t => cauchy-trans C'c {\lam c' V => ∃ (c : Set X) (C c) (f ^-1 c' <= c) (D' : Set (Set Y)) (isCauchy D') (\Pi {W : Set Y} -> D' W -> ∃ (U' : D c) (f ^-1 W ⊆ U')) (D' V)} \lam {V} C'V =>
                \have | (inP (U,CU,p)) => C'e C'V
                      | (inP (D',D'c,D'e)) => d CU
                \in cauchy-subset D'c \lam {V} D'V => later $ inP (U,CU,p,D',D'c,D'e,D'V)
    \in inP (_, t, \lam (inP (U, V, C'U, inP (c,Cc,q,D',D'c,D'e,D'V), W=UV)) => \case D'e D'V \with {
      | inP (d,Dd,s) => inP (c ∧ d, inP (c, d, Cc, Dd, idp), rewrite W=UV \lam e => (q e.1, s e.2))
    })

\lemma PrecoverTransfer-map {X : \Set} {Y : PrecoverSpace} {f : X -> Y} : CoverMap (PrecoverTransfer f) Y f \cowith
  | func-cover {D} Dc => inP (D, Dc, \lam {V} DV => inP (f ^-1 V, inP (V, DV, idp), <=-refl))

\lemma PrecoverTransfer-char {X Y : PrecoverSpace} {f : CoverMap X Y} {C : Set (Set X)} (c : isCauchy {PrecoverTransfer f} C) : X.isCauchy C \elim c
  | inP (D,Dc,De) => cauchy-extend (f.func-cover Dc) \lam {U} (inP (V,DV,p)) => \case De DV \with {
    | inP (U',CU',q) => inP (U', CU', rewrite p q)
  }

\func ClosurePrecoverSpace {X : \Set} (A : Set (Set X) -> \Prop) (CA : \Pi {C : Set (Set X)} -> A C -> \Pi (x : X) -> ∃ (U : C) (U x)) : PrecoverSpace X \cowith
  | isCauchy => Closure A
  | cauchy-cover CC x => closure-filter (pointFilter x) (\lam AC => CA AC x) CC
  | cauchy-top => closure-top idp
  | cauchy-extend => closure-extends
  | cauchy-trans => closure-trans __ __ idp
  \where {
    \truncated \data Closure (A : Set (Set X) -> \Prop) (C : Set (Set X)) : \Prop
      | closure (A C)
      | closure-top (C = single top)
      | closure-extends {D : Set (Set X)} (Closure A D) (\Pi {U : Set X} -> D U -> ∃ (V : Set X) (C V) (U ⊆ V))
      | closure-trans {D : Set (Set X)} (Closure A D) {E : \Pi (U : Set X) -> Set (Set X)} (\Pi {U : Set X} -> D U -> Closure A (E U))
                      (C = \lam U => ∃ (V W : Set X) (D V) (E V W) (U = V ∧ W))

    \lemma closure-inter {A : Set (Set X) -> \Prop} {C D : Set (Set X)} (Cc : Closure A C) (Dc : Closure A D)
      : Closure A (\lam W => ∃ (U V : Set X) (C U) (D V) (W = U ∧ V))
      => closure-trans Cc (\lam _ => Dc) idp

    \lemma closure-subset {A : Set (Set X) -> \Prop} {C D : Set (Set X)} (Dc : Closure A D) (D<=C : D ⊆ C) : Closure A C
      => closure-extends Dc \lam {V} DV => inP (V, D<=C DV, <=-refl)

    \lemma closure-filter {A : Set (Set X) -> \Prop} (F : SetFilter X) (CA : \Pi {C : Set (Set X)} -> A C -> ∃ (U : C) (F U)) {C : Set (Set X)} (CC : Closure A C) : ∃ (U : C) (F U) \elim CC
      | closure AC => CA AC
      | closure-top idp => inP (top, idp, filter-top)
      | closure-extends {D} CD e =>
        \have | (inP (U,DU,FU)) => closure-filter F CA CD
              | (inP (V,CV,U<=V)) => e DU
        \in inP (V, CV, filter-mono U<=V FU)
      | closure-trans {D} CD {E} CE idp =>
        \have | (inP (U,DU,FU)) => closure-filter F CA CD
              | (inP (V,EV,FV)) => closure-filter F CA (CE DU)
        \in inP (U ∧ V, inP (U, V, DU, EV, idp), filter-meet FU FV)

    \lemma closure-cauchy {S : PrecoverSpace X} {A : Set (Set X) -> \Prop} (AS : \Pi {C : Set (Set X)} -> A C -> S.isCauchy C) {C : Set (Set X)} (CC : Closure A C) : S.isCauchy C \elim CC
      | closure AC => AS AC
      | closure-top p => rewrite p cauchy-top
      | closure-extends CD e => cauchy-extend (closure-cauchy AS CD) e
      | closure-trans CD CE idp => S.cauchy-trans-dep (closure-cauchy AS CD) \lam DU => closure-cauchy AS (CE DU)

    \lemma closure-univ-cover {Y : PrecoverSpace} {f : Y -> X} (Ap : ∀ {C : A} (isCauchy \lam U => ∃ (V : Set X) (C V) (U = f ^-1 V))) {C : Set (Set X)} (Cc : Closure A C) : isCauchy \lam U => ∃ (V : Set X) (C V) (U = f ^-1 V) \elim Cc
      | closure a => Ap a
      | closure-top p => cauchy-subset cauchy-top \lam q => inP $ later (top, rewrite p idp, inv q)
      | closure-extends Cc g => cauchy-extend (closure-univ-cover {X} {A} Ap Cc) \lam (inP (V,CV,q)) => TruncP.map (g CV) \lam (V',CV',V<=V') => (f ^-1 V', inP (V', CV', idp), rewrite q \lam c => V<=V' c)
      | closure-trans {D} Cc {E} g p =>
        \have t => cauchy-trans (closure-univ-cover {X} {A} Ap Cc) {\lam V V' => ∃ (U : Set X) (V = f ^-1 U) (D U) (U' : Set X) (E U U') (V' = f ^-1 U')}
                    \lam (inP (V,DV,q)) => cauchy-subset (closure-univ-cover {X} {A} Ap (g DV)) \lam (inP (V',EVV',r)) => inP $ later (V, q, DV, V', EVV', r)
        \in cauchy-subset t \lam (inP (W, W', _, inP (V2,p2,DV2,V2',EV2V2',p2'), U=WW')) => inP $ later $ rewrite p (_, inP (V2, V2', DV2, EV2V2', idp), U=WW' *> pmap2 (∧) p2 p2')

    \lemma closure-univ {S : PrecoverSpace X} {Y : PrecoverSpace} (AS : \Pi {C : Set (Set X)} -> isCauchy C -> Closure A C) (f : Y -> X) (Ap : ∀ {C : A} (isCauchy \lam U => ∃ (V : Set X) (C V) (U = f ^-1 V))) : CoverMap Y S f \cowith
      | func-cover Cc => closure-univ-cover Ap (AS Cc)

    \lemma closure-embedding {S : PrecoverSpace X} {Y : PrecoverSpace} (AS : \Pi {C : Set (Set X)} -> isCauchy C -> Closure A C) (f : CoverMap S Y)
                             (p : \Pi {C : Set (Set X)} -> A C -> isCauchy \lam V => ∃ (U : C) (f ^-1 V ⊆ U)) : f.IsEmbedding
      => \lam CC => aux (AS CC)
      \where {
        \private \lemma aux {C : Set (Set X)} (CC : Closure A C) : isCauchy \lam V => ∃ (U : C) (f ^-1 V ⊆ U) \elim CC
          | closure AC => p AC
          | closure-top q => top-cauchy $ inP $ later (top, rewrite q idp, top-univ)
          | closure-extends CD g => cauchy-subset (aux CD) \lam (inP (V,DV,q)) => TruncP.map (g DV) \lam (V',CV',V<=V') => later (V', CV', q <=∘ V<=V')
          | closure-trans {D} CD {E} g q =>
            \let t => cauchy-trans (aux CD) {\lam V V' => ∃ (U U' : Set X) (D U) (f ^-1 V ⊆ U) (f ^-1 V' ⊆ U') (E U U')} \lam (inP (U,DU,r)) => cauchy-subset (aux (g DU)) \lam (inP (U',EUU',r')) => inP $ later (U, U', DU, r, r', EUU')
            \in cauchy-subset t \lam (inP (V, W, _, inP (U1,U2,DU1,r,r',EU1U2), s)) => inP $ later (U1 ∧ U2, rewrite q $ inP (U1, U2, DU1, EU1U2, idp), rewrite s $ MeetSemilattice.meet-monotone r r')
      }
  }

\instance PrecoverLattice (X : \Set) : CompleteLattice (PrecoverSpace X)
  | <= A B => \Pi {C : Set (Set X)} -> isCauchy {A} C -> isCauchy {B} C
  | <=-refl c => c
  | <=-transitive f g c => g (f c)
  | <=-antisymmetric f g => exts \lam C => ext (f,g)
  | top => DiscreteCover X
  | top-univ {A} c => cauchy-cover {A} c
  | Join {J} f => ClosurePrecoverSpace (\lam C => (C = single top) || (\Sigma (j : J) (isCauchy {f j} C)))
      \lam e x => \case \elim e \with {
        | byLeft C=t => inP (top, transportInv {Set (Set X)} (__ top) C=t idp, ())
        | byRight (j,Cc) => cauchy-cover Cc x
      }
  | Join-cond j Cc => closure $ byRight (j,Cc)
  | Join-univ e => closure-cauchy $ later \case \elim __ \with {
    | byLeft p => rewrite p cauchy-top
    | byRight (j,Cc) => e j Cc
  }

\func CoverTransfer {X : \Set} {Y : CoverSpace} (f : X -> Y) : CoverSpace X \cowith
  | PrecoverSpace => PrecoverTransfer f
  | isRegular (inP (D,Dc,De)) => inP (_, Y.isRegular Dc, \lam {V} (inP (U,DU,V<=<U)) => inP (f ^-1 V, \case De DU \with {
    | inP (U',CU',p) => inP (U', CU', <=<-left (later $ inP (_, V<=<U, \lam {W} g => inP (f ^-1 W, \lam (x,s) {_} => g (f x, s), <=-refl))) p)
  }, <=-refl))

\func ClosureCoverSpace {X : \Set} (A : Set (Set X) -> \Prop)
                        (CA : \Pi {C : Set (Set X)} -> A C -> \Pi (x : X) -> ∃ (U : C) (U x))
                        (AS : \Pi {C : Set (Set X)} -> A C -> Closure A \lam V => ∃ (U : C) (Closure A \lam W => Given (V ∧ W) -> W ⊆ U))
  : CoverSpace X \cowith
  | PrecoverSpace => ClosurePrecoverSpace A CA
  | isRegular => closure-regular {ClosurePrecoverSpace A CA} RegularRatherBelow \lam AC => closure-subset (AS AC) \lam (inP (U,CU,c)) => inP (U, CU, c)
  \where {
    \open RatherBelow

    \lemma closure-regular {X : PrecoverSpace} (RB : RatherBelow {X}) {A : Set (Set X) -> \Prop} (AS : \Pi {C : Set (Set X)} -> A C -> Closure A \lam V => ∃ (U : C) (RB.R V U)) {C : Set (Set X)} (CC : Closure A C)
      : Closure A (\lam V => ∃ (U : C) (RB.R V U)) \elim CC
      | closure AC => AS AC
      | closure-top idp => closure-subset (closure-top idp) \lam p => inP (top, idp, <=<_top)
      | closure-extends CD e => closure-subset (closure-regular RB AS CD) \lam (inP (U,DU,RVU)) => \case e DU \with {
        | inP (W,CW,U<=W) => inP (W, CW, <=<-left RVU U<=W)
      }
      | closure-trans {D} CD {E} CE idp => closure-subset
          (closure-trans (closure-regular RB AS CD) {\lam U V => ∃ (U' : Set X) (D U') (RB.R U U') (V' : E U') (RB.R V V')}
              (\lam (inP (U',DU',RUU')) => closure-subset (closure-regular RB AS (CE DU')) \lam (inP (V',EV',RVV')) => inP (U', DU', RUU', V', EV', RVV')) idp)
          \lam {U} (inP (V, W, _, inP (V',DV',RVV',W',EW',RWW'), U=VW)) => inP (V' ∧ W', inP (V',W',DV',EW',idp), rewrite U=VW $ <=<_meet RVV' RWW')
  }

\func ClosureRegularCoverSpace {X : \Set} (A : Set (Set X) -> \Prop)
                               (CA : \Pi {C : Set (Set X)} -> A C -> \Pi (x : X) -> ∃ (U : C) (U x))
                               (AI : \Pi {C : Set (Set X)} -> A C -> ∃ (D : A) ∀ {V : D} ∃ (U : C) ∀ {V' : D} (Given (V ∧ V') -> V' ⊆ U))
  : CompletelyRegularCoverSpace X \cowith
  | PrecoverSpace => ClosurePrecoverSpace A CA
  | isCompletelyRegular => ClosureCoverSpace.closure-regular {ClosurePrecoverSpace A CA} RegularRatherBelow.Interpolative \case AI __ \with {
    | inP (D,AD,f) => closure-subset (closure AD) \case f __ \with {
      | inP (U,CU,g) => inP (U, CU, inP
          (\lam V' U' => ∃ (E : A) ∀ {W : E} (Given (V' ∧ W) -> W ⊆ U'),
           \lam (inP (E,AE,h)) => closure-subset (closure AE) \lam EW => h EW,
           \lam {V'} (inP (E,AE,h)) => \case AI AE \with {
             | inP (F,AF,k) => inP (Union \lam W => Given (F W) (V' ∧ W), inP (F, AF, \lam c s => Union-cond $ later (c,s.1,s.2)),
                                    inP (F, AF, \lam FW (x, (inP (W', (FW',y,(V'y,W'y)), W'x), Wx)) => \case k FW' \with {
                                      | inP (U,EU,l) => l FW (x, (W'x, Wx)) <=∘ h EU (y, (V'y, l FW' (y,(W'y,W'y)) W'y))
                                    }))
           },
           inP (D, AD, g)))
    }
  }

\func UniformlyCoverSpace {X : PrecoverSpace} (AI : \Pi {C : Set (Set X)} -> X.isCauchy C -> ∃ (D : X.isCauchy) ∀ {V : D} ∃ (U : C) ∀ {V' : D} (Given (V ∧ V') -> V' ⊆ U)) : CompletelyRegularCoverSpace X \cowith
  | PrecoverSpace => X
  | isCompletelyRegular {C} => transport (\lam (S : PrecoverSpace X) => S.isCauchy C -> S.isCauchy \lam V => ∃ (U : C) (V RatherBelow.<=<c {RegularRatherBelow {S}} U))
      (exts \lam U => ext (closure-cauchy \lam c => c, closure)) $ isCompletelyRegular {ClosureRegularCoverSpace X.isCauchy X.cauchy-cover AI}

\instance CoverLattice (X : \Set) : CompleteLattice (CoverSpace X)
  | <= A B => \Pi {C : Set (Set X)} -> isCauchy {A} C -> isCauchy {B} C
  | <=-refl c => c
  | <=-transitive f g c => g (f c)
  | <=-antisymmetric f g => exts \lam C => ext (f,g)
  | top => DiscreteCover X
  | top-univ {A} c => cauchy-cover {A} c
  | Join f => \new CoverSpace {
    | PrecoverSpace => Join {PrecoverLattice X} f
    | isRegular => ClosureCoverSpace.closure-regular {Join f} RegularRatherBelow $ later \case \elim __ \with {
      | byLeft p => rewrite p $ closure-subset (closure $ byLeft idp) \lam q => rewriteI q $ inP (top, idp, <=<_top)
      | byRight (j,Cc) => closure $ byRight (j, cauchy-subset (isRegular {f j} Cc) $ later \lam {U} (inP (V,CV,U<=<V)) => inP (V, CV, Join-cond {PrecoverLattice X} j {f} U<=<V))
    }
  }
  | Join-cond j {f} => Join-cond {PrecoverLattice X} j
  | Join-univ => Join-univ {PrecoverLattice X}
  | join A B => \new CoverSpace {
    | PrecoverSpace => A ∨ {PrecoverLattice X} B
    | isRegular => ClosureCoverSpace.closure-regular {A ∨ B} RegularRatherBelow $ later \case \elim __ \with {
      | byLeft p => closure-subset (closure $ byLeft idp) \lam _ => inP (top, rewrite p idp, <=<_top)
      | byRight (true, Cc) => closure $ byRight (true, cauchy-subset (isRegular Cc) $ later \lam {U} (inP (V,CV,U<=<V)) => inP (V, CV, join-left {PrecoverLattice X} {A} {B} U<=<V))
      | byRight (false, Cc) => closure $ byRight (false, cauchy-subset (isRegular Cc) $ later \lam {U} (inP (V,CV,U<=<V)) => inP (V, CV, join-right {PrecoverLattice X} {A} {B} U<=<V))
    }
  }
  | join-left => join-left {PrecoverLattice X}
  | join-right => join-right {PrecoverLattice X}
  | join-univ => join-univ {PrecoverLattice X}

\func RegPrecoverSpace (X : PrecoverSpace) : CoverSpace X
  => CompleteLattice.SJoin {CoverLattice X} \lam A => A <= {PrecoverLattice X} X

\func regPrecoverSpace {X : PrecoverSpace} : CoverMap X (RegPrecoverSpace X) \cowith
  | func x => x
  | func-cover d => CompleteLattice.SJoin-univ {PrecoverLattice X} {\lam A => A <= {PrecoverLattice X} X} (\lam p => p) $
      transport (isCauchy {RegPrecoverSpace X}) (ext \lam U => ext (\lam DU => inP (U, DU, idp), \lam (inP (V,DV,U=V)) => rewrite U=V DV)) d

\lemma regPrecoverSpace-extend {X : PrecoverSpace} {Y : CoverSpace} (f : CoverMap X Y) : CoverMap (RegPrecoverSpace X) Y f \cowith
  | func-cover {D} Dc => CompleteLattice.SJoin-cond {CoverLattice X} {\lam A => A <= {PrecoverLattice X} X} {CoverTransfer f} PrecoverTransfer-char $
      inP (D, Dc, \lam {V} DV => inP (f ^-1 V, inP (V, DV, idp), <=-refl))

\instance PrecoverSpaceHasProduct : HasProduct PrecoverSpace
  | Product => ProductPrecoverSpace

\instance CoverSpaceHasProduct : HasProduct CoverSpace
  | Product => ProductCoverSpace

\open CoverMap

\instance ProductPrecoverSpace (X Y : PrecoverSpace) : PrecoverSpace (\Sigma X Y)
  => PrecoverTransfer __.1 ∨ PrecoverTransfer __.2
  \where {
    \func proj1 {X Y : PrecoverSpace} : CoverMap (X ⨯ Y) X \cowith
      | func s => s.1
      | func-cover Dc => join-left {PrecoverLattice (\Sigma X Y)} $ PrecoverTransfer-map.func-cover Dc

    \func proj2 {X Y : PrecoverSpace} : CoverMap (X ⨯ Y) Y \cowith
      | func s => s.2
      | func-cover Dc => join-right {PrecoverLattice (\Sigma X Y)} $ PrecoverTransfer-map.func-cover Dc

    \func tuple {X Y Z : PrecoverSpace} (f : CoverMap Z X) (g : CoverMap Z Y) : CoverMap Z (X ⨯ Y) \cowith
      | func z => (f z, g z)
      | func-cover => closure-univ-cover $ later \case \elim __ \with {
        | byLeft p => top-cauchy $ inP $ later (top, rewrite p idp, idp)
        | byRight (true, inP (D,Dc,h)) => cauchy-extend (f.func-cover Dc) \lam (inP (V,DV,p)) => \case h DV \with {
          | inP (U',CU',q) => inP (_, inP (U',CU',idp), \lam Ux => q $ rewriteF p Ux)
        }
        | byRight (false, inP (D,Dc,h)) => cauchy-extend (g.func-cover Dc) \lam (inP (V,DV,p)) => \case h DV \with {
          | inP (U',CU',q) => inP (_, inP (U',CU',idp), \lam Ux => q $ rewriteF p Ux)
        }
      }

    \lemma prodCover {X Y : PrecoverSpace} {C : Set (Set X)} (Cc : X.isCauchy C) {D : Set (Set Y)} (Dc : Y.isCauchy D)
      : isCauchy {ProductPrecoverSpace X Y} \lam W => ∃ (U : C) (V : D) (W = \lam s => \Sigma (U s.1) (V s.2))
      => cauchy-subset {ProductPrecoverSpace X Y} (cauchy-inter {ProductPrecoverSpace X Y} (proj1.func-cover Cc) (proj2.func-cover Dc))
          \lam (inP (U, V, inP (U',CU',p1), inP (V',DV',p2), q)) => inP $ later (U', CU', V', DV', q *> pmap2 (∧) p1 p2)

    \func prod {X Y X' Y' : PrecoverSpace} (f : CoverMap X Y) (g : CoverMap X' Y') : CoverMap (X ⨯ X') (Y ⨯ Y')
      => tuple (f ∘ proj1) (g ∘ proj2)
      \where {
        \lemma isDense {X X' : PrecoverSpace} {Y Y' : CoverSpace} {f : CoverMap X Y} {g : CoverMap X' Y'} (fd : f.IsDense) (gd : g.IsDense) : IsDense {prod f g}
          => \lam {(y,y')} yy'<=<U =>
              \have | (inP (V,yy'<=<V,V<=<U)) => <=<-inter yy'<=<U
                    | (inP (x,Vfxy')) => fd {y} $ transport (`<=< _) (ext \lam z => ext (pmap __.1, \lam p => ext (p, idp))) $ <=<_^-1 {Y} {Y ⨯ Y'} {tuple id (const y')} yy'<=<V
                    | (inP (x',Ufxfx')) => gd {y'} $ transport (`<=< _) (ext \lam z => ext (pmap __.2, \lam p => ext (idp, p))) $ <=<_^-1 {Y'} {Y ⨯ Y'} {tuple (const (f x)) id} $ <=<-right (single_<= Vfxy') V<=<U
              \in inP ((x,x'), Ufxfx')

        \lemma isEmbedding {X Y X' Y' : PrecoverSpace} {f : CoverMap X Y} {g : CoverMap X' Y'} (fe : f.IsEmbedding) (ge : g.IsEmbedding) : IsEmbedding {prod f g}
          => closure-embedding (\lam c => c) (prod f g) \case \elim __ \with {
            | byLeft p => top-cauchy {Y ⨯ Y'} $ inP $ later (top, rewrite p idp, top-univ)
            | byRight (true, inP (D,Dc,f)) => closure $ byRight (true, inP (_, fe Dc, \lam (inP (U,DU,p)) => TruncP.map (f DU) \lam (W,CW,q) => (_, inP (W, CW, (\lam c => p c) <=∘ q), <=-refl)))
            | byRight (false, inP (D,Dc,f)) => closure $ byRight (false, inP (_, ge Dc, \lam (inP (U,DU,p)) => TruncP.map (f DU) \lam (W,CW,q) => (_, inP (W, CW, (\lam c => p c) <=∘ q), <=-refl)))
          }

        \lemma isDenseEmbedding {X X' : PrecoverSpace} {Y Y' : CoverSpace} {f : CoverMap X Y} {g : CoverMap X' Y'} (fde : f.IsDenseEmbedding) (gde : g.IsDenseEmbedding) : IsDenseEmbedding {prod f g}
          => (isDense fde.1 gde.1, isEmbedding fde.2 gde.2)
      }
  }

\instance ProductCoverSpace (X Y : CoverSpace) : CoverSpace (\Sigma X Y)
  => CoverTransfer __.1 ∨ CoverTransfer __.2
  \where {
    \lemma prod-neighborhood {x : X} {y : Y} {W : Set (X ⨯ Y)} (xy<=<W : single (x,y) <=< {X ⨯ Y} W) : ∃ (U : Set X) (V : Set Y) (single x <=< U) (single y <=< V) ∀ {x : U} {y : V} (W (x,y))
      => \case closure-filter (\new SetFilter {
                  | F W => ∃ (U : Set X) (V : Set Y) (single x <=< U) (single y <=< V) ∀ {x : U} {y : V} (W (x,y))
                  | filter-mono p (inP (U,V,x<=<U,y<=<V,q)) => inP (U, V, x<=<U, y<=<V, \lam Ux Vy => p (q Ux Vy))
                  | filter-top => inP (top, top, <=<_top, <=<_top, \lam _ _ => ())
                  | filter-meet (inP (U,V,x<=<U,y<=<V,q)) (inP (U',V',x<=<U',y<=<V',q')) => inP (U ∧ U', V ∧ V', RatherBelow.<=<_single_meet x<=<U x<=<U', RatherBelow.<=<_single_meet y<=<V y<=<V', \lam (Ux,U'x) (Vy,V'y) => (q Ux Vy, q' U'x V'y))
                }) (\case \elim __ \with {
                      | byLeft p => inP (top, rewrite p idp, inP (top, top, <=<_top, <=<_top, \lam _ _ => ()))
                      | byRight (true, inP (D,Dc,h)) => \case CoverSpace.cauchy-regular-cover Dc x \with {
                        | inP (U,DU,x<=<U) => \case h DU \with {
                          | inP (W,CW,p) => inP (W, CW, inP (U, top, x<=<U, <=<_top, \lam Ux _ => p Ux))
                        }
                      }
                      | byRight (false, inP (D,Dc,h)) => \case CoverSpace.cauchy-regular-cover Dc y \with {
                        | inP (V,DV,y<=<V) => \case h DV \with {
                          | inP (W,CW,p) => inP (W, CW, inP (top, V, <=<_top, y<=<V, \lam _ Vy => p Vy))
                        }
                      }
      }) xy<=<W \with {
        | inP (W, h, inP (U,V,x<=<U,y<=<V,q)) => inP (U, V, x<=<U, y<=<V, \lam Ux' Vy' => h ((x,y), (idp, q (<=<_<= x<=<U idp) (<=<_<= y<=<V idp))) (q Ux' Vy'))
      }
  }
