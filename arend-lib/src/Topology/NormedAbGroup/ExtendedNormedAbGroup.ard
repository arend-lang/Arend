\import Algebra.Group
\import Algebra.Monoid
\import Arith.Real
\import Arith.Real.InfReal
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Biordered
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Subset
\import Topology.MetricSpace.ExtendedMetricSpace
\import Topology.MetricSpace.ValuedMetricSpace
\import Topology.NormedAbGroup (PseudoNormedAbGroup)
\import Topology.NormedAbGroup.ValuedNormedAbGroup

\class ExtendedPseudoNormedAbGroup \extends ExtendedPseudoMetricSpace, LinearlyValuedPseudoNormedAbGroup {
  \func IsBounded (x : E) : \Prop
    => ∃ (B : Real) (norm x < B)

  \type Bounded => Set.Total IsBounded
}

\lemma dist-bounded {A : ExtendedPseudoNormedAbGroup} {x y : A} {B : Real} (d : dist x y < B) (xb : A.IsBounded x) : A.IsBounded y \elim xb
  | inP (B',xB') => inP (B + B', norm_dist-bound <∘r transportInv (_ <) RealAbGroup.+-inf (InfRealAbMonoid.<_+ (transport {InfReal} (`< _) dist-symm d) xB'))

\instance BoundedPseudoNormedAbGroup (A : ExtendedPseudoNormedAbGroup) : PseudoNormedAbGroup A.Bounded \cowith
  | zro => (0, inP (1, transportInv (`< _) norm_zro InfRealAbMonoid.zro<ide))
  | + (x,xb) (y,yb) => (x + y, \case xb, yb \with {
    | inP (B,xB), inP (B',yB') => inP (B + B', transportInv (_ <) RealAbGroup.+-inf $ norm_+ <∘r InfRealAbMonoid.<_+ xB yB')
  })
  | zro-left => ext zro-left
  | +-assoc => ext +-assoc
  | negative (x,xb) => (negative x, TruncP.map xb \lam (B,xB) => (B, transportInv (InfRealAbMonoid.`< _) norm_negative xB))
  | negative-left => ext negative-left
  | +-comm => ext +-comm
  | norm x => inf-real-bounded (norm x.1) x.2
  | norm_zro => Real.real-lower-ext A.norm_zro
  | norm_negative => Real.real-lower-ext A.norm_negative
  | norm_+ => real_<=_InfReal.2 $ transportInv {InfReal} (_ <=) RealAbGroup.+-inf (later A.norm_+)