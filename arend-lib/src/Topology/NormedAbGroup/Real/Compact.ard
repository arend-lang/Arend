\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Ordered
\import Arith.Int
\import Arith.Nat
\import Arith.Rat
\import Arith.Real
\import Arith.Real.Field
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set.Subset
\import Topology.Compact
\import Topology.MetricSpace
\import Topology.NormedAbGroup.Real

-- TODO: Divide the interval into N equal parts instead and use this to define this splitting.
\lemma real-split (a b : Real) {eps : Real} (eps>0 : 0 < eps) : ∃ (D : Array Real) (\Pi {x : Real} -> a < x -> x < b -> ∃ (y : D) (dist y x < eps))
  => \case a.L-inh, b.U-inh, L-rounded (real_<_L .1 eps>0) \with {
    | inP (a',a'<a), inP (b',b<b'), inP (eps',eps'<eps,eps'>0) => \case Real.natBounded {(b + eps' - a') * RatField.finv eps'} \with {
      | inP (N,Nb) => inP (\new Array Real N \lam j => a' RealAbGroup.+ (j : Nat) RealField.* eps', \lam {x} a<x x<b => \case LU-focus {x} eps' linarith \with {
          | inP (x',x'<x,x<x'+eps') =>
            \let | j0 => (x' + eps' - a') * RatField.finv eps'
                 | j1 => rat_floor j0
                 | j1<=j0 : j1 RatField.<= j0 => rat_floor<=id
                 | j0-1<=jj : j0 - 1 RatField.< j1 => rat_floor>id-1
                 | j2 => iabs j1
                 | j1=j2 : j1 = j2 => inv $ iabs.ofPos $ rat_floor-univ $ LinearOrder.<_<= $ OrderedSemiring.<_*_positive_positive (rat_real_<.2 $ transport (_ RealAbGroup.<) RealAbGroup.minus-rat $ linarith (real_<_L.2 a'<a, real_<_U.2 x<x'+eps')) (RatField.finv>0 eps'>0)
                 | j2<N : j2 < N => pos<pos.conv $ transport (`< _) j1=j2 $ fromInt_<.conv $ j1<=j0 <∘r rat_real_<.2 (transport (`< _) RealField.*-rat (later $ <_*_positive-left (transport (`< _) RealAbGroup.minus-rat $ <_+-left _ $ transport (`< _) RealAbGroup.+-rat $ <_+-left _ $ real_<_L.2 x'<x <∘ x<b) $ rat_real_<.1 $ RatField.finv>0 eps'>0) <∘ real_<_U.2 Nb)
                 | j => toFin j2 j2<N
                 | j1=j : j1 = j => j1=j2 *> pmap pos (inv toFin=id)
                 | j*eps'<x+eps'-a' : pos j RealField.* eps' <= x' + eps' - a' => {?}
            \in inP (j, join-univ {?} {?} <∘r real_<_L.2 eps'<eps)
        })
    }
  }

\lemma real-bounded-tb {S : Set Real} (x0 : Given S) (Sb : IsBoundedSet S) : IsTotallyBoundedSet S \elim Sb
  | inP (B,B>0,Bb) => totallyBoundedSet-metric-char.2 \lam eps>0 => {?}
