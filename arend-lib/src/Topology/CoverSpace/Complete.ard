\import Function
\import Function.Meta
\import HLevel
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set.Filter
\import Set.Subset
\import Topology.CoverSpace
\open Set
\open Bounded(top,top-univ)

\record CauchyFilter (S : CoverSpace) \extends ProperFilter
  | X => S
  | isCauchyFilter {C : Set (Set S)} : isCauchy C -> ∃ (U : C) (F U)

\instance CauchyFilterPoset (S : CoverSpace) : Poset (CauchyFilter S)
  | <= F G => F ⊆ G
  | <=-refl c => c
  | <=-transitive f g c => g (f c)
  | <=-antisymmetric f g => exts \lam U => ext (f,g)

\type \infix 4 CF~ {S : CoverSpace} (F G : CauchyFilter S) : \Prop
  => \Pi {C : Set (Set S)} -> isCauchy C -> ∃ (U : C) (\Sigma (F U) (G U))

\lemma CF~-sym {S : CoverSpace} {F G : CauchyFilter S} (p : F CF~ G) : G CF~ F
  => \case p __ \with {
    | inP (U,CU,(FU,GU)) => inP (U,CU,(GU,FU))
  }

\func CF~_meet {S : CoverSpace} {F G : CauchyFilter S} (p : F CF~ G) : CauchyFilter S \cowith
  | ProperFilter => F ∧ {ProperFilterSemilattice S} G
  | isCauchyFilter => p

\lemma CF~_<= {S : CoverSpace} {F G : CauchyFilter S} (p : F ⊆ G) : F CF~ G
  => \lam c => \case isCauchyFilter c \with {
    | inP (U,CU,FU) => inP (U, CU, (FU, p FU))
  }

\lemma CF~_<=< {S : CoverSpace} {F G : CauchyFilter S} (F~G : F CF~ G) {U V : Set S} (p : U <=< V) (FU : F U) : G V
  => \case F~G p \with {
    | inP (W, f, (FW, GW)) => filter-mono (f $ isProper $ filter-meet FU FW) GW
  }

\instance CauchyFilterEquivalence (S : CoverSpace) : Equivalence (CauchyFilter S)
  | ~ => CF~
  | ~-transitive p q c => \case p (isRegular c) \with {
    | inP (U, inP (V, CV, U<=<V), (FU, GU)) => inP (V, CV, (filter-mono (<=<_<= U<=<V) FU, CF~_<=< q U<=<V GU))
  }
  | ~-reflexive c => \case isCauchyFilter c \with {
    | inP (U,CU,FU) => inP (U,CU,(FU,FU))
  }
  | ~-symmetric => CF~-sym

\record MinCauchyFilter \extends CauchyFilter
  | isMinFilter {G : CauchyFilter S} : G ⊆ F -> F ⊆ G
  \where {
    \lemma Min_CF~_<= {S : CoverSpace} {F : MinCauchyFilter S} {G : CauchyFilter S} (p : F CF~ G) : F ⊆ G
      => F.isMinFilter {CF~_meet p} meet-left <=∘ meet-right

    \lemma equiv {S : CoverSpace} {F G : MinCauchyFilter S} (p : F CF~ G) (U : Set S) : F U = G U
      => ext (Min_CF~_<= p {_}, Min_CF~_<= (CF~-sym p) {_})

    \lemma equality {S : CoverSpace} {F G : MinCauchyFilter S} (p : F CF~ G) : F = G
      => exts (equiv p)
  }

-- | The unique minimal Cauchy filter equivalent to the given one.
\func minCF {S : CoverSpace} (F : CauchyFilter S) : MinCauchyFilter S \cowith
  | F U => \Pi {G : CauchyFilter S} -> G ⊆ F -> G U
  | filter-mono p q c => filter-mono p (q c)
  | filter-top _ => filter-top
  | filter-meet p q c => filter-meet (p c) (q c)
  | isProper p => F.isProper (p <=-refl)
  | isCauchyFilter c => \case F.isCauchyFilter (isRegular c) \with {
    | inP (U, inP (V, CV, U<=<V), FU) => inP (V, CV, \lam p => CF~_<=< (CF~-sym $ CF~_<= p) U<=<V FU)
  }
  | isMinFilter p q => q \lam GU => p GU \lam c => c

\lemma minCauchyFilter_CF~ {S : CoverSpace} {F : CauchyFilter S} : minCF F CF~ F
  => CF~_<= {_} {minCF F} \lam u => u <=-refl

\record RegularCauchyFilter \extends MinCauchyFilter
  | isRegularCauchyFilter {U : Set S} : F U -> ∃ (V : Set S) (V <=< U) (F V)
  | isMinFilter {G} p FU => \case isRegularCauchyFilter FU \with {
    | inP (V,V<=<U,FV) => CF~_<=< {_} {_} {G} (CF~-sym {_} {G} $ CF~_<= {S} p) V<=<U FV
  }
  \where {
    \lemma equality {S : CoverSpace} {F G : RegularCauchyFilter S} (p : F CF~ G) : F = G
      => exts (MinCauchyFilter.equiv p)
  }

\func pointCF {S : CoverSpace} (x : S) : RegularCauchyFilter S \cowith
  | F U => single x <=< U
  | filter-mono p q => <=<-left q p
  | filter-top => <=<_top
  | filter-meet p q => <=<-right (meet-univ <=-refl <=-refl) (<=<_meet p q)
  | isProper p => inP (x, <=<_<= p idp)
  | isCauchyFilter c => S.cauchy-regular-cover c x
  | isRegularCauchyFilter p => unfolds at p $ \case S.cauchy-regular-cover (isRegular p) x \with {
    | inP (V, inP (W, f, V<=<W), x<=<V) => inP (V, <=<-left V<=<W $ f $ inP (x, (idp, <=<_<= V<=<W $ <=<_<= x<=<V idp)), x<=<V)
  }

\class SeparatedCoverSpace \extends CoverSpace
  | isSeparatedCoverSpace {x y : E} : (\Pi {C : Set (Set E)} -> isCauchy C -> ∃ (U : C) (\Sigma (U x) (U y))) -> x = y
  \where {
    \lemma separated-char {S : CoverSpace} {x y : S} : TFAE (
    {- 0 -} pointCF x ⊆ pointCF y,
    {- 1 -} pointCF x CF~ pointCF y,
    {- 2 -} pointCF x = pointCF y,
    {- 3 -} \Pi {U : Set S} -> single x <=< U <-> single y <=< U,
    {- 4 -} \Pi {U : Set S} -> single x <=< U -> U y,
    {- 5 -} \Pi {U V : Set S} -> single x <=< U -> single y <=< V -> ∃ (U ∧ V),
    {- 6 -} \Pi {C : Set (Set S)} -> isCauchy C -> ∃ (U : C) (\Sigma (U x) (U y))
    ) => TFAE.cycle (
      CF~_<= {S},
      RegularCauchyFilter.equality {S},
      \lam p {U} => <->_= $ path \lam i => RegularCauchyFilter.F {p i} U,
      \lam f p => <=<_<= (f.1 p) idp,
      \lam f p q => inP (y, (f p, <=<_<= q idp)),
      \lam f Cc => \case cauchy-regular-cover (isRegular Cc) x \with {
        | inP (U, inP (W, CW, U<=<W), x<=<U) => \case cauchy-regular-cover (unfolds at U<=<W $ U<=<W) y \with {
          | inP (V, g, y<=<V) => inP (W, CW, (<=<_<= U<=<W $ <=<_<= x<=<U idp, g (f x<=<U y<=<V) $ <=<_<= y<=<V idp))
        }
      },
      \lam f {U} p => \case f (isRegular p) \with {
        | inP (V, inP (W,g,V<=<W), (Vx,Vy)) => <=<-left (<=<-right (single_<= Vy) V<=<W) $ g $ inP (x, (idp, <=<_<= V<=<W Vx))
      })
  }

\lemma embedding-inj {X : SeparatedCoverSpace} {Y : PrecoverSpace} {f : CoverMap X Y} (fe : f.IsEmbedding) : isInj f
  => \lam {x} {y} p => isSeparatedCoverSpace \lam Cc => \case cauchy-cover (fe Cc) (f y) \with {
    | inP (V, inP (U,CU,q), Vfy) => inP (U, CU, (q $ unfolds $ rewrite p Vfy, q Vfy))
  }

\lemma dense-lift-unique {X Y : PrecoverSpace} {Z : SeparatedCoverSpace} (f : CoverMap X Y) (fd : f.IsDense) (g h : CoverMap Y Z) (p : \Pi (x : X) -> g (f x) = h (f x)) (y : Y) : g y = h y
  => isSeparatedCoverSpace $ SeparatedCoverSpace.separated-char 5 6 \lam gy<=<U hy<=<V => \case fd (<=<-right (\lam q => later $ rewrite q (idp,idp)) $ <=<_meet (<=<_^-1 gy<=<U) (<=<_^-1 hy<=<V)) \with {
    | inP (x,(Ugfx,Vhfx)) => inP (g (f x), (Ugfx, rewrite p Vhfx))
  }

\func IsCompleteCoverSpace (S : CoverSpace) => \Pi (F : MinCauchyFilter S) -> ∃ (x : S) (pointCF x ⊆ F)

\class CompleteCoverSpace \extends SeparatedCoverSpace {
  | isCompleteCoverSpace : IsCompleteCoverSpace \this

  \protected \lemma filter-point-unique (F : CauchyFilter \this) : isProp (\Sigma (x : E) (pointCF x ⊆ F))
    => \lam s t => ext $ isSeparatedCoverSpace $ SeparatedCoverSpace.separated-char 1 6 $ ~-transitive {_} {_} {F} (CF~_<= {_} {_} {F} s.2) $ ~-symmetric (CF~_<= {_} {pointCF t.1} t.2)

  \protected \lemma filter-point-pair (F : CauchyFilter \this) : \Sigma (x : E) (pointCF x ⊆ F) \level filter-point-unique F
    => \case isCompleteCoverSpace (minCF F) \with {
      | inP (x,p) => (x, p <=∘ \lam u => u <=-refl)
    }

  \sfunc filter-point (F : CauchyFilter \this) : E
    => (filter-point-pair F).1

  \lemma filter-point-sub {F : CauchyFilter \this} : pointCF (filter-point F) ⊆ F
    => rewrite (\peval filter-point F) (filter-point-pair F).2

  \lemma filter-point-elem {F : CauchyFilter \this} {U V : Set E} (p : U <=< V) (FU : F U) : single (filter-point F) <=< V
    => CF~_<=< (~-symmetric {_} {pointCF (filter-point F)} {F} $ CF~_<= {_} {pointCF (filter-point F)} filter-point-sub) p FU
}

\func CF-map {X Y : CoverSpace} (f : CoverMap X Y) (F : CauchyFilter X) : CauchyFilter Y \cowith
  | F V => F (f ^-1 V)
  | filter-mono p d => filter-mono (p __) d
  | filter-top => filter-top
  | filter-meet => filter-meet
  | isProper d => TruncP.map (isProper d) \lam s => (f s.1, s.2)
  | isCauchyFilter Cc => \case F.isCauchyFilter (f.func-cover Cc) \with {
    | inP (U, inP (V,CV,p), FU) => inP (V, CV, rewriteI p FU)
  }

\lemma CF-map_<= {X Y : CoverSpace} {f : CoverMap X Y} (F G : CauchyFilter X) (p : F ⊆ G) : CF-map f F ⊆ CF-map f G
  => p __

\func dense-filter-lift {X Y : CoverSpace} (f : CoverMap X Y) (fd : f.IsDenseEmbedding) (F : CauchyFilter Y) : CauchyFilter X \cowith
  | F U => ∃ (V' V : Set Y) (f ^-1 V ⊆ U) (V' <=< V) (F V')
  | filter-mono U<=U' (inP (V',V,p,V'<=<V,FV')) => inP (V', V, p <=∘ U<=U', V'<=<V, FV')
  | filter-top => inP (top, top, \lam _ => (), <=<_top, filter-top)
  | filter-meet (inP (U',U,p,U'<=<U,FU')) (inP (V',V,q,V'<=<V,FV')) => inP (U' ∧ V', U ∧ V, MeetSemilattice.meet-monotone p q, <=<_meet U'<=<U V'<=<V, filter-meet FU' FV')
  | isProper (inP (V',V,p,V'<=<V,FV')) => \case F.isProper FV' \with {
    | inP (y,V'y) => \case fd.1 (<=<-right (single_<= V'y) V'<=<V) \with {
      | inP (x,Vfx) => inP (x, p Vfx)
    }
  }
  | isCauchyFilter Cc => \case F.isCauchyFilter $ isRegular $ fd.2 Cc \with {
    | inP (V', inP (V, inP (U, CU, p), V'<=<V), FV') => inP (U, CU, inP (V', V, p, V'<=<V, FV'))
  }
  \where {
    \lemma map-equiv (fd : f.IsDenseEmbedding) : CF-map f (dense-filter-lift f fd F) CF~ F
      => \lam {C} Cc => \case isCauchyFilter {F} (isRegular Cc) \with {
        | inP (V', inP (V, CV, V'<=<V), FV') => inP (V, CV, (inP (V', V, <=-refl, V'<=<V, FV'), filter-mono (<=<_<= V'<=<V) FV'))
      }
  }

\func dense-lift {X Y : CoverSpace} {Z : CompleteCoverSpace} (f : CoverMap X Y) (fd : f.IsDenseEmbedding) (g : CoverMap X Z) : CoverMap Y Z \cowith
  | func y => Z.filter-point $ CF-map g \new CauchyFilter {
    | F U => ∃ (V : Set Y) (f ^-1 V ⊆ U) (single y <=< V)
    | filter-mono U<=U' (inP (V,p,q)) => inP (V, p <=∘ U<=U', q)
    | filter-top => inP (top, \lam _ => (), <=<_top)
    | filter-meet (inP (V,p,q)) (inP (V',p',q')) => inP (V ∧ V', MeetSemilattice.meet-monotone p p', <=<_single_meet q q')
    | isProper (inP (V,p,q)) => \case fd.1 q \with {
      | inP (x,Vfx) => inP (x, p Vfx)
    }
    | isCauchyFilter Cc => \case Y.cauchy-regular-cover (fd.2 Cc) y \with {
      | inP (V, inP (U, CU, p), y<=<V) => inP (U, CU, inP (V, p, y<=<V))
    }
  }
  | func-cover Dc => cauchy-extend (isRegular $ fd.2 $ g.func-cover $ isRegular Dc) $ \lam {V'} (inP (V, inP (U, inP (W', inP (W, DW, W'<=<W), p), q), V'<=<V)) =>
                      inP (_, inP (W, DW, idp), \lam {y} V'y => <=<_<= (Z.filter-point-elem W'<=<W $ inP $ later (V, rewriteF p q, <=<-right (single_<= V'y) V'<=<V)) idp)

\lemma dense-complete {X Y : CoverSpace} {f : CoverMap X Y} (fd : f.IsDenseEmbedding) (p : \Pi (F : MinCauchyFilter X) -> ∃ (y : Y) (pointCF y ⊆ CF-map f F)) : IsCompleteCoverSpace Y
  => \lam F => \case p $ minCF $ dense-filter-lift f fd F \with {
    | inP (y,q) => inP (y, MinCauchyFilter.Min_CF~_<= {_} {pointCF y} $ ~-transitive {_} {pointCF y} (CF~_<= {_} {pointCF y} $ q <=∘ CF-map_<= (minCF $ dense-filter-lift f fd F) (dense-filter-lift f fd F) \lam u => u <=-refl) $ dense-filter-lift.map-equiv fd)
  }

\instance CompletionCoverSpace (S : CoverSpace) : CompleteCoverSpace (MinCauchyFilter S)
  | CoverSpace => coverSpace
  | isSeparatedCoverSpace p => MinCauchyFilter.equality \lam Cc => \case p (mkCover-cauchy Cc) \with {
    | inP (_, inP (U,CU,idp), r) => inP (U,CU,r)
  }
  | isCompleteCoverSpace => dense-complete completionCoverSpace.isDenseEmbedding \lam F => inP (F, completionCoverSpace.dense-aux {_} {F} __)
  \where {
    \func mkSet (U : Set S) : Set (MinCauchyFilter S)
      => \lam F => F U

    \lemma mkSet_<= {U V : Set S} (p : U ⊆ V) : mkSet U ⊆ mkSet V
      => \lam {F} => filter-mono p

    \lemma mkSet_top : mkSet top = \lam _ => \Sigma
      => ext \lam F => ext (\lam _ => (), \lam _ => filter-top)

    \lemma mkSet_meet {U V : Set S} : mkSet (U ∧ V) = mkSet U ∧ mkSet V
      => ext \lam F => ext (\lam x => (mkSet_<= (later __.1) x, mkSet_<= (later __.2) x), \lam s => filter-meet s.1 s.2)

    \func isCCauchy (D : Set (Set (MinCauchyFilter S)))
      => ∃ (C : Set (Set S)) (S.isCauchy C) (\Pi {U : Set S} -> C U -> ∃ (V : D) (mkSet U ⊆ V))

    \func mkCover (C : Set (Set S)) : Set (Set (MinCauchyFilter S))
      => \lam V => ∃ (U : C) (V = mkSet U)

    \lemma mkCover-cauchy {C : Set (Set S)} (Cc : isCauchy C) : isCCauchy (mkCover C)
      => inP (C, Cc, \lam {U} CU => inP (mkSet U, inP (U,CU,idp), <=-refl))

    \func coverSpace : CoverSpace (MinCauchyFilter S) \cowith
      | isCauchy => isCCauchy
      | cauchy-cover {D} (inP (C,Cc,p)) F =>
        \have | (inP (U,CU,FU)) => isCauchyFilter Cc
              | (inP (V,DV,q)) => p CU
        \in inP (V, DV, q FU)
      | cauchy-top => inP (single top, cauchy-top, \lam _ => inP (top, idp, \lam _ => ()))
      | cauchy-extend (inP (E,Ec,g)) f => inP (E, Ec, \lam EU =>
          \have | (inP (V,CV,p)) => g EU
                | (inP (W,DW,q)) => f CV
          \in inP (W, DW, p <=∘ q))
      | cauchy-trans {C} {D} (inP (C',C'c,f)) Dc => inP (_, S.cauchy-trans {C'} {\lam U' V' => ∃ (U : C) (V : D U) (mkSet U' ⊆ U) (mkSet V' ⊆ V)} C'c \lam {U'} C'U' =>
          \have | (inP (U,CU,U'<=U)) => f C'U'
                | (inP (D',D'c,g)) => Dc CU
          \in cauchy-extend D'c \lam {V'} D'V' => \case g D'V' \with {
            | inP (V,DV,V'<=V) => inP (V', inP (U, CU, V, DV, U'<=U, V'<=V), <=-refl)
          }, \lam {W'} (inP (U', V', C'U', inP (U, CU, V, DV, U'<=U, V'<=V), W'=U'V')) => inP (U ∧ V, inP (U, V, CU, DV, idp), rewrite W'=U'V' \lam {F} FU'V' => (U'<=U $ filter-mono meet-left FU'V', V'<=V $ filter-mono meet-right FU'V')))
      | isRegular {D} (inP (C,Cc,f)) =>
        \have <=<_mkFilters {U' U : Set S} (p : U' <=< U) : mkSet U' <=< mkSet U
              => unfolds $ inP (_, p, \lam {W} g => inP (mkSet W, \lam (inP (F,(FU',FW))) => mkSet_<= $ g (isProper (filter-meet FU' FW)), <=-refl))
        \in inP (_, isRegular Cc, \lam {U'} (inP (U,CU,U'<=<U)) => \case f CU \with {
          | inP (V,DV,U<=V) => inP (mkSet U', inP (V, DV, <=<-left (<=<_mkFilters U'<=<U) U<=V), <=-refl)
        })
  }

\func completionCoverSpace (S : CoverSpace) : CoverMap S CompletionCoverSpace.coverSpace \cowith
  | func => pointCF
  | func-cover (inP (C,Cc,f)) => cauchy-extend (isRegular Cc)
      \case \elim __ \with {
        | inP (U',CU',U<=<U') => \case f CU' \with {
          | inP (V,DV,p) => inP (pointCF ^-1 V, inP (V, DV, idp), \lam Ux => p $ <=<-right (single_<= Ux) U<=<U')
        }
      }
  \where {
    \protected \lemma dense-aux {F : MinCauchyFilter S} {V : Set (MinCauchyFilter S)} (r : single F <=< {CompletionCoverSpace.coverSpace} V) : F \lam x => V (completionCoverSpace S x) \elim r
      | inP (C,Cc,f) =>
        \have | (inP (U', inP (U, CU, U'<=<U), FU')) => isCauchyFilter {F} (isRegular Cc)
              | (inP (W,g,U<=W)) => f CU
        \in filter-mono (\lam U'x => g (inP (F, (idp, U<=W $ filter-mono (<=<_<= U'<=<U) FU'))) $ U<=W $ <=<-right (single_<= U'x) U'<=<U) FU'

    \lemma isDenseEmbedding : CoverMap.IsDenseEmbedding {completionCoverSpace S}
      => (\lam r => isProper (dense-aux r), \lam {C} Cc => inP (C, Cc, \lam {U} CU => inP (CompletionCoverSpace.mkSet U, inP (U, CU, <=<_<= __ idp), <=-refl)))
  }