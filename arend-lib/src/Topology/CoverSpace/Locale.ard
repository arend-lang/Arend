\import Category
\import Category.Functor
\import Data.Bool
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Set.Filter
\import Set.Subset
\import Topology.CoverSpace
\import Topology.CoverSpace.Category
\import Topology.Locale \hiding (<=<-left, <=<-right, <=<_<=, func-cover)
\import Topology.Locale.Points
\open Bounded(top,top-univ)
\open LocalePrecoverSpace
\open Set

\func CoverSpaceLocale (X : PrecoverSpace) : Locale
  => PresentedFrame (framePres {X})
  \where {
    \open PresentedFrame

    \func framePres {X : PrecoverSpace} : FrameUPres (Set X) \cowith
      | conj => ∧
      | BasicCover {J} U f => Given (U = {Set X} top) (C : X.isCauchy) (∀ {V : C} ∃ (j : J) (f j = V)) || (\Pi {V : Set X} -> V s<=< U -> ∃ (j : J) (f j = V)) || (Given U -> ∃ (j : J) (f j = {Set X} top))
      | unit => top
      | isUnit => byRight $ byRight \lam _ => inP ((),idp)

    \lemma cover-cauchy {X : PrecoverSpace} {C : Set (Set X)} (Cc : isCauchy C) : FramePres.SCover {framePres} top C
      => cover-basic $ byLeft (idp, C, Cc, \lam {V} CV => inP ((V,CV), idp))

    \lemma cover-reg {X : PrecoverSpace} {U : Set X} : FramePres.SCover U \lam V => V s<=< U
      => cover-trans (cover-basic {framePres} {U} {\Sigma (V : Set X) (V s<=< U)} $ byRight $ byLeft \lam p => inP ((_, p), idp)) \lam s => cover-inj s idp

    \lemma cover-inh {X : PrecoverSpace} {U : Set X} : Cover {framePres} U {∃ (x : X) (single x s<=< U)} \lam _ => U
      => cover-trans cover-reg \lam (U',U'<=<U) =>
          \have | c1 : Cover {framePres} U' {∃ U'} \lam _ => top
                    => cover-basic $ byRight $ byRight \lam s => inP (inP s, idp)
               | c2 => Cover.cover-trans1 (cover-idemp () idp) $ cover-ldistr idp c1 \lam _ => idp
         \in cover-trans c2 \lam (inP (x,U'x)) => Cover.cover-inj_<= (inP (x, RatherBelow.<=<-right (single_<= U'x) U'<=<U)) \lam (U'x,_) => s<=<_<= U'<=<U U'x

    \lemma positive-inh {U : Set X} (Up : Locale.isPositive {CoverSpaceLocale X} (embed U)) : ∃ U
      => Up _ $ embed<= $ cover-basic $ byRight $ byRight $ later \lam s => inP ((top, cover-inj (inP s, top, ()) idp), idp)

    \lemma embed_<=< {V U : Set X} (V<=<U : V s<=< U) : embed V Locale.<=< {CoverSpaceLocale X} embed U
      => \lam _ => Cover.cover-trans1 Cover.cover_top $ cover-basic $ byLeft
            (idp, _, V<=<U, \case \elim __ \with {
              | byLeft p => inP ((true, _, cover-inj ((embed $ Compl V, rewrite embed_meet $ embed<= $ cover-basic $ byRight $ byRight $ later \lam (x,(nVx,Vx)) => absurd $ nVx Vx), _, rewrite p $ cover-inj () idp) idp), idp)
              | byRight p => inP ((false, _, rewrite p $ cover-inj () idp), idp)
            })

    \lemma regular : Locale.isRegular {CoverSpaceLocale X}
      => regular-fromPres \lam U => cover-basic $ byRight $ byLeft $ later \lam {V} V<=<U => inP ((V, embed_<=< V<=<U), idp)

    \lemma cover-char {X : StronglyRegularCoverSpace} (Xo : X.IsOvert) {U : Set X} {J : \Set} {g : J -> Set X} (c : Cover {framePres} U g) {U' : Set X} (U'<=<U : U' s<=< U)
      : X.isCauchy \lam V => (V = Compl U') || (\Sigma (j : J) (g j = V)) \elim c
      | cover-basic (byLeft (p,C,Cc,h)) => cauchy-subset Cc \case h __ \with {
        | inP r => byRight r
      }
      | cover-basic (byRight (byLeft h)) => unfolds at U'<=<U $ cauchy-extend (isStronglyRegular U'<=<U) \lam {V'} (inP (V, e, V'<=<V)) => \case \elim e \with {
        | byLeft p => inP (_, byLeft idp, rewriteF p $ s<=<_<= V'<=<V)
        | byRight p => inP (V', \case h (rewriteF p V'<=<V) \with {
          | inP s => byRight s
        }, <=-refl)
      }
      | cover-basic (byRight (byRight h)) => cauchy-extend (Xo U'<=<U) \lam {V'} (e, inP (x,V'x)) => \case \elim e \with {
        | byLeft p => inP (V', byLeft p, <=-refl)
        | byRight p => \case h (x, rewriteI p V'x) \with {
          | inP (j,q) => inP (top, byRight (j, q), top-univ)
        }
      }
      | cover-inj j p => unfolds at U'<=<U $ cauchy-subset U'<=<U \case \elim __ \with {
        | byLeft q => byLeft q
        | byRight q => byRight $ later (j, p *> inv q)
      }
      | cover-trans {I} {f} c d =>
        \have t => cauchy-trans (isStronglyRegular $ cover-char Xo c U'<=<U)
            {\lam U1 V1 => U1 s<=< Compl U' || (\Sigma (i : I) (U1 s<=< f i) ((V1 = Compl U1) || (\Sigma (j : J) (g j = V1))))} \case \elim __ \with {
              | inP (W, byLeft e, W'<=<W) => top-cauchy $ byLeft $ rewriteF e W'<=<W
              | inP (W, byRight (i,fi=W), W'<=<W) => cauchy-subset (cover-char Xo (d i) (rewriteF (inv fi=W) W'<=<W)) \lam e => byRight $ later (i, rewrite fi=W W'<=<W, e)
            }
        \in cauchy-extend t \case \elim __ \with {
          | inP (V, W, inP (U, byLeft e, V<=<U), _, Z=VW) => inP (_, byLeft idp, rewrite Z=VW $ meet-left <=∘ s<=<_<= V<=<U <=∘ Preorder.=_<= e)
          | inP (V, W, inP (U, _, V<=<U), byLeft e2, Z=VW) => inP (_, byLeft idp, rewrite Z=VW $ meet-left <=∘ s<=<_<= e2)
          | inP (V, W, inP (U, _, V<=<U), byRight (i, V<=<fi, byLeft e), Z=VW) => inP (_, byLeft idp, rewrite (Z=VW,e) \lam (Vx,nVx) => absurd $ nVx Vx)
          | inP (V, W, inP (U, _, V<=<U), byRight (i, V<=<fi, byRight (j,gj=W)), Z=VW) => inP (_, byRight (j,idp), rewrite (Z=VW,gj=W) meet-right)
        }
      | cover-proj1 {U1} {U2} p j q => unfolds at U'<=<U $ cauchy-extend U'<=<U \lam {V} => \case \elim __ \with {
        | byLeft r => inP (V, byLeft r, <=-refl)
        | byRight r => inP (U1, byRight (j,q), rewrite (r *> p) meet-left)
      }
      | cover-idemp j p => unfolds at U'<=<U $ cauchy-subset U'<=<U \case \elim __ \with {
        | byLeft r => byLeft r
        | byRight r => byRight $ later (j, p *> MeetSemilattice.meet-idemp *> inv r)
      }
      | cover-comm p j q => unfolds at U'<=<U $ cauchy-subset U'<=<U \case \elim __ \with {
        | byLeft r => byLeft r
        | byRight r => byRight $ later (j, q *> MeetSemilattice.meet-comm *> inv (r *> p))
      }
      | cover-ldistr {W} p c q =>
        \have | t1 => cover-char Xo c (<=<-left U'<=<U $ later $ rewrite p meet-right)
              | t2 : U' s<=< W => <=<-left U'<=<U $ later $ rewrite p meet-left
        \in cauchy-extend (cauchy-inter t1 t2) \case \elim __ \with {
          | inP (V1, V2, byLeft e1, _, r) => inP (_, byLeft idp, rewrite (r,e1) meet-left)
          | inP (V1, V2, _, byLeft e2, r) => inP (_, byLeft idp, rewrite (r,e2) meet-right)
          | inP (_, _, byRight (j,idp), byRight idp, r) => inP (_, byRight (j, idp), rewrite (r, q j) $ Preorder.=_<= MeetSemilattice.meet-comm)
        }

    \lemma cover-point-char {X : StronglyRegularCoverSpace} {U : Set X} {J : \Set} {g : J -> Set X} (c : Cover {framePres} U g) {x : X} (x<=<U : single x <=< U) : ∃ (j : J) (single x <=< g j) \elim c
      | cover-basic (byLeft (p,C,Cc,h)) => \case cauchy-cover (isRegular Cc) x \with {
        | inP (V', inP (V,CV,V'<=<V), V'x) => \case h CV \with {
          | inP (j,gj=V) => inP (j, rewrite gj=V $ <=<-right (single_<= V'x) V'<=<V)
        }
      }
      | cover-basic (byRight (byLeft h)) => \case s<=<-inter x<=<U \with {
        | inP (V,x<=<V,V<=<U) => \case h V<=<U \with {
          | inP (j,gj=V) => inP (j, rewrite gj=V $ s<=<_<=< x<=<V)
        }
      }
      | cover-basic (byRight (byRight h)) => \case h (x, <=<_<= x<=<U idp) \with {
        | inP (j,p) => inP (j, rewrite p <=<_top)
      }
      | cover-inj j p => inP (j, rewrite p x<=<U)
      | cover-trans c d => \case cover-point-char c x<=<U \with {
        | inP (i,x<=<fi) => cover-point-char (d i) x<=<fi
      }
      | cover-proj1 p j q => inP (j, rewrite q $ <=<-left x<=<U $ later $ rewrite p meet-left)
      | cover-idemp j p => inP (j, rewrite p $ <=<-left x<=<U $ meet-univ <=-refl <=-refl)
      | cover-comm p j q => inP (j, rewrite q $ <=<-left x<=<U $ later $ rewrite p $ meet-univ meet-right meet-left)
      | cover-ldistr p c q => \case cover-point-char c {x} (<=<-left x<=<U $ later $ rewrite p meet-right) \with {
        | inP (j,x<=<fj) => inP (j, rewrite q $ RatherBelow.<=<_single_meet (<=<-left x<=<U $ later $ rewrite p meet-left) x<=<fj)
      }
  }

\func LocalePrecoverSpace (L : Locale) : PrecoverSpace \cowith
  | E => CompleteFilter {L}
  | isCauchy C => top <= Join \lam (s : Given C) => points_* s.1
  | cauchy-cover t x => \case filter-Join $ filter-mono {x} t filter-top \with {
    | inP ((U,CU),c) => \case filter-Join c \with {
      | inP ((a,p),xa) => inP (U, CU, p xa)
    }
  }
  | cauchy-top => Join-cond (later (top,top-univ)) <=∘ Join-cond (later (top, idp))
  | cauchy-extend p e => p <=∘ Join-univ \lam (U,CU) => \case e CU \with {
    | inP (V,DV,U<=V) => points_*-mono U<=V <=∘ Join-cond (later (V,DV))
  }
  | cauchy-trans p e => p <=∘ Join-univ \lam (U,CU) => meet-univ <=-refl top-univ <=∘ MeetSemilattice.meet-monotone <=-refl (e CU) <=∘
      Join-ldistr>= <=∘ Join-univ \lam (V,DUV) => transport (`<= _) points_*_meet $ Join-cond $ later (U ∧ V, inP (U, V, CU, DUV, idp))
  \where {
    \lemma points_<=< {a : L} {U : Set (CompleteFilter {L})} (p : a L.<=< points_* U) : points^* a s<=< {LocalePrecoverSpace L} U
      => unfolds $ p <=∘ join-univ (points^*-points_* (\lam {x} xna xa => CompleteFilter.isProper {x} $ filter-mono L.eval $ filter-meet xna xa) <=∘ Join-cond (later (_, byLeft idp))) (Join-cond $ later (_, byRight idp))
  }

\func CoverSpaceLocaleFunctor : Functor StronglyRegularCoverSpaceCat LocaleCat \cowith
  | F X => CoverSpaceLocale X
  | Func f => adjointMap (frameUPresHom f)
  | Func-id {X} => func-equality_ext \lam V => adjointMap_embed (frameUPresHom (id X)) _ *> <=-antisymmetric
      (Join-univ {_} {_} {\lam s => embed s.1} \lam (V',V'<=<V) => embed<= $ cover-inj (_, Cover.cover_<= $ s<=<_<= V'<=<V) idp)
      (embed<= $ cover-trans cover-reg \lam (V',V'<=<V) => cover-inj (_, later $ cover-inj ((V',V'<=<V), _, cover-inj () idp) idp) idp)
  | Func-o {X} {Y} {Z} {g} {f} => func-equality_ext \lam V => adjointMap_embed (frameUPresHom (g ∘ f)) _ *>
      -- <=-antisymmetric (Join-univ {_} {_} {\lam s => embed (_ ^-1 s.1)} \lam (V',V'<=<V) => embed<= $ cover-inj (_, later $ cover-inj ((V',V'<=<V), _, cover-inj ({?}, _, unfolds {?}) idp) idp) idp)
                       {?} *>
      -- cong (exts \lam U => ext (cover-trans __ \lam ((V',V'<=<V),W,Wc) => cover-inj ((V',V'<=<V), _, Cover.cover-trans1 Wc $ cover-inj ({?}, _, {?}) idp) idp,
      --                           cover-trans __ \lam (s1,W,Wc) => cover-inj (s1, _, cover-trans Wc \lam (t1,W',W'c) => Cover.cover-trans1 W'c $ Cover.cover_<= $ func-<= {^-1_FrameHom f} {t1.1} {g ^-1 s1.1} $ <=<_<= $ s<=<_<=< t1.2) idp)) *>
      inv (path \lam i => Join \lam j => adjointMap_embed (frameUPresHom f) (g ^-1 j.1) i) *>
      inv (func-Join {adjointMap (frameUPresHom f)} {_} {\lam s => embed (g ^-1 s.1)}) *>
      inv (pmap (adjointMap (frameUPresHom f)) (adjointMap_embed (frameUPresHom g) _))
  \where {
    \open PresentedFrame
    \open CoverSpaceLocale
    \open FrameReflectiveSubcat

    \func frameUPresHom {X Y : StronglyRegularCoverSpace} (f : CoverMap X Y) : FrameUPresHom (CoverSpaceLocale.framePres {Y}) (FrameUnitalSubcat.F (CoverSpaceLocale X)) \cowith
      | func V => Join {_} {\Sigma (V' : Set Y) (V' s<=< V)} \lam s => embed (f ^-1 s.1)
      | func-conj {U} {V} => <=-antisymmetric
          (Join-univ {_} {_} {\lam s => embed $ f ^-1 s.1} \lam (W,p) => meet-univ <=-refl <=-refl <=∘ Join-cond (later ((W, <=<-left p meet-left), (W, RatherBelow.<=<-left p meet-right))) {later \lam s => embed (f ^-1 s.1.1) ∧ embed (f ^-1 s.2.1)})
          (Join-univ {_} {_} {later \lam s => embed (f ^-1 s.1.1) ∧ embed (f ^-1 s.2.1)} $ later \lam ((W1,W1<=<U),(W2,W2<=<V)) => Preorder.=_<= embed_meet <=∘ Join-cond (later (W1 ∧ W2, <=<_meet W1<=<U W2<=<V)) {\lam s => embed (f ^-1 s.1)})
        *> inv (Locale.Join-distr {_} {_} {_} {\lam s => embed $ f ^-1 s.1} {\lam s => embed $ f ^-1 s.1})
      | func-cover {J} {U} {g} => \case \elim __ \with {
        | byLeft (U=top,C,Cc,h) => \lam _ => Cover.cover-trans1 (Cover.cover_<= top-univ) $ cover-trans (cover-cauchy $ func-cover {f} $ isStronglyRegular Cc) \lam (U, inP (V', inP (V,CV,V'<=<V), p)) => \case h CV \with {
          | inP (j,gj=V) => cover-inj (j, _, rewrite gj=V $ cover-inj ((V',V'<=<V), _, cover-inj () (inv p)) idp) idp
        }
        | byRight (byLeft e) => \lam {W} => cover-trans __ \lam ((U',U'<=<U),V,V<=f'U) => Cover.cover-trans1 V<=f'U $
        \have | c1 : Cover {framePres} top {\Sigma (U2 U1 : Set Y) (U2 s<=< U1) (U1 s<=< U || U1 s<=< Compl U')} \lam s => f ^-1 s.1
        => cover-basic $ byLeft (idp, _, func-cover {f} $ isStronglyRegular $ isStronglyRegular U'<=<U, \lam {V} (inP (U2, inP (U1, inP (U'',e,U1<=<U''), U2<=<U1), V=f'U2)) => \case \elim e \with {
            | byLeft p => inP ((U2, U1, U2<=<U1, byRight $ rewriteI p U1<=<U''), inv V=f'U2)
            | byRight p => inP ((U2, U1, U2<=<U1, byLeft $ rewriteI p U1<=<U''), inv V=f'U2)
          })
              | c2 : Cover {framePres} (f ^-1 U') {\Sigma (U2 U1 : Set Y) (U2 s<=< U1) (U1 s<=< U)} \lam s => f ^-1 s.1
              => cover-trans (transport (Cover __ _) Bounded.MeetSemilattice.top-right $ cover-ldistr idp c1 \lam _ => idp) \case \elim __ \with {
                  | (U2, U1, U2<=<U1, byLeft U1<=<U) => Cover.cover-inj_<= (U2,U1,U2<=<U1,U1<=<U) __.2
                  | (U2, U1, U2<=<U1, byRight e) => Cover.cover-trans1 (Cover.cover_<= $ later \lam (U'fx,U2fx) => absurd $ s<=<_<= e (s<=<_<= U2<=<U1 U2fx) U'fx) $ cover-inj (CompleteLattice.bottom, U', StronglyRatherBelow.<=<_bottom, U'<=<U) idp
                }
        \in cover-trans c2 \lam (U2,U1,U2<=<U1,U1<=<U) => \case e U1<=<U \with {
          | inP (j,gj=U1) => cover-inj (j, _, cover-inj ((U2, rewrite gj=U1 U2<=<U1), _, cover-inj () idp) idp) idp
        }
        | byRight (byRight e) => \lam {W} => cover-trans __ \lam ((U',U'<=<U),V,V<=f'U) => cover-trans cover-inh \lam (inP (x,x<=<V)) => \case e (f x, \case cover-point-char V<=f'U (s<=<_<=< x<=<V) \with { | inP (_,x<=<f'U') => s<=<_<= U'<=<U $ <=<_<= x<=<f'U' idp }) \with {
          | inP (j,p) => cover-inj (j, _, cover-inj ((top, rewrite p <=<_top), _, Cover.cover_<= top-univ) idp) idp
        }
      }
      | func-unit => <=-antisymmetric top-univ \lam _ => cover-inj ((top, <=<_top), _, Cover.cover_<= top-univ) idp
  }

\func LocaleCoverSpace {L : Locale} (Lr : L.isRegular) : StronglyRegularCoverSpace \cowith
  | PrecoverSpace => LocalePrecoverSpace L
  | isStronglyRegular => __ <=∘ Join-univ \lam (U,CU) => Lr _ <=∘ Join-univ \lam (a,a<=<_*U) => points-unit <=∘ Join-cond (later (points^* a, inP (U, CU, points_<=< a<=<_*U)))

\func CoverSpaceLocale-unit {X : StronglyRegularCoverSpace} (Xo : X.IsOvert) : CoverMap X (LocaleCoverSpace {CoverSpaceLocale X} CoverSpaceLocale.regular) \cowith
  | func x => framePres-point (\lam U => single x <=< U) (inP (top, <=<_top)) (\lam {a} {b} => (\lam p => (<=<-left p meet-left, <=<-left p meet-right), \lam (p,q) => RatherBelow.<=<_single_meet p q)) (later \lam b x<=<U => \case \elim b \with {
    | byLeft (p,C,Cc,q) => \case cauchy-cover (isRegular Cc) x \with {
      | inP (U, inP (V, CV,U<=<V), Ux) => \case q CV \with {
        | inP (j,fj=V) => inP (j, rewrite fj=V $ <=<-right (single_<= Ux) U<=<V)
      }
    }
    | byRight (byLeft h) => \case s<=<-inter x<=<U \with {
      | inP (V,x<=<V,V<=<U) => \case h V<=<U \with {
        | inP (j,fj=V) => inP (j, rewrite fj=V $ s<=<_<=< x<=<V)
      }
    }
    | byRight (byRight h) => \case h (x, <=<_<= x<=<U idp) \with {
      | inP (j,p) => inP (j, rewrite p <=<_top)
    }
  })
  | func-cover Dc => cauchy-extend (isRegular $ Xo $ CoverSpaceLocale.cover-char Xo (Dc ()) {top} <=<_top) \case \elim __ \with {
    | inP (U', (byLeft e, inP (x,U'x)), U<=<U') => absurd $ rewriteF e U'x ()
    | inP (U', (byRight (((V,DV),_,q),idp), _), U<=<U') => inP (_, inP (V, DV, idp), \lam Ux => \case CoverSpaceLocale.cover-point-char q $ <=<-right (single_<= Ux) U<=<U' \with {
      | inP (((W,p),U'',WU''),x<=<U'') => p $ inP $ later (U'', WU'', x<=<U'')
    })
  }