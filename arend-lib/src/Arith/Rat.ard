\import Algebra.Monoid.Prime
\import Arith.Int
\import Arith.Nat
\import Logic
\import Order.StrictOrder
\import Paths
\open NatLE
\open Nat

\record Rat (nom : Int) (denom : Nat) (nonZero : denom > 0) (coprime : Coprime nom (pos denom))

\func rat (nom denom : Int) (nonZero : Not (denom = 0)) : Rat \elim nom, denom
  | pos nom, pos denom => {?}
  | pos nom, neg (suc denom) => {?}
  | neg (suc nom), pos denom => {?}
  | neg (suc nom), neg (suc denom) => {?}
  \where {
    \func reduce (a b : Nat) => helper a a b
      \where {
        \func helper (c a b : Nat) : \Sigma Nat Nat \elim c, a
          | 0, _ => (0,1)
          | _, 0 => (0,1)
          | suc c, a =>
            \let | dm => divMod b a
                 | p => helper c dm.2 a
            \in (p.2, p.2 * dm.1 + p.1)
      }

    \func gcd (a b : Nat) => helper a a b
      \where {
        \func helper (c a b : Nat) : Nat \elim c, a
          | 0, _ => b
          | _, 0 => b
          | suc c, a => helper c (mod b a) a
      }
  }
