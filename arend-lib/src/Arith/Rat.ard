\import Algebra.Domain.Euclidean
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Ordered
\import Algebra.Ring
\import Algebra.Ring.Localization
\import Algebra.Ring.Localization.Field
\import Algebra.Semiring
\import Arith.Int
\import Arith.Nat
\import Function.Meta ($)
\import Logic
\import Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\open EuclideanSemiringData
\open Monoid(LDiv)

\record Rat (nom : Int) (denom : Nat) (denom/=0 : Not (denom = 0)) (reduced : gcd (iabs nom) denom = 1)
  \where {
    \func AltRat : CRing => LocRing subset
      \where \func subset : MSubset => localization-isOrderedField.positiveSubset IntRing
  }

\open Rat(AltRat)

\func rat (nom : Int) (denom : Nat) (denom/=0 : Not (denom = 0)) : Rat \elim nom
  | 0 => \new Rat 0 1 (\case __) idp
  | pos (suc _ \as nom) =>
    \let! (a,b) => reduce nom denom
    \in \new Rat a b {
      | denom/=0 => reduce2/=0 nom denom denom/=0
      | reduced => gcd_reduced nom denom denom/=0
    }
  | neg (suc _ \as nom) =>
    \let! (a,b) => reduce nom denom
    \in \new Rat (neg a) b {
      | denom/=0 => reduce2/=0 nom denom denom/=0
      | reduced => gcd_reduced nom denom denom/=0
    }
  \where {
    \lemma reduce1/=0 {a b : Nat} : Not ((reduce (suc a) b).1 = 0)
      => NatSemiring.nonZero-div (\case __) (LDiv.swap (GCD.gcd|val1 {gcd-isGCD (suc a) b}))

    \lemma reduce2/=0 (a b : Nat) (b/=0 : Not (b = 0)) : Not ((reduce a b).2 = 0)
      => \lam b'=0 => b/=0 (inv (reduce*gcd-right _ _) *> pmap (`* gcd _ _) b'=0 *> zro_*-left)

    \lemma div0 {x : Nat} (a|b : LDiv 0 x) : x = 0
      => inv a|b.inv-right *> zro_*-left

    \lemma gcd_reduced (a b : Nat) (b/=0 : Not (b = 0)) : gcd (reduce a b).1 (reduce a b).2 = 1
      => nat_gcd-isUnique (gcd-isGCD (reduce a b).1 (reduce a b).2) $ gcd_reduced=1.aux (gcd-isGCD a b) $ NatSemiring.cancel_*-left $ \lam gcd=0 => b/=0 $ div0 $ transport (LDiv __ b) gcd=0 $ GCD.gcd|val2 {gcd-isGCD a b}

    \lemma signum_nom {nom : Int} {denom : Nat} {denom/=0 : Not (denom = 0)} : signum (Rat.nom {rat nom denom denom/=0}) = signum nom \elim nom
      | 0 => idp
      | pos (suc _) => signum.signum_pos reduce1/=0
      | neg (suc _) => signum.signum_neg reduce1/=0

    \lemma rat_1 {a : Int} : rat a 1 (\case __) = \new Rat a 1 (\case __) (natUnit (reduce*gcd-right (iabs a) 1))
      => rat_alt-inj rat_alt_rat.alt
  }

\func rat_alt (x : Rat) : AltRat
  => in~ (x.nom, x.denom, signum.signum_pos x.denom/=0)

\lemma rat_alt-inj {x y : Rat} (p : rat_alt x = rat_alt y) : x = y
  => \have | x0*y1=y0*x1 => LocRing.unequals_domain (localization-isOrderedField.positiveSubset IntRing) (\lam x c x=0 => \case rewrite x=0 c) p
           | |x0|*y1=|y0|*x1 => inv iabs.*-comm *> pmap iabs x0*y1=y0*x1 *> iabs.*-comm
           | sgn[x0]=sgn[y0] => inv ide-right *> inv (pmap (_ *) (signum.signum_pos y.denom/=0)) *> inv signum.*-comm *> pmap signum x0*y1=y0*x1 *> signum.*-comm *> pmap (_ *) (signum.signum_pos x.denom/=0) *> ide-right
     \in ext (signum_iabs_eq sgn[x0]=sgn[y0] $
        natAssociates-areEqual (nat_gcd_*_div (\new LDiv { | inv => y.denom | inv-right => |x0|*y1=|y0|*x1 *> *-comm }) x.reduced)
                               (nat_gcd_*_div (\new LDiv { | inv => x.denom | inv-right => inv |x0|*y1=|y0|*x1 *> *-comm }) y.reduced),
        natAssociates-areEqual (nat_gcd_*_div (\new LDiv { | inv => iabs y.nom | inv-right => *-comm *> inv |x0|*y1=|y0|*x1 }) (nat_gcd-comm x.denom (iabs x.nom) *> x.reduced))
                               (nat_gcd_*_div (\new LDiv { | inv => iabs x.nom | inv-right => *-comm *> |x0|*y1=|y0|*x1 }) (nat_gcd-comm y.denom (iabs y.nom) *> y.reduced)))

\lemma rat_alt_rat {nom : Int} {denom : Nat} {denom/=0 : Not (denom = 0)} {p : signum (pos denom) = 1} : rat_alt (rat nom denom denom/=0) = in~ (nom, denom, p)
  => LocRing.equals1 AltRat.subset aux
  \where {
    \lemma aux {a : Int} {b : Nat} {b/=0 : Not (b = 0)} : Rat.nom {rat a b b/=0} * b = a * Rat.denom {rat a b b/=0} \elim a
      | 0 => IntRing.zro_*-left {b}
      | pos (suc n) => unfold_let (pmap pos (aux2 b/=0))
      | neg (suc n) => unfold_let (IntRing.negative_*-left {(reduce (suc n) b).1} *> pmap neg (aux2 b/=0))

    \lemma aux2 {a b : Nat} (b/=0 : Not (b = 0)) : (reduce a b).1 * b = a * (reduce a b).2
      => NatSemiring.cancel_*-left (Semiring.nonZero-div b/=0 (GCD.gcd|val2 {gcd-isGCD a b}))
          (inv *-assoc *> pmap (`* b) (LDiv.inv-right {GCD.gcd|val1 {gcd-isGCD a b}}) *> pmap (a *) (inv (LDiv.inv-right {GCD.gcd|val2 {gcd-isGCD a b}}) *> *-comm) *> inv *-assoc *> *-comm)

    \lemma alt {nom : Int} {denom : Nat} {denom/=0 : Not (denom = 0)} : rat_alt (rat nom denom denom/=0) = in~ (nom, denom, signum.signum_pos denom/=0)
      => rat_alt_rat
  }

\instance RatField : DiscreteOrderedField Rat
  | zro => \new Rat 0 1 (\case __) idp
  | + => +
  | zro-left {x : Rat} => rat_alt-inj $ pmap rat_alt (\peval _ + _) *> rat_alt_rat *> AltRat.zro-left {rat_alt x}
  | +-assoc {x y z : Rat} => rat_alt-inj $ pmap rat_alt (pmap (`+ z) (\peval _ + _) *> \peval _ + _) *> rat_alt_rat *> pmap (__ AltRat.+ rat_alt z) rat_alt_rat *> AltRat.+-assoc {rat_alt x} {rat_alt y} {rat_alt z} *> inv (pmap (rat_alt x AltRat.+) rat_alt_rat) *> inv rat_alt_rat *> inv (pmap rat_alt (pmap (x +) (\peval _ + _) *> \peval _ + _))
  | +-comm {x y : Rat} => rat_alt-inj $ pmap rat_alt (\peval _ + _) *> rat_alt_rat *> AltRat.+-comm {rat_alt x} {rat_alt y} *> inv rat_alt_rat *> inv (pmap rat_alt (\peval _ + _))
  | ide => \new Rat 1 1 (\case __) idp
  | * (x y : Rat) => rat (x.nom * y.nom) (x.denom * y.denom) (productNonZero x.denom/=0 y.denom/=0)
  | ide-left {x : Rat} => rat_alt-inj (rat_alt_rat *> AltRat.ide-left {rat_alt x})
  | *-assoc {x y z : Rat} => rat_alt-inj (rat_alt_rat *> pmap (__ AltRat.* rat_alt z) rat_alt_rat *> AltRat.*-assoc {rat_alt x} {rat_alt y} {rat_alt z} *> inv (pmap (rat_alt x AltRat.*) rat_alt_rat) *> inv rat_alt_rat)
  | ldistr {x y z : Rat} => rat_alt-inj $ rewrite (\peval y + z) $ rat_alt_rat *> pmap (rat_alt x AltRat.*) rat_alt_rat *> AltRat.ldistr {rat_alt x} {rat_alt y} {rat_alt z} *> inv (pmap2 (AltRat.+) rat_alt_rat rat_alt_rat) *> inv rat_alt_rat *> inv (pmap rat_alt (\peval _ + _))
  | negative (x : Rat) : Rat => \new Rat (IntRing.negative x.nom) x.denom x.denom/=0 (rewrite iabs.negative-comm x.reduced)
  | negative-left {x : Rat} => rat_alt-inj $ pmap rat_alt (\peval _ + _) *> rat_alt_rat *> AltRat.negative-left {rat_alt x} *> LocRing.equals1 AltRat.subset idp
  | isPos (x : Rat) => isPos x.nom
  | zro/>0 => \case __
  | positive_+ {x y : Rat} x>0 y>0 => rewrite (\peval x + y) $ rat.signum_nom *> IntRing.positive_+ (IntRing.positive_* x>0 (signum.signum_pos y.denom/=0)) (IntRing.positive_* y>0 (signum.signum_pos x.denom/=0))
  | ide>zro => idp
  | positive_* {x y : Rat} x>0 y>0 => rat.signum_nom *> IntRing.positive_* x>0 y>0
  | *-comm {x y : Rat} => rat_alt-inj (rat_alt_rat *> AltRat.*-comm {rat_alt x} {rat_alt y} *> inv rat_alt_rat)
  | finv (x : Rat) : Rat \with {
    | (0, _, _, _) => \new Rat 0 1 (\case __) idp
    | (pos (suc n), b, b/=0, r) => \new Rat (pos b) (suc n) (\case __) (nat_gcd-comm b (suc n) *> r)
    | (neg (suc n), b, b/=0, r) => \new Rat (neg b) (suc n) (\case __) (nat_gcd-comm b (suc n) *> r)
  }
  | finv_zro => idp
  | id_finv {x : Rat} x/=0 =>
    \have t : x.nom * Rat.nom {finv x} = x.denom * Rat.denom {finv x} => \case \elim x, \elim x/=0 \with {
      | (0, b, _, r), x/=0 => absurd (x/=0 (rat_alt-inj (LocRing.equals1 AltRat.subset (zro_*-left *> inv zro_*-left))))
      | (pos (suc n), b, b/=0, reduced), _ => pmap pos *-comm
      | (neg (suc n), b, b/=0, reduced), _ => pmap pos *-comm
    }
    \in rat_alt-inj (rat_alt_rat.alt *> LocRing.equals1 AltRat.subset (ide-right *> t *> inv ide-left))
  | decideEq (x y : Rat) => \case decideEq x.nom y.nom, decideEq x.denom y.denom \with {
    | yes p, yes q => yes (ext (p,q))
    | no p, _ => no $ \lam x=y => p $ pmap (Rat.nom {__}) x=y
    | _, no q => no $ \lam x=y => q $ pmap (Rat.denom {__}) x=y
  }
  | #0=>eitherPosOrNeg {x : Rat} (xInv : Monoid.Inv x) => \case IntRing.#0=>eitherPosOrNeg {x.nom} (\lam nom=0 => \case pmap (Rat.nom {__}) (inv (pmap (rat __ _ _) (pmap (`* _) nom=0 *> zro_*-left)) *> xInv.inv-right)) \with {
    | byLeft p => byLeft p
    | byRight p => byRight p
  }
  | natCoef n => \new Rat n 1 (\case __) idp
  | natCoefZero => idp
  | natCoefSuc n => ext (pmap (\lam t => pos (suc t)) (inv ide-left), idp) *> inv (\peval _ + _)
  \where {
    \sfunc \infixl 6 + (x y : Rat) => rat (x.nom * y.denom IntRing.+ y.nom * x.denom) (x.denom * y.denom) (productNonZero x.denom/=0 y.denom/=0)

    \lemma productNonZero {n m : Nat} (n/=0 : Not (n = 0)) (m/=0 : Not (m = 0)) : Not (n * m = 0)
      => \lam p => IntDomain.apartZeroProduct {pos n} {pos m} (\lam q => n/=0 (pmap iabs q)) (\lam q => m/=0 (pmap iabs q)) (pmap pos p)

    \open Arith.Rat(RatField)

    \lemma <-char {q r : Rat} (p : q.nom * r.denom < r.nom * q.denom) : q < r
      => unfolds $ rewrite (\peval _ + _, Ring.negative_*-left) $ rat.signum_nom *> p

    \lemma <-char-conv {q r : Rat} (q<r : q < r) : q.nom * r.denom < r.nom * q.denom
      => unfold (-) (rewrite Ring.negative_*-left idp) *> inv (pmap (\lam x => signum (Rat.nom {x})) (\peval _ + _) *> rat.signum_nom) *> q<r

    \lemma <=-char {q r : Rat} (p : q.nom * r.denom <= r.nom * q.denom) : q <= r
      => \lam r<q => p (<-char-conv r<q)

    \lemma <=-char-conv {q r : Rat} (q<=r : q <= r) : q.nom * r.denom <= r.nom * q.denom
      => \lam p => q<=r (<-char p)
  }

\func ratio (nom : Int) (denom : Nat) : Rat \elim denom
  | 0 => 0
  | suc d \as denom => rat nom denom (\case __)

\instance RatDenseOrder : UnboundedDenseLinearOrder.Dec
  | LinearOrder.Dec => RatField
  | UnboundedDenseLinearOrder => RatField.denseOrder $ DiscreteField.nonZero-Inv $ \lam p => \case pmap (Rat.nom {__}) $ inv (\peval _ RatField.+ _) *> p

\func rat_floor (r : Rat) : Int
  | (pos n, d, _, _) => n Nat.div d
  | (neg (suc _ \as n), d, _, _) => \case n Nat.mod d \with {
    | 0 => neg (n Nat.div d)
    | suc _ => neg (n Nat.div d) - 1
  }

\lemma rat_floor<id {r : Rat} : ratio (rat_floor r) 1 <= r \elim r
  | (pos n, d, _, _) => transportInv (`<= _) rat.rat_1 $ RatField.<=-char $ pos<=pos div_*<=id
  | (neg (suc _ \as n), d, d/=0, c) => mcases {1} {arg addPath} \with {
    | 0, p => \have d=1 => nat_gcd-isUnique (div_gcd (mod_div p)) (EuclideanSemiringData.gcd-isGCD n d) *> c
              \in Preorder.=_<= (rat.rat_1 *> ext (rewrite d=1 idp, inv d=1))
    | suc _, _ => \lam c => (unfolds, rewriteF (\peval _ RatField.+ _), inv rat.signum_nom *>) at c $
      \have | s : n Nat.- n Nat.div d * d = n Nat.mod d
                => IntRing.cancel-right (n Nat.div d * d) $ IntRing.+-assoc {n} {neg _} *> pmap (pos n +) IntRing.minus__ *> pmap pos (inv (Nat.divModProp n d) *> pmap (`+ _) *-comm *> +-comm)
            | t : n Nat.- suc (1 Nat.* n Nat.div d) Nat.* d = n Nat.mod d Nat.- d
                => rewrite NatSemiring.ide-left $ pmap (n Nat.-) (rdistr {_} {1}) *> rewrite NatSemiring.ide-left (pmap (pos n +) (IntRing.negative_+ {d} {n Nat.div d * d}) *> inv (IntRing.+-assoc {n} {neg _}) *> pmap (`- pos d) s)
      \in \case (inv (pmap signum t *> signum.signum_- {n Nat.mod d} {d} *> pmap negative (pos<pos (mod<right d/=0))) *> c : neg 1 = 1)
  }

\lemma rat_floor-univ {r : Rat} {x : Int} (x<=r : ratio x 1 <= r) : x <= rat_floor r \elim r
  | (pos n, d, _, _) => {?}
  | (neg (suc _ \as n), d, _, _) => mcases {1} {arg addPath} \with {
    | 0, p => {?}
    | suc _, _ => {?}
  }
