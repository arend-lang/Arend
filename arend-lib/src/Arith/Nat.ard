\import Algebra.Ordered
\import Data.Or
\import Logic
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder \hiding (<=)
\import Paths
\open Nat

-- # Various operations

\func pred (x : Nat) : Nat
  | zero => 0
  | suc x' => x'

\func \infixl 6 -' (n m : Nat) : Nat
  | 0, _ => 0
  | suc n, 0 => suc n
  | suc n, suc m => n -' m

\lemma -'id (n : Nat) : n -' n = 0 \elim n
  | 0 => idp
  | suc n => -'id n

\func suc/=0 {n : Nat} (p : suc n = 0) {A : \Type} : A =>
  coe (\case p @ __ \with { suc _ => Nat | 0 => A }) 0 right

-- # Properties of <= and <

\instance NatLE : TotalOrder Nat
  | <= => <=
  | <=-reflexive (n : Nat) : n <= n \with {
    | 0 => zero<=_
    | suc n => suc<=suc (<=-reflexive n)
  }
  | <=-transitive (n m k : Nat) (p : n <= m) (q : m <= k) : n <= k \with {
    | 0, _, _, _, _ => zero<=_
    | suc n, suc m, suc k, suc<=suc p, suc<=suc q => suc<=suc (<=-transitive n m k p q)
  }
  | <=-antisymmetric (n m : Nat) (p : n <= m) (q : m <= n) : n = m \with {
    | 0, 0, _, _ => idp
    | suc n, suc m, suc<=suc p, suc<=suc q => pmap suc (<=-antisymmetric n m p q)
  }
  | totality (n m : Nat) : n <= m || m <= n \with {
    | 0, _ => byLeft zero<=_
    | suc n, 0 => byRight zero<=_
    | suc n, suc m => ||.map suc<=suc suc<=suc (totality n m)
  }
  \where
    \lemma unsuc {n m : Nat} (p : suc n <= suc m) : n <= m
      | suc<=suc p => p

\instance NatBSemilattice : Bounded.JoinSemilattice
  | JoinSemilattice => NatLE
  | bottom => 0
  | bottom-univ _ => zero<=_

\lemma <=-suc {n : Nat} : n <= suc n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-suc

\lemma <=_0_+-left {n : Nat} (m : Nat) : n <= m + n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc (<=_0_+-left m)

\lemma <=_0_+-right {n : Nat} (m : Nat) : n <= n + m \elim m
  | 0 => <=-reflexive n
  | suc m => <=-transitive n (n + m) (suc (n + m)) (<=_0_+-right m) <=-suc

\lemma <=-+ {n m : Nat} (p : n <= m) : n + (m -' n) = m \elim n, m, p
  | 0, 0, _ => idp
  | 0, suc m, _ => pmap suc (+-comm 0 m)
  | suc n, suc m, suc<=suc p => +-comm _ _ *> pmap suc (+-comm _ _ *> <=-+ p)
  \where \open NatSemiring (+-comm)

\lemma <=_+ {n m k l : Nat} (n<=m : n <= m) (k<=l : k <= l) : n + k <= m + l \elim k, l, k<=l
  | 0, l, _ => <=-transitive n m (m + l) n<=m (<=_0_+-right l)
  | suc k, suc l, suc<=suc k<=l => suc<=suc (<=_+ n<=m k<=l)

\lemma <-implies-<= {n m : Nat} (p : suc n <= m) : n <= m => <=-transitive n (suc n) m <=-suc p

\lemma monotone-diagonal (f : Nat -> Nat) (mon : \Pi (n : Nat) -> suc (f n) <= f (suc n)) {n : Nat} : n <= f n \elim n
  | 0 => zero<=_
  | suc n => <=-transitive (suc n) (suc (f n)) (f (suc n)) (suc<=suc (monotone-diagonal f mon)) (mon n)

-- # Properties of +, *, and <

\instance NatSemiring : LinearlyOrderedCSemiring.Dec.Impl Nat
  | zro => 0
  | + => +
  | zro-left => +-comm 0
  | +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k {
    | 0 => idp
    | suc k => pmap suc (+-assoc n m k)
  }
  | +-comm (n m : Nat) : n + m = m + n \with {
    | 0, 0 => idp
    | suc n, 0 => pmap suc (+-comm n 0)
    | 0, suc m => pmap suc (+-comm 0 m)
    | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (inv (+-comm n m)) *> +-comm n (suc m))
  }
  | ide => 1
  | * => *
  | ide-left (n : Nat) : 1 * n = n \with {
    | 0 => idp
    | suc n => pmap suc (ide-left n)
  }
  | *-assoc (n m k : Nat) : (n * m) * k = n * (m * k) \elim k {
    | 0 => idp
    | suc k => pmap (`+ n * m) (*-assoc _ _ _) *> inv (ldistr _ _ _)
  }
  | ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k {
    | 0 => idp
    | suc k =>
        n * (m + k) + n     ==< pmap (`+ n) (ldistr _ _ _) >==
        n * m + n * k + n   ==< +-assoc _ _ _ >==
        n * m + (n * k + n) `qed
  }
  | *-comm (n m : Nat) : n * m = m * n \with {
    | 0, 0 => idp
    | suc n, 0 => *-comm n 0
    | 0, suc m => *-comm 0 m
    | suc n, suc m => pmap suc (
        suc n * m + n   ==< pmap (`+ n) (*-comm _ _) >==
        m * n + m + n   ==< +-assoc _ _ _ >==
        m * n + (m + n) ==< pmap2 (+) (inv (*-comm n m)) (+-comm m n) >==
        n * m + (n + m) ==< inv (+-assoc _ _ _) >==
        n * m + n + m   ==< pmap (`+ m) (*-comm _ _) >==
        suc m * n + m   `qed)
  }
  | zro_*-left => *-comm 0
  | < n m => suc n <= m
  | <-irreflexive (n : Nat) (p : suc n <= n) : Empty \with {
    | suc n, suc<=suc p => <-irreflexive n p
  }
  | <-transitive n m k p q => <=-transitive _ _ _ p (<=-transitive _ _ _ <=-suc q)
  | trichotomy (n m : Nat) : (n = m) `Or` (suc n <= m) `Or` (suc m <= n) \with {
    | 0, 0 => inl idp
    | 0, suc m => inr (inl (suc<=suc zero<=_))
    | suc n, 0 => inr (inr (suc<=suc zero<=_))
    | suc n, suc m => \case trichotomy n m \with {
      | inl n=m => inl (pmap suc n=m)
      | inr (inl sucn<=m) => inr (inl (suc<=suc sucn<=m))
      | inr (inr sucm<=n) => inr (inr (suc<=suc sucm<=n))
    }
  }
  | <_+-left (n m k : Nat) (p : suc n <= m) : suc (n + k) <= m + k \elim k {
    | 0 => p
    | suc k => suc<=suc (<_+-left n m k p)
  }
  | zro<ide => suc<=suc zero<=_
  | <_*_positive-left (n m k : Nat) (p : suc n <= m) (q : 1 <= k) : suc (n * k) <= m * k \elim k, q {
    | 1, _ => transport2 (suc __ <= __) (inv (+-comm _ _)) (inv (+-comm _ _)) p
    | suc (suc k), q => <=_+ (<=-transitive _ _ _ <=-suc (<_*_positive-left n m (suc k) p (suc<=suc zero<=_))) p
  }
  | <_*_negative-left x y z x<y z<0 => \case z<0 \with {}
