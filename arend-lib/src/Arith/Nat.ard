\import Algebra.Monoid (AbMonoid,CMonoid, zro-left)
\import Algebra.Ordered.Strictly
\import Algebra.Pointed
\import Algebra.Ring
\import Algebra.Semiring
\import Data.Or
\import Logic
\import Order.Lattice
\import Order.LinearOrder
\import Order.PartialOrder \hiding (<=)
\import Paths
\import Set
\open Nat

-- # Various operations

\func pred (x : Nat) : Nat
  | zero => 0
  | suc x' => x'

\func \infixl 6 -' (n m : Nat) : Nat
  | 0, _ => 0
  | suc n, 0 => suc n
  | suc n, suc m => n -' m

\func suc/=0 {n : Nat} (p : suc n = 0) {A : \Type} : A =>
  coe (\lam i => \case p @ i \with { suc _ => Nat | 0 => A }) 0 right

-- # Properties of <= and <

\instance NatLE : TotalOrder Nat
  | <= => <=
  | <=-reflexive _ => <=-reflexive
  | <=-transitive _ _ _ => <=-transitive
  | <=-antisymmetric _ _ => <=-antisymmetric
  | totality _ _ => totality
  \where {
    \lemma <=-reflexive {n : Nat} : n <= n \elim n
      | 0 => zero<=_
      | suc n => suc<=suc <=-reflexive

    \lemma <=-transitive {n m k : Nat} (p : n <= m) (q : m <= k) : n <= k \elim n, m, k, p, q
      | 0, _, _, _, _ => zero<=_
      | suc n, suc m, suc k, suc<=suc p, suc<=suc q => suc<=suc (<=-transitive p q)

    \lemma <=-antisymmetric {n m : Nat} (p : n <= m) (q : m <= n) : n = m \elim n, m, p, q
      | 0, 0, _, _ => idp
      | suc n, suc m, suc<=suc p, suc<=suc q => pmap suc (<=-antisymmetric p q)

    \lemma totality {n m : Nat} : n <= m || m <= n \elim n, m
      | 0, _ => byLeft zero<=_
      | suc n, 0 => byRight zero<=_
      | suc n, suc m => ||.map suc<=suc suc<=suc totality
  }

\instance NatBSemilattice : Bounded.JoinSemilattice
  | JoinSemilattice => NatLE
  | bottom => 0
  | bottom-univ _ => zero<=_

\lemma <=-suc {n : Nat} : n <= suc n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-suc

\lemma <=_0_+-left {n : Nat} (m : Nat) : n <= m + n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc (<=_0_+-left m)

\lemma <=_0_+-right {n : Nat} (m : Nat) : n <= n + m \elim m
  | 0 => <=-reflexive n
  | suc m => <=-transitive n (n + m) (suc (n + m)) (<=_0_+-right m) <=-suc

\lemma <=-+ {n m : Nat} (p : n <= m) : n + (m -' n) = m \elim n, m, p
  | 0, 0, _ => idp
  | 0, suc m, _ => pmap suc +-comm
  | suc n, suc m, suc<=suc p => +-comm *> pmap suc (+-comm *> <=-+ p)

\lemma <=_+ {n m k l : Nat} (n<=m : n <= m) (k<=l : k <= l) : n + k <= m + l \elim k, l, k<=l
  | 0, l, _ => <=-transitive n m (m + l) n<=m (<=_0_+-right l)
  | suc k, suc l, suc<=suc k<=l => suc<=suc (<=_+ n<=m k<=l)

-- # Properties of +, *, and <

\open NatSemiring (+-comm)

\instance NatSemiring : DecOrderedCSemiring Nat
  | zro => 0
  | + => +
  | zro-left _ => +-comm
  | +-assoc _ _ _ => +-assoc
  | +-comm _ _ => +-comm
  | ide => 1
  | * => *
  | ide-left _ => id-*
  | *-assoc _ _ _ => *-assoc
  | ldistr _ _ _ => ldistr
  | *-comm _ _ => *-comm
  | zro_*-left _ => *-comm
  | < n m => suc n <= m
  | <-irreflexive _ => suc_/<=_
  | <-transitive _ _ _ => <-transitive
  | trichotomy _ _ => trichotomy
  | <_+-left _ _ _ => <_+-left
  | zro<ide => suc<=suc zero<=_
  | <_*_positive-left _ _ _ => <_*-left
  | <_*_negative-left x y z x<y z<0 => \case z<0 \with {}
  \where {
    \open NatLE

    \lemma suc_/<=_ {n : Nat} (p : suc n <= n) : Empty \elim n, p
      | suc n, suc<=suc p => suc_/<=_ p

    \lemma <-transitive {n m k : Nat} (p : suc n <= m) (q : suc m <= k) : suc n <= k => <=-transitive p (<=-transitive <=-suc q)

    \func trichotomy {n m : Nat} : (n = m) `Or` (suc n <= m) `Or` (suc m <= n) \elim n, m
      | 0, 0 => inl idp
      | 0, suc m => inr (inl (suc<=suc zero<=_))
      | suc n, 0 => inr (inr (suc<=suc zero<=_))
      | suc n, suc m => \case trichotomy {n} {m} \with {
        | inl n=m => inl (pmap suc n=m)
        | inr (inl sucn<=m) => inr (inl (suc<=suc sucn<=m))
        | inr (inr sucm<=n) => inr (inr (suc<=suc sucm<=n))
      }

    \lemma +-assoc {n m k : Nat} : (n + m) + k = n + (m + k) \elim k
      | 0 => idp
      | suc k => pmap suc +-assoc

    \lemma +-comm {n m : Nat} : n + m = m + n \elim n, m
      | 0, 0 => idp
      | suc n, 0 => pmap suc +-comm
      | 0, suc m => pmap suc +-comm
      | suc n, suc m => pmap suc (+-comm *> pmap suc (inv +-comm) *> +-comm)

    \lemma id-* {n : Nat} : 1 * n = n \elim n
      | 0 => idp
      | suc n => pmap suc id-*

    \lemma ldistr {n m k : Nat} : n * (m + k) = n * m + n * k \elim k
      | 0 => idp
      | suc k =>
        n * (m + k) + n     ==< pmap (\lam x => x + n) ldistr >==
        n * m + n * k + n   ==< +-assoc >==
        n * m + (n * k + n) `qed

    \lemma *-assoc {n m k : Nat} : (n * m) * k = n * (m * k) \elim k
      | 0 => idp
      | suc k => pmap (\lam x => x + n * m) *-assoc *> inv ldistr

    \lemma *-comm {n m : Nat} : n * m = m * n \elim n, m
      | 0, 0 => idp
      | suc n, 0 => *-comm
      | 0, suc m => *-comm
      | suc n, suc m => pmap suc (
        suc n * m + n   ==< pmap (\lam x => x + n) *-comm >==
        m * n + m + n   ==< +-assoc >==
        m * n + (m + n) ==< pmap2 (+) (inv *-comm) +-comm >==
        n * m + (n + m) ==< inv +-assoc >==
        n * m + n + m   ==< pmap (\lam x => x + m) *-comm >==
        suc m * n + m   `qed
      )

    \lemma <_+-left {n m k : Nat} (p : suc n <= m) : suc (n + k) <= m + k \elim k
      | 0 => p
      | suc k => suc<=suc (<_+-left p)

    \lemma <_*-left {n m k : Nat} (p : suc n <= m) (q : 1 <= k) : suc (n * k) <= m * k \elim k, q
      | 1, _ => transport2 (\lam t s => suc t <= s) (inv +-comm) (inv +-comm) p
      | suc (suc k), q => <=_+ (<=-transitive <=-suc (<_*-left p (suc<=suc zero<=_))) p
  }
