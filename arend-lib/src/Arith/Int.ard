\import Algebra.Domain
\import Algebra.Monoid
\import Algebra.Ordered.Strictly
\import Algebra.Semiring
\import Arith.Nat
\import Data.Or
\import Logic
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths

\func isuc (x : Int) : Int
  | pos n => pos (suc n)
  | neg (suc n) => neg n

\func ipred (x : Int) : Int
  | pos 0 => neg 1
  | pos (suc n) => pos n
  | neg n => neg (suc n)

\lemma ipred_isuc (x : Int) : ipred (isuc x) = x
  | pos n => idp
  | neg (suc n) => idp

\lemma isuc_ipred (x : Int) : isuc (ipred x) = x
  | pos 0 => idp
  | pos (suc n) => idp
  | neg n => idp

-- # Properties of <= and <

\open Nat.<=

\instance IntLE : TotalOrder Int
  | <= => <=
  | <=-reflexive _ => <=-refl
  | <=-transitive _ _ _ => <=-trans
  | <=-antisymmetric _ _ => <=-antisym
  | totality _ _ => total
  \where {
    \data \infix 4 <= (x y : Int) \with
      | pos n, pos m => pos<=pos (n Nat.<= m)
      | neg (suc _), pos _ => neg<=pos
      | neg (suc n), neg (suc m) => neg<=neg (m Nat.<= n)

    \lemma neg<=pos' {n m : Nat} : neg n <= pos m \elim n
      | 0 => pos<=pos zero<=_
      | suc n => neg<=pos

    \lemma neg<=neg' {n m : Nat} (p : m Nat.<= n) : neg n <= neg m \elim n, m, p
      | 0, 0, _ => pos<=pos zero<=_
      | suc n, 0, _ => neg<=pos
      | suc n, suc m, suc<=suc p => neg<=neg p

    \lemma <=-refl {x : Int} : x <= x \elim x
      | pos n => pos<=pos (<=-reflexive n)
      | neg (suc n) => neg<=neg (<=-reflexive n)

    \lemma <=-trans {x y z : Int} (p : x <= y) (q : y <= z) : x <= z \elim x, y, z, p, q
      | pos n, pos m, pos k, pos<=pos p, pos<=pos q => pos<=pos (<=-transitive n m k p q)
      | neg (suc n), _, pos k, _, _ => neg<=pos
      | neg (suc n), neg (suc m), neg (suc k), neg<=neg p, neg<=neg q => neg<=neg (<=-transitive k m n q p)

    \lemma <=-antisym {x y : Int} (p : x <= y) (q : y <= x) : x = y \elim x, y, p, q
      | pos n, pos m, pos<=pos p, pos<=pos q => pmap pos (<=-antisymmetric n m p q)
      | neg (suc n), neg (suc m), neg<=neg p, neg<=neg q => pmap neg (<=-antisymmetric (suc n) (suc m) (suc<=suc q) (suc<=suc p))

    \lemma total {x y : Int} : x <= y || y <= x \elim x, y
      | pos n, pos m => \case totality n m \with {
        | byLeft n<=m => byLeft (pos<=pos n<=m)
        | byRight m<=n => byRight (pos<=pos m<=n)
      }
      | neg (suc n), pos m => byLeft neg<=pos
      | pos n, neg (suc m) => byRight neg<=pos
      | neg (suc n), neg (suc m) => \case totality n m \with {
        | byLeft n<=m => byRight (neg<=neg n<=m)
        | byRight m<=n => byLeft (neg<=neg m<=n)
      }
  }

\open IntLE(pos<=pos, neg<=pos, neg<=pos', neg<=neg, neg<=neg', <=-refl, <=-trans)

\lemma <=-isuc {x : Int} : x <= isuc x \elim x
  | pos n => pos<=pos <=-suc
  | neg (suc n) => neg<=neg' <=-suc

-- # Properties of +, *, and <

\instance IntRing : DecOrderedCRing Int
  | zro => pos 0
  | + => +
  | zro-left _ => zero-left
  | +-assoc => i+-assoc
  | +-comm _ _ => i+-comm
  | ide => pos 1
  | * => *
  | ide-left _ => i1-left
  | *-assoc _ _ _ => i*-assoc
  | ldistr _ _ _ => ildistr
  | negative => ineg
  | negative-left _ => ineg-left
  | < x y => isuc x <= y
  | <-irreflexive _ => isuc_/<=_
  | <-transitive _ _ _ => <-transitive
  | trichotomy _ _ => tri
  | <_+-left _ _ _ => i<_+-left
  | zro<ide => pos<=pos (suc<=suc zero<=_)
  | positive_* _ _ => i*-positive
  | *-comm _ _ => i*-comm
  \where {
    \open Nat(-)
    \open IntLE

    -- ## +

    \lemma isuc_/<=_ {x : Int} (p : isuc x <= x) : Empty \elim x, p
      | pos n, pos<=pos p => <-irreflexive n p
      | neg 1, ()
      | neg (suc (suc n)), neg<=neg p => <-irreflexive n p

    \lemma <-transitive {x y z : Int} (p : isuc x <= y) (q : isuc y <= z) : isuc x <= z => <=-trans p (<=-trans <=-isuc q)

    \func tri {x y : Int} : (x = y) `Or` (isuc x <= y) `Or` (isuc y <= x) \elim x, y
      | pos n, pos m => \case trichotomy n m \with {
        | inl n=m => inl (pmap pos n=m)
        | inr (inl n<m) => inr (inl (pos<=pos n<m))
        | inr (inr m<n) => inr (inr (pos<=pos m<n))
      }
      | neg (suc n), pos m => inr (inl neg<=pos')
      | pos n, neg (suc m) => inr (inr neg<=pos')
      | neg (suc n), neg (suc m) => \case trichotomy n m \with {
        | inl n=m => inl (pmap (\lam t => neg (suc t)) n=m)
        | inr (inl n<m) => inr (inr (neg<=neg' n<m))
        | inr (inr m<n) => inr (inl (neg<=neg' m<n))
      }

    \func \infixl 6 + (x y : Int) : Int
      | pos n, pos m => pos (n Nat.+ m)
      | pos n, neg (suc m) => n - suc m
      | neg (suc n), pos m => m - suc n
      | neg (suc n), neg (suc m) => neg (suc n Nat.+ suc m)

    \lemma neg+neg {n m : Nat} : neg n + neg m = neg (n Nat.+ m) \elim n, m
      | 0, 0 => idp
      | 0, suc m => pmap (\lam t => neg (suc t)) (inv (zro-left m))
      | suc n, 0 => idp
      | suc n, suc m => idp

    \lemma lldistr (n m k : Nat) : (n Nat.+ m) - k = pos n + (m - k)
      | 0, 0, 0 => idp
      | suc n, 0, 0 => idp
      | n, 0, suc k => idp
      | n, suc m, 0 => idp
      | n, suc m, suc k => lldistr n m k

    \lemma lrdistr (n m k : Nat) : (n Nat.+ m) - k = (n - k) + pos m =>
      (n Nat.+ m) - k ==< pmap (\lam t => t - k) (+-comm n m) >==
      (m Nat.+ n) - k ==< lldistr m n k >==
      pos m + (n - k) ==< i+-comm >==
      (n - k) + pos m `qed

    \lemma rldistr (n m k : Nat) : n - (m Nat.+ k) = neg m + (n - k)
      | 0, m, k => inv neg+neg
      | suc n, 0, 0 => pmap (\lam t => pos (suc t)) (inv (zro-left n))
      | suc n, suc m, 0 => idp
      | suc n, m, suc k => rldistr n m k

    \lemma rrdistr (n m k : Nat) : n - (m Nat.+ k) = (n - m) + neg k =>
      n - (m Nat.+ k) ==< pmap (n -) (+-comm m k) >==
      n - (k Nat.+ m) ==< rldistr n k m >==
      neg k + (n - m) ==< i+-comm >==
      (n - m) + neg k `qed

    \lemma minus+pos (n m k : Nat) : (n - m) + pos k = pos n + (k - m)
      | 0, 0, 0 => idp
      | 0, 0, suc k => idp
      | 0, suc m, 0 => idp
      | 0, suc m, suc k => inv zero-left
      | suc n, 0, 0 => idp
      | suc n, 0, suc k => idp
      | suc n, suc m, 0 => i+-comm *> zero-left
      | suc n, suc m, suc k =>
        (n - m) + pos (suc k)  ==< suc-right >==
        isuc ((n - m) + pos k) ==< pmap isuc (minus+pos n m k) >==
        isuc (pos n + (k - m)) ==< inv suc-left >==
        pos (suc n) + (k - m)  `qed

    \lemma minus+neg (n m k : Nat) : (n - m) + neg k = neg m + (n - k)
      | 0, m, k => idp
      | suc n, 0, 0 => pmap (\lam t => pos (suc t)) (inv (zro-left n))
      | suc n, 0, suc k => inv zero-left
      | suc n, suc m, 0 => i+-comm *> zero-left
      | suc n, suc m, suc k =>
        (n - m) + neg (suc k)   ==< pred-right >==
        ipred ((n - m) + neg k) ==< pmap ipred (minus+neg n m k) >==
        ipred (neg m + (n - k)) ==< inv pred-left >==
        neg (suc m) + (n - k)   `qed

    \lemma minus__ {n : Nat} : n - n = 0 \elim n
      | 0 => idp
      | suc n => minus__

    \func ineg (x : Int) : Int
      | pos n => neg n
      | neg n => pos n

    \lemma ineg-left {x : Int} : ineg x + x = 0 \elim x
      | pos 0 => idp
      | pos (suc n) => minus__
      | neg (suc n) => minus__

    \lemma zero-left {x : Int} : 0 + x = x \elim x
      | pos n => pmap pos (zro-left n)
      | neg (suc n) => idp

    \lemma suc-left {x : Int} {n : Nat} : pos (suc n) + x = isuc (pos n + x) \elim x, n
      | pos m, n => pmap pos (+-comm (suc n) m *> pmap suc (+-comm m n))
      | neg 1, 0 => idp
      | neg 1, 1 => idp
      | neg 1, suc (suc n) => idp
      | neg (suc (suc m)), 0 => idp
      | neg (suc (suc m)), suc n => suc-left {neg (suc m)} {n}

    \lemma suc-right {x : Int} {n : Nat} : x + pos (suc n) = isuc (x + pos n) =>
      i+-comm *> suc-left {x} {n} *> pmap isuc i+-comm

    \lemma pred-left {x : Int} {n : Nat} : neg (suc n) + x = ipred (neg n + x) \elim x, n
      | pos 0, 0 => idp
      | pos 1, 0 => idp
      | pos (suc (suc m)), 0 => pmap (\lam t => pos (suc t)) (+-comm m 0)
      | pos 0, suc n => idp
      | pos 1, 1 => idp
      | pos 2, 1 => idp
      | pos (suc (suc (suc m))), 1 => idp
      | pos (suc m), suc (suc n) => pred-left {pos m} {suc n}
      | neg (suc m), 0 => pmap (\lam t => neg (suc t)) (+-comm 1 m)
      | neg (suc m), suc n => pmap (\lam t => neg (suc t)) (+-comm (suc (suc n)) m *> inv (pmap suc (+-comm (suc n) m)))

    \lemma pred-right {x : Int} {n : Nat} : x + neg (suc n) = ipred (x + neg n) =>
      i+-comm *> pred-left {x} {n} *> pmap ipred i+-comm

    \lemma i+-comm {x y : Int} : x + y = y + x \elim x, y
      | pos n, pos m => pmap pos (+-comm n m)
      | pos n, neg (suc m) => idp
      | neg (suc n), pos m => idp
      | neg (suc n), neg (suc m) => pmap neg (+-comm (suc n) (suc m))

    \lemma i+-assoc (x y z : Int) : (x + y) + z = x + (y + z)
      | pos n, pos m, pos k => pmap pos (+-assoc n m k)
      | pos n, pos m, neg (suc k) => lldistr n m (suc k)
      | pos n, neg (suc m), pos k => minus+pos n (suc m) k
      | pos n, neg (suc m), neg (suc k) => inv (rrdistr n (suc m) (suc k))
      | neg (suc n), pos m, pos k => inv (lrdistr m k (suc n))
      | neg (suc n), pos m, neg (suc k) => minus+neg m (suc n) (suc k)
      | neg (suc n), neg (suc m), pos k => rldistr k (suc n) (suc m)
      | neg (suc n), neg (suc m), neg (suc k) => pmap neg (+-assoc (suc n) (suc m) (suc k))

    -- ## *

    \func \infixl 7 * (x y : Int) : Int
      | pos n, pos m => pos (n Nat.* m)
      | pos n, neg m => neg (n Nat.* m)
      | neg (suc n), pos m => neg (suc n Nat.* m)
      | neg (suc n), neg m => pos (suc n Nat.* m)

    \lemma i1-left {x : Int} : 1 * x = x \elim x
      | pos n => pmap pos (ide-left n)
      | neg n => pmap neg (ide-left n)

    \lemma neg*pos {n m : Nat} : neg n * pos m = neg (n Nat.* m) \elim n, m
      | 0, 0 => idp
      | 0, suc m => neg*pos
      | suc n, _ => idp

    \lemma neg*neg {n m : Nat} : neg n * neg m = pos (n Nat.* m) \elim n, m
      | 0, 0 => idp
      | 0, suc m => neg*neg
      | suc n, _ => idp

    \lemma i*-comm {x y : Int} : x * y = y * x \elim x, y
      | pos n, pos m => pmap pos (*-comm n m)
      | pos n, neg (suc m) => pmap neg (*-comm n (suc m))
      | neg (suc n), pos m => pmap neg (*-comm (suc n) m)
      | neg (suc n), neg (suc m) => pmap pos (*-comm (suc n) (suc m))

    \lemma i*-assoc {x y z : Int} : (x * y) * z = x * (y * z) \elim x, y, z
      | pos n, pos m, pos k => pmap pos (*-assoc n m k)
      | pos n, pos m, neg k => pmap neg (*-assoc n m k)
      | pos n, neg m, pos k => neg*pos *> pmap neg (*-assoc n m k) *> pmap (pos n *) (inv (neg*pos {m} {k}))
      | pos n, neg m, neg k => neg*neg *> pmap pos (*-assoc n m k) *> pmap (pos n *) (inv neg*neg)
      | neg n, pos m, pos k => pmap (\lam t => t * pos k) (neg*pos {n} {m}) *> neg*pos *> pmap neg (*-assoc n m k) *> inv neg*pos
      | neg n, pos m, neg k => pmap (\lam t => t * neg k) (neg*pos {n} {m}) *> neg*neg *> pmap pos (*-assoc n m k) *> inv neg*neg
      | neg n, neg m, pos k => pmap (\lam t => t * pos k) neg*neg *> pmap pos (*-assoc n m k) *> inv (pmap (neg n *) neg*pos *> neg*neg)
      | neg n, neg m, neg k => pmap (\lam t => t * neg k) neg*neg *> pmap neg (*-assoc n m k) *> inv (pmap (neg n *) neg*neg *> neg*pos)

    \lemma pos_neg_+ {n m k : Nat} : pos (n Nat.+ k) + neg (m Nat.+ k) = pos n + neg m \elim n, m, k
      | _, 0, 0 => idp
      | 0, 0, 1 => idp
      | suc n, 0, 1 => idp
      | n, 0, suc (suc k) => pos_neg_+ {n} {0} {suc k}
      | n, suc m, 0 => idp
      | n, suc m, 1 => idp
      | n, suc m, suc (suc k) => pos_neg_+ {n} {suc m} {suc k}

    \lemma pos_minus-ldistr {n m k : Nat} : pos n * (m - k) = pos (n Nat.* m) + neg (n Nat.* k) \elim m, k
      | 0, 0 => idp
      | 0, suc k => inv zero-left
      | suc m, 0 => idp
      | suc m, suc k => pos_minus-ldistr *> inv (pos_neg_+ {n Nat.* m} {n Nat.* k} {n})

    \lemma neg_minus-ldistr {n m k : Nat} : neg n * (m - k) = neg (n Nat.* m) + pos (n Nat.* k) \elim m, k
      | 0, k => neg*neg *> pmap pos (inv (zro-left (n Nat.* k)))
      | suc m, 0 => neg*pos *> inv zero-left *> i+-comm
      | suc m, suc k => neg_minus-ldistr {n} {m} {k} *> i+-comm *> inv (pos_neg_+ {n Nat.* k} {n Nat.* m} {n}) *> i+-comm

    \lemma ildistr {x y z : Int} : x * (y + z) = x * y + x * z \elim x, y, z
      | pos n, pos m, pos k => pmap pos NatSemiring.ldistr
      | pos n, pos m, neg (suc k) => pos_minus-ldistr
      | pos n, neg (suc m), pos k => pos_minus-ldistr {n} {k} {suc m} *> i+-comm
      | pos 0, neg (suc m), neg (suc k) => pmap neg (zro_*-left (suc m Nat.+ k)) *> inv (pmap2 (\lam t1 t2 => neg t1 + neg t2) (zro_*-left m) (zro_*-left k))
      | pos (suc n), neg (suc m), neg (suc k) => pmap (\lam t => neg (suc t)) (pmap (\lam t => t Nat.+ n) NatSemiring.ldistr *> +-assoc (suc n Nat.* suc m) (suc n Nat.* k) n)
      | neg (suc n), pos m, pos k => pmap neg (ldistr (suc n) m k) *> inv (neg+neg {suc n Nat.* m} {suc n Nat.* k})
      | neg (suc n), pos m, neg (suc k) => neg_minus-ldistr
      | neg (suc n), neg (suc m), pos k => neg_minus-ldistr {suc n} {k} {suc m} *> i+-comm
      | neg (suc n), neg m, neg k => pmap (neg (suc n) *) (neg+neg {m} {k}) *> pmap pos (ldistr (suc n) m k)

    -- ## <

    \lemma i*-positive {x y : Int} (p : pos 1 <= x) (q : pos 1 <= y) : pos 1 <= x * y \elim x, y, p, q
      | pos (suc n), pos (suc m), pos<=pos _, pos<=pos _ => pos<=pos (suc<=suc zero<=_)
      | pos n, pos 0, pos<=pos _, pos<=pos ()
      | pos 0, pos m, pos<=pos (), _

    \lemma <_minus-left {n m k : Nat} (p : suc n Nat.<= m) : isuc (n - k) <= m - k \elim n, m, k, p
      | 0, suc m, 0, _ => pos<=pos (suc<=suc zero<=_)
      | 0, 1, 1, _ => pos<=pos (<=-reflexive 0)
      | 0, 1, suc (suc k), _ => neg<=neg (<=-reflexive k)
      | 0, suc (suc m), 1, _ => pos<=pos zero<=_
      | 0, suc (suc m), suc (suc k), _ => <=-trans (neg<=neg' <=-suc) (<_minus-left {0} {suc m} {suc k} (suc<=suc zero<=_))
      | suc n, suc m, 0, p => pos<=pos p
      | suc n, suc m, suc k, suc<=suc n<m => <_minus-left n<m

    \lemma <_minus-right {n m k : Nat} (p : suc k Nat.<= m) : isuc (n - m) <= n - k \elim n, m, k, p
      | 0, suc m, 0, _ => neg<=pos'
      | 0, suc m, suc k, suc<=suc k<m => neg<=neg' k<m
      | 1, 1, 0, _ => <=-refl
      | suc (suc n), 1, 0, _ => <=-refl
      | 1, suc (suc m), 0, _ => neg<=pos'
      | suc (suc n), suc (suc m), 0, _ => <=-trans (<_minus-right {suc n} {suc m} {0} (suc<=suc zero<=_)) (pos<=pos (suc<=suc <=-suc))
      | suc n, suc m, suc k, suc<=suc k<m => <_minus-right k<m

    \lemma i<_+-left {x y z : Int} (p : isuc x <= y) : isuc (x + z) <= y + z \elim x, y, z, p
      | pos x, pos y, pos z, pos<=pos x<y => pos<=pos (<_+-left x y z x<y)
      | pos x, pos y, neg (suc z), pos<=pos x<y => <_minus-left x<y
      | neg (suc x), pos y, pos 0, _ => neg<=pos'
      | neg 1, pos y, pos 1, _ => pos<=pos (suc<=suc zero<=_)
      | neg 1, pos y, pos (suc (suc z)), _ => pos<=pos (suc<=suc (suc<=suc (<=_0_+-left y)))
      | neg (suc (suc x)), pos y, pos (suc z), _ => <=-trans (i<_+-left {neg (suc x)} {pos y} {pos z} neg<=pos') (pos<=pos <=-suc)
      | neg (suc x), pos 0, neg (suc z), _ => neg<=neg' (transport (\lam t => suc z Nat.<= t) (+-comm z (suc x)) (suc<=suc (<=_0_+-right x)))
      | neg (suc x), pos 1, neg 1, _ => neg<=pos
      | neg (suc x), pos (suc (suc y)), neg 1, _ => neg<=pos
      | neg (suc x), pos (suc y), neg (suc (suc z)), _ => <=-trans (neg<=neg' (<=_+ (<=-reflexive (suc x)) <=-suc)) (i<_+-left {neg (suc x)} {pos y} {neg (suc z)} neg<=pos')
      | neg (suc (suc x)), neg (suc y), pos z, neg<=neg y<=x => <_minus-right (suc<=suc (suc<=suc y<=x))
      | neg (suc (suc x)), neg (suc y), neg (suc z), neg<=neg y<=x =>
        transport (\lam t => neg t <= neg (suc y Nat.+ suc z)) (pmap suc (+-comm (suc x) z) *> +-comm z (suc (suc x))) (neg<=neg (<=_+ (suc<=suc y<=x) (<=-reflexive z)))
  }

\func iabs (x : Int) : Nat
  | pos n => n
  | neg n => n

\instance IntDomain : DecIntegralDomain
  | CRing => IntRing
  | DecSet => IntRing
  | zro#ide zro=ide => suc/=0 (inv (pmap iabs zro=ide))
  | apartZeroProduct => nonZeroProduct
  \where {
    \lemma nonZeroProduct (x y : Int) (x/=0 : Not (x = 0)) (y/=0 : Not (y = 0)) (x*y=0 : x * y = 0) : Empty \elim x, y
      | pos 0, _ => x/=0 idp
      | _, pos 0 => y/=0 idp
      | pos (suc n), pos (suc m) => suc/=0 (pmap iabs x*y=0)
      | pos (suc n), neg (suc m) => suc/=0 (pmap iabs x*y=0)
      | neg (suc n), pos (suc m) => suc/=0 (pmap iabs x*y=0)
      | neg (suc n), neg (suc m) => suc/=0 (pmap iabs x*y=0)
  }
