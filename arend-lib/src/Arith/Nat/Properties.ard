\import Algebra.Monoid (AbMonoid,CMonoid)
\import Algebra.Ring
\import Algebra.Semiring
\import Arith.Nat
\import Paths
\import Set
\open Nat

-- # Properties of =

\func suc/=0 {n : Nat} (p : suc n = 0) {A : \Type} : A
  => coe (\lam i => \case p @ i \with { suc _ => Nat | 0 => A }) 0 right

\instance NatDecEq : DecideEq Nat
  | decideEq {x} {y} => decideEq x y
  \where
    \lemma decideEq (x y : Nat) : Dec (x = y)
      | 0, 0 => yes idp
      | 0, suc y => no (\lam p => suc/=0 (inv p))
      | suc x, 0 => no (\lam e => suc/=0 e)
      | suc x, suc y => \case decideEq x y \with {
        | yes p => yes (pmap suc p)
        | no e => no (\lam p => e (pmap pred p))
      }

-- # Properties of + and *

\instance NatSemiring : CSemiring Nat
  | addId => 0
  | + => +
  | addId-left _ => +-comm
  | +-assoc _ _ _ => +-assoc
  | +-comm _ _ => +-comm
  | id => 1
  | * => *
  | id-left _ => id-*
  | *-assoc _ _ _ => *-assoc
  | ldistr _ _ _ => ldistr
  | *-comm _ _ => *-comm
  | addId_*-left _ => *-comm
  \where {
    \lemma +-assoc {n m k : Nat} : (n + m) + k = n + (m + k) \elim k
      | 0 => idp
      | suc k => pmap suc +-assoc

    \lemma +-comm {n m : Nat} : n + m = m + n \elim n, m
      | 0, 0 => idp
      | suc n, 0 => pmap suc +-comm
      | 0, suc m => pmap suc +-comm
      | suc n, suc m => pmap suc (+-comm *> pmap suc (inv +-comm) *> +-comm)

    \lemma id-* {n : Nat} : 1 * n = n \elim n
      | 0 => idp
      | suc n => pmap suc id-*

    \lemma ldistr {n m k : Nat} : n * (m + k) = n * m + n * k \elim k
      | 0 => idp
      | suc k =>
        n * (m + k) + n     ==< pmap (\lam x => x + n) ldistr >==
        n * m + n * k + n   ==< +-assoc >==
        n * m + (n * k + n) `qed

    \lemma *-assoc {n m k : Nat} : (n * m) * k = n * (m * k) \elim k
      | 0 => idp
      | suc k => pmap (\lam x => x + n * m) *-assoc *> inv ldistr

    \lemma *-comm {n m : Nat} : n * m = m * n \elim n, m
      | 0, 0 => idp
      | suc n, 0 => *-comm
      | 0, suc m => *-comm
      | suc n, suc m => pmap suc (
        suc n * m + n   ==< pmap (\lam x => x + n) *-comm >==
        m * n + m + n   ==< +-assoc >==
        m * n + (m + n) ==< pmap2 (+) (inv *-comm) +-comm >==
        n * m + (n + m) ==< inv +-assoc >==
        n * m + n + m   ==< pmap (\lam x => x + m) *-comm >==
        suc m * n + m   `qed
      )
  }

\open NatSemiring (+-comm)

-- # Properties of <=

\func <=-refl {n : Nat} : n <= n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-refl

\func <=-trans {n m k : Nat} (p : n <= m) (q : m <= k) : n <= k \elim n, m, k, p, q
  | 0, _, _, _, _ => zero<=_
  | suc n, suc m, suc k, suc<=suc p, suc<=suc q => suc<=suc (<=-trans p q)

-- TODO: antisym, tri of <

\func <=-suc {n : Nat} : n <= suc n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-suc

\func +-<= {n : Nat} (m : Nat) : n <= n + m \elim m
  | 0 => <=-refl
  | suc m => <=-trans (+-<= m) <=-suc

\lemma <=-+ {n m : Nat} (p : n <= m) : n + (m - n) = m \elim n, m, p
  | 0, 0, _ => idp
  | 0, suc m, _ => pmap suc +-comm
  | suc n, suc m, suc<=suc p => +-comm *> pmap suc (+-comm *> <=-+ p)