\import Algebra.Field
\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Ordered
\import Arith.Int
\import Arith.Rat
\import Data.Or
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\open LinearOrder \hiding (<=)

\record LowerReal (L : Rat -> \Prop) {
  | L-inh : ∃ L
  | L-closed {q q' : Rat} : L q -> q' < q -> L q'
  | L-rounded {q : Rat} : L q -> ∃ (r : L) (q < r)

  \lemma L_<= {q r : Rat} (Lq : L q) (p : r <= q) : L r
    => \case <=-dec p \with {
      | inl r<q => L-closed Lq r<q
      | inr r=q => transportInv L r=q Lq
    }
}

\record UpperReal (U : Rat -> \Prop) {
  | U-inh : ∃ U
  | U-closed {q q' : Rat} : U q -> q < q' -> U q'
  | U-rounded {q : Rat} : U q -> ∃ (r : U) (r < q)

  \lemma U_<= {q r : Rat} (Uq : U q) (p : q <= r) : U r
    => \case <=-dec p \with {
      | inl q<r => U-closed Uq q<r
      | inr q=r => transport U q=r Uq
    }
}

\record Real \extends LowerReal, UpperReal {
  | LU-disjoint {q : Rat} : L q -> U q -> Empty
  | LU-located {q r : Rat} : q < r -> L q || U r
  | LU-focus (eps : Rat) : eps > 0 -> ∃ (a : L) (U (a + eps))

  \default LU-located {q} {r} q<r => \case LU-focus (r - q) (RatField.pos_>0 q<r) \with {
    | inP (s,Ls,Us+r-q) => \case trichotomy q s \with {
      | less q<s => byLeft (L-closed Ls q<s)
      | equals q=s => byLeft (transportInv L q=s Ls)
      | greater s<q => byRight $ U-closed Us+r-q $ transport (_ <) (equation : q + (r - q) = r) (<_+-left (r - q) s<q)
    }
  }

  \default L-inh => TruncP.map (LU-focus 1 idp) (\lam x => (x.1,x.2))

  \default U-inh => TruncP.map (LU-focus 1 idp) (\lam x => (x.1 + 1, x.3))

  \default LU-focus \as LU-focus-impl (eps : Rat) (eps>0 : eps > 0) : ∃ (a : L) (U (a + eps)) => \case L-inh, U-inh \with {
    | inP (q,Lq), inP (r,Ur) =>
      \let | m r q => (r - q) * finv 3
           | LU-less {q} {r} (Lq : L q) (Ur : U r) : q < r => \case dec<_<= q r \with {
             | inl q<r => q<r
             | inr r<=q => absurd $ LU-disjoint Lq (U_<= Ur r<=q)
           }
      \in \case focus-iter (ratio 3 2) rat_<=-dec (\lam q r => \Sigma (L q) (U r)) (\lam q r (Lq,Ur) => \case LU-located (linarith (usingOnly (LU-less Lq Ur))) \with {
        | byLeft Lq+m => inP (q + m r q, r, (Lq+m,Ur), linarith)
        | byRight Ur-m => inP (q, r - m r q, (Lq,Ur-m), linarith)
      }) (iabs $ rat_ceiling $ finv eps * (r - q)) q r (Lq,Ur) \with {
        | inP (q',r',(Lq',Ur'),p) => inP (q', Lq', U-closed Ur' $
          \have | r-q>0 {q} {r} (Lq : L q) (Ur : U r) : 0 < r - q => linarith (usingOnly (LU-less Lq Ur))
                | pr>0 => RatField.<_*_positive_positive (finv>0 eps>0) (r-q>0 Lq Ur)
                | c>0 => fromInt_<.conv $ pr>0 <∘l rat_ceiling>id
                | s : (r' - q') * (finv eps * (r - q)) < r - q
                    => <_*_positive-right (r-q>0 Lq' Ur') (rat_ceiling>id <∘r fromInt_<= (Preorder.=_<= $ inv $ iabs.ofPos $ <_<= c>0) <∘r pow>id _) <∘l p
                | t => transport (_ <) (pmap (_ *) finv_* *> inv *-assoc *> pmap (`* _) (finv-right $ RatField.>_/= $ r-q>0 Lq Ur) *> ide-left *> finv_finv) (<_rotate-right pr>0 s)
          \in linarith (usingOnly t))
      }
  }

  \lemma LU-less {q r : Rat} (Lq : L q) (Ur : U r) : q < r
    => \case dec<_<= q r \with {
      | inl q<r => q<r
      | inr r<=q => absurd $ LU-disjoint Lq (U_<= Ur r<=q)
    }
} \where {
  \open DiscreteOrderedField
  \open DiscreteField

  \func focus-iter (rat : Rat) (rat>=0 : 0 <= rat) (P : Rat -> Rat -> \Prop) (f : \Pi (q r : Rat) -> P q r -> ∃ (q' r' : P) ((r' - q') * rat <= r - q)) (n : Nat) (q r : Rat) (Pqr : P q r) : ∃ (q' r' : P) ((r' - q') * Monoid.pow rat n <= r - q) \elim n
    | 0 => inP (q, r, Pqr, transportInv (`<= _) ide-right <=-refl)
    | suc n => \case f q r Pqr \with {
      | inP (q',r',Pq'r',c) => \case focus-iter rat rat>=0 P f n q' r' Pq'r' \with {
        | inP (q'',r'',Pq''r'',d) => inP (q'', r'', Pq''r'', Preorder.=_<= (inv *-assoc) <=∘ RatField.<=_*_positive-left d rat>=0 <=∘ c)
      }
    }

  \lemma pow>id (n : Nat) : Monoid.pow (ratio 3 2) n > n \elim n
    | 0 => idp
    | 1 => idp
    | 2 => idp
    | suc (suc (suc n)) => linarith <∘r <_*_positive-left (pow>id (suc (suc n))) idp

  \use \coerce fromRat (x : Rat) : Real \cowith
    | L => `< x
    | L-closed s t => t <∘ s
    | L-rounded q<x => TruncP.map (isDense q<x) (\lam t => (t.1,t.3,t.2))
    | U => x <
    | U-closed => <∘
    | U-rounded => isDense
    | LU-disjoint q<x x<q => <-irreflexive (q<x <∘ x<q)
    | LU-focus eps eps>0 => inP (x - eps * finv 2, linarith, linarith)

  \lemma real_ext {x y : Real} (p : \Pi {a b : Rat} -> (\Sigma (x.L a) (x.U b)) <-> (\Sigma (y.L a) (y.U b))) : x = y
    => \case x.L-inh, x.U-inh, y.L-inh, y.U-inh \with {
      | inP (x1,x1<x), inP (x2,x<x2), inP (y1,y1<y), inP (y2,y<y2) =>
          ext (ext \lam z => ext (\lam z<x => (p.1 (z<x,x<x2)).1, \lam z<y => (p.2 (z<y,y<y2)).1),
               ext \lam z => ext (\lam x<z => (p.1 (x1<x,x<z)).2, \lam y<z => (p.2 (y1<y,y<z)).2))
    }
}

\instance RealPoset : UnboundedDenseLinearOrder Real
  | < (x y : Real) => ∃ (a : Rat) (x.U a) (y.L a)
  | <-irreflexive (inP (a,x<a,a<x)) => <-irreflexive (Real.LU-less a<x x<a)
  | <-transitive (inP (a,x<a,a<y)) (inP (b,y<b,b<z)) => inP (a, x<a, L-closed b<z $ Real.LU-less a<y y<b)
  | <-comparison y (inP (a,x<a,a<z)) => \case L-rounded a<z \with {
    | inP (b,b<z,a<b) => \case LU-located a<b \with {
      | byLeft a<y => byLeft $ inP (a, x<a, a<y)
      | byRight y<b => byRight $ inP (b, y<b, b<z)
    }
  }
  | <-connectedness p q => ext (ext \lam a => ext (\lam a<x => \case L-rounded a<x \with {
    | inP (b,b<x,a<b) => \case LU-located a<b \with {
      | byLeft a<y => a<y
      | byRight y<b => absurd $ q $ inP (b, y<b, b<x)
    }
  }, \lam a<y => \case L-rounded a<y \with {
    | inP (b,b<y,a<b) => \case LU-located a<b \with {
      | byLeft a<x => a<x
      | byRight x<b => absurd $ p $ inP (b, x<b, b<y)
    }
  }), ext \lam b => ext (\lam x<b => \case U-rounded x<b \with {
    | inP (a,x<a,a<b) => \case LU-located a<b \with {
      | byLeft a<y => absurd $ p $ inP (a, x<a, a<y)
      | byRight y<b => y<b
    }
  }, \lam y<b => \case U-rounded y<b \with {
    | inP (a,y<a,a<b) => \case LU-located a<b \with {
      | byLeft a<x => absurd $ q $ inP (a, y<a, a<x)
      | byRight x<b => x<b
    }
  }))
  | isDense (inP (a,x<a,a<z)) => inP (a, U-rounded x<a, TruncP.map (L-rounded a<z) \lam s => (s.1, s.3, s.2))
  | withoutUpperBound x => \case U-inh {x} \with {
    | inP (a,x<a) => inP (a, U-rounded x<a)
  }
  | withoutLowerBound x => \case L-inh {x} \with {
    | inP (a,a<x) => inP (a, TruncP.map (L-rounded a<x) \lam s => (s.1, s.3, s.2))
  }

\lemma real_<_L {a : Rat} {x : Real} (p : (a : Real) < x) : x.L a \elim p
  | inP (b,a<b,b<x) => L-closed b<x a<b

\lemma real_<_U {a : Rat} {x : Real} (p : x < a) : x.U a \elim p
  | inP (b,x<b,b<a) => U-closed x<b b<a

\lemma real_L_< {a : Rat} {x : Real} (a<x : x.L a) : (a : Real) < x
  => \case L-rounded a<x \with {
    | inP (b,b<x,a<b) => inP (b, a<b, b<x)
  }

\lemma real_U_< {a : Rat} {x : Real} (x<a : x.U a) : x < a
  => \case U-rounded x<a \with {
    | inP (b,x<b,b<a) => inP (b, x<b, b<a)
  }