\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring.Local
\import Data.Or
\import Logic
\import Paths
\import Relation.Apartness
\import Set
\open Monoid(Inv)

\class Field \extends LocalCRing
  | nonInvIsZero (x : E) : Not (Inv x) -> x = zro

\class DiscreteField \extends Field, DecSet {
  | eitherZeroOrInv (x : E) : (x = zro) `Or` (Inv x)

  | nonInvIsZero x xNotInv => \case eitherZeroOrInv x \with {
    | inl x=0 => x=0
    | inr xInv => absurd (xNotInv xInv)
  }
  | locality x y x+y=1 => \case eitherZeroOrInv x \with {
    | inl x=0 => byRight (Inv.lmake ide (
      ide * y ==< ide-left y >==
      y       ==< inv (zro-left y) >==
      zro + y ==< pmap (\lam t => t + y) (inv x=0) >==
      x + y   ==< x+y=1 >==
      ide     `qed))
    | inr xInv => byLeft xInv
  }
  | decideEq x y => \case eitherZeroOrInv (x - y) \with {
    | inl x-y=0 => yes (AddGroup.fromZero x y x-y=0)
    | inr x-y-isInv => no (\lam x=y => #-irreflexive {LocalRing.=>Apartness} y (transport (\lam t => Inv (t - y)) x=y x-y-isInv))
  }
}