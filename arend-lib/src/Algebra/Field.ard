\import Algebra.Domain
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Ring.Local
\import Logic
\import Paths
\import Set
\open Monoid(Inv)

-- | A field is a commutative local ring such that non-invertible elements equal to {zro}.
\class Field \extends LocalCRing, IntegralDomain
  | #0 x => Inv x
  | #0-+ => LocalRing.sumInv=>eitherInv
  | #0-zro (j : Inv zro) => zro/=ide (inv (zro_*-right j.inv) *> j.inv-left)
  | #0-*-left => Inv.cfactor-left
  | zro#ide => Inv.lmake ide (ide-left ide)
  | apartZeroProduct x y xj yj => Inv.product xj yj
  \where {
    \open AddGroup(negative-isInv)
    \open Ring
  }

-- | A discrete field is a commutative ring such that every element is either {zro} or invertible.
\class DiscreteField \extends Field, DecSet {
  | eitherZeroOrInv (x : E) : (x = zro) || (Inv x)

  | #0-tight x xNotInv => \case eitherZeroOrInv x \with {
    | byLeft x=0 => x=0
    | byRight xInv => absurd (xNotInv xInv)
  }
  | locality x => \case eitherZeroOrInv x \with {
    | byLeft x=0 => byRight (Inv.lmake ide (
        ide * (x + ide) ==< ide-left (x + ide) >==
        x + ide         ==< pmap (\lam t => t + ide) x=0 >==
        zro + ide       ==< zro-left ide >==
        ide             `qed))
    | byRight xInv => byLeft xInv
  }
  | decideEq x y => \case eitherZeroOrInv (x - y) \with {
    | byLeft x-y=0 => yes (AddGroup.fromZero x y x-y=0)
    | byRight x-y-isInv => no (\lam x=y => #-irreflexive y (transport (\lam t => Inv (t - y)) x=y x-y-isInv))
  }
}