\import Algebra.Pointed
\import Data.Or
\import Logic
\import Paths

\class Monoid \extends Pointed
  | \infixl 7 * : E -> E -> E
  | id-left (x : E) : id * x = x
  | id-right (x : E) : x * id = x
  | *-assoc (x y z : E) : (x * y) * z = x * (y * z)

\class AddMonoid \extends AddPointed => Monoid {
  | * => \infixl 6 +
  | id-left => addId-left
  | id-right => addId-right
  | *-assoc => +-assoc
}

\class CMonoid \extends Monoid {
  | *-comm (x y : E) : x * y = y * x
  | id-right x => *-comm x id *> id-left x
}

\class AbMonoid \extends AddMonoid => CMonoid {
  | *-comm => +-comm
}