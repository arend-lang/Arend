\import Algebra.Pointed
\import HLevel
\import Paths

\class Monoid \extends Pointed {
  | \infixl 7 * : E -> E -> E
  | ide-left (x : E) : ide * x = x
  | ide-right (x : E) : x * ide = x
  | *-assoc (x y z : E) : (x * y) * z = x * (y * z)
} \where {
  \func equals {M N : Monoid} (p : M = {\Set} N) (q : \let f x => coe (\lam i => p @ i) x right \in \Pi (x y : M) -> f (x * y) = f x * f y) : M = N
    => \let mp i => prop-equality p q @ i
       \in path (\lam i => \new Monoid (p @ i) (ide-equality p q @ i) (*-equality p q @ i) (ide-left {mp i}) (ide-right {mp i}) (*-assoc {mp i}))
    \where {
      \lemma ide-equality {M N : Monoid} (p : M = {\Set} N) (q : \let f x => coe (\lam i => p @ i) x right \in \Pi (x y : M) -> f (x * y) = f x * f y)
        : Path (\lam j => p @ j) M.ide N.ide
        => \let | f x => coe (\lam i => p @ i) x right
                | g y => coe (\lam i => inv p @ i) y right
                | fg y : f (g y) = y => transport_id_inv (\lam Z => Z) p y
                | r => f ide             ==< inv (ide-left (f ide)) >==
                       ide * f ide       ==< pmap (`* f ide) (inv (fg ide)) >==
                       f (g ide) * f ide ==< inv (q (g ide) ide) >==
                       f (g ide * ide)   ==< pmap f (ide-right (g ide)) >==
                       f (g ide)         ==< fg ide >==
                       ide               `qed
           \in pathOver {\lam j => p @ j} r

      \lemma *-equality {M N : Monoid} (p : M = {\Set} N) (q : \let f x => coe (\lam i => p @ i) x right \in \Pi (x y : M) -> f (x * y) = f x * f y)
        : Path (\lam j => p @ j -> p @ j -> p @ j) (M.*) (N.*)
        => \let | f x => coe (\lam i => p @ i) x right
                | g y => coe (\lam i => inv p @ i) y right
                | fg y : f (g y) = y => transport_id_inv (\lam Z => Z) p y
                | q' (x y : N) =>
                    coe (\lam i => p @ i -> p @ i -> p @ i) (*) right x y ==< pmap (\lam h => h y) (transport_pi (\lam Z => Z) (\lam Z => Z -> Z) p (*) x) >==
                    coe (\lam i => p @ i -> p @ i) (* (g x)) right y      ==< transport_pi (\lam Z => Z) (\lam Z => Z) p (* (g x)) y >==
                    f (g x * g y)                                         ==< q (g x) (g y) >==
                    f (g x) * f (g y)                                     ==< pmap2 (*) (fg x) (fg y) >==
                    x * y                                                 `qed
           \in pathOver {\lam j => p @ j -> p @ j -> p @ j} (path (\lam j x y => q' x y @ j))

      \lemma prop-equality {M N : Monoid} (p : M = {\Set} N) (q : \let f x => coe (\lam i => p @ i) x right \in \Pi (x y : M) -> f (x * y) = f x * f y)
        : Path (\lam j => Monoid (p @ j) (ide-equality p q @ j) (*-equality p q @ j)) (\new M) (\new N)
        => pathInProp (\lam i => Monoid (p @ i) (ide-equality p q @ i) (*-equality p q @ i)) (\new M) (\new N)
    }

  \func op (M : Monoid) : Monoid \cowith
    | Pointed => M
    | * x y => M.* y x
    | ide-left => M.ide-right
    | ide-right => M.ide-left
    | *-assoc x y z => inv (M.*-assoc z y x)

  \record DivBase {M : Monoid} (val elem inv : M)

  -- | The type of left divisors of an element
  \record LDiv \extends DivBase
    | inv-right : val * inv = elem
    \where {
      \func product-left {M : Monoid} (x y z : M) (y|z : LDiv y z) : LDiv (x * y) (x * z) \cowith
        | inv => y|z.inv
        | inv-right =>
            (x * y) * y|z.inv ==< *-assoc x y y|z.inv >==
            x * (y * y|z.inv) ==< pmap (x *) y|z.inv-right >==
            x * z             `qed

      \func product-right {M : CMonoid} (x y z : M) (x|y : LDiv x y) : LDiv (x * z) (y * z) \cowith
        | inv => x|y.inv
        | inv-right =>
            (x * z) * x|y.inv ==< pmap (`* x|y.inv) (*-comm x z) >==
            (z * x) * x|y.inv ==< *-assoc z x x|y.inv >==
            z * (x * x|y.inv) ==< pmap (z *) x|y.inv-right >==
            z * y             ==< *-comm z y >==
            y * z             `qed

      \func cancel-left {M : CancelMonoid} (x y z : M) (x*y|x*z : LDiv (x * y) (x * z)) : LDiv y z \cowith
        | inv => x*y|x*z.inv
        | inv-right => M.cancel-left x (y * x*y|x*z.inv) z (
            x * (y * x*y|x*z.inv) ==< Paths.inv (*-assoc x y x*y|x*z.inv) >==
            (x * y) * x*y|x*z.inv ==< x*y|x*z.inv-right >==
            x * z                 `qed)

      \func cancel-right {M : CancelCMonoid} (x y z : M) (x*z|y*z : LDiv (x * z) (y * z)) : LDiv x y \cowith
        | inv => x*z|y*z.inv
        | inv-right => M.cancel-right (x * x*z|y*z.inv) y z (
            (x * x*z|y*z.inv) * z ==< *-comm (x * x*z|y*z.inv) z >==
            z * (x * x*z|y*z.inv) ==< Paths.inv (*-assoc z x x*z|y*z.inv) >==
            (z * x) * x*z|y*z.inv ==< pmap (`* x*z|y*z.inv) (*-comm z x) >==
            (x * z) * x*z|y*z.inv ==< x*z|y*z.inv-right >==
            y * z                 `qed)

      \func trans {M : Monoid} (x y z : M) (x|y : LDiv x y) (y|z : LDiv y z) : LDiv x z \cowith
        | inv => x|y.inv * y|z.inv
        | inv-right =>
            x * (x|y.inv * y|z.inv) ==< Paths.inv (*-assoc _ _ _) >==
            (x * x|y.inv) * y|z.inv ==< pmap (`* y|z.inv) x|y.inv-right >==
            y * y|z.inv             ==< y|z.inv-right >==
            z                       `qed

      \lemma cancelProp {M : Monoid} (x : M) (q : \Pi (a b : M) -> x * a = x * b -> a = b) (y : M)
        : \level (HLevel.isProp (LDiv x y)) (HLevel.isProp.isProp (LDiv x y)) => \lam (d1 d2 : LDiv x y) =>
            \let p => q d1.inv d2.inv (d1.inv-right *> Paths.inv d2.inv-right)
            \in path (\lam i => \new LDiv x y (p @ i) (pathInProp (\lam j => x * (p @ j) = y) d1.inv-right d2.inv-right @ i))

      \use \level isProp {M : CancelMonoid} (x y : M) : HLevel.isProp (LDiv x y) => cancelProp x (M.cancel-left x) y
    }

  -- | The type of right divisors of an element
  \record RDiv \extends DivBase
    | inv-left : inv * val = elem
    \where {
      \func product-right {M : Monoid} (x y z : M) (x|y : RDiv x y) : RDiv (x * z) (y * z) \cowith
        | inv => x|y.inv
        | inv-left =>
            x|y.inv * (x * z) ==< Paths.inv (*-assoc x|y.inv x z) >==
            (x|y.inv * x) * z ==< pmap (`* z) x|y.inv-left >==
            y * z             `qed

      \func cancel-right {M : CancelMonoid} (x y z : M) (x*z|y*z : RDiv (x * z) (y * z)) : RDiv x y \cowith
        | inv => x*z|y*z.inv
        | inv-left => M.cancel-right (x*z|y*z.inv * x) y z (
            (x*z|y*z.inv * x) * z ==< *-assoc x*z|y*z.inv x z >==
            x*z|y*z.inv * (x * z) ==< x*z|y*z.inv-left >==
            y * z                 `qed)

      \func trans {M : Monoid} (x y z : M) (x|y : RDiv x y) (y|z : RDiv y z) : RDiv x z \cowith
        | inv => y|z.inv * x|y.inv
        | inv-left =>
            (y|z.inv * x|y.inv) * x ==< *-assoc _ _ _ >==
            y|z.inv * (x|y.inv * x) ==< pmap (y|z.inv *) x|y.inv-left >==
            y|z.inv * y             ==< y|z.inv-left >==
            z                       `qed

      \lemma isProp {M : CancelMonoid} (x y : M) : HLevel.isProp (RDiv x y) =>
        \lam (d1 d2 : RDiv x y) =>
            \let p => M.cancel-right d1.inv d2.inv x (d1.inv-left *> Paths.inv d2.inv-left)
            \in path (\lam i => \new RDiv x y (p @ i) (pathInProp (\lam j => (p @ j) * x = y) d1.inv-left d2.inv-left @ i))
    }

  -- | The type of left inverses of an element
  \record LInv \extends RDiv
    | elem => ide
    \where {
      \lemma cancel {M : Monoid} {x y z : M} (j : LInv x) (p : x * y = x * z) : y = z
        => y               ==< Paths.inv (ide-left y) >==
           ide * y         ==< Paths.inv (pmap (`* y) j.inv-left) >==
           (j.inv * x) * y ==< *-assoc j.inv x y >==
           j.inv * (x * y) ==< pmap (j.inv *) p >==
           j.inv * (x * z) ==< Paths.inv (*-assoc j.inv x z) >==
           (j.inv * x) * z ==< pmap (`* z) j.inv-left >==
           ide * z         ==< ide-left z >==
           z               `qed
    }

  -- | The type of right inverses of an element
  \record RInv \extends LDiv
    | elem => ide
    \where {
      \lemma cancel {M : Monoid} {x y z : M} (j : RInv z) (p : x * z = y * z) : x = y
        => x               ==< Paths.inv (ide-right x) >==
           x * ide         ==< Paths.inv (pmap (x *) j.inv-right) >==
           x * (z * j.inv) ==< Paths.inv (*-assoc x z j.inv) >==
           (x * z) * j.inv ==< pmap (`* j.inv) p >==
           (y * z) * j.inv ==< *-assoc y z j.inv >==
           y * (z * j.inv) ==< pmap (y *) j.inv-right >==
           y * ide         ==< ide-right y >==
           y               `qed
    }

  -- | The type of two-sided inverses of an element
  \record Inv \extends LInv, RInv
    \where {
      \use \level isProp {M : Monoid} {x : M} (j j' : Inv x) : j = j' =>
        \let p =>
          j.inv                ==< Paths.inv (ide-left j.inv) >==
          ide * j.inv          ==< pmap (`* j.inv) (Paths.inv j'.inv-left) >==
          (j'.inv * x) * j.inv ==< *-assoc j'.inv x j.inv >==
          j'.inv * (x * j.inv) ==< pmap (j'.inv *) j.inv-right >==
          j'.inv * ide         ==< ide-right j'.inv >==
          j'.inv               `qed
        \in path (\lam i => \new Inv x (p @ i)
                                     (pathInProp (\lam j => (p @ j) * x = ide) j.inv-left j'.inv-left @ i)
                                     (pathInProp (\lam j => x * (p @ j) = ide) j.inv-right j'.inv-right @ i))

      \lemma product {M : Monoid} (i j : Inv {M}) : Inv (i.val * j.val) => func i j
        \where {
          \func func {M : Monoid} (i j : Inv {M}) : Inv (i.val * j.val) \cowith
            | inv => j.inv * i.inv
            | inv-left => lem i j
            | inv-right => lem (\new Inv j.inv j.val j.inv-right j.inv-left) (\new Inv i.inv i.val i.inv-right i.inv-left)

          \lemma lem {M : Monoid} (i j : Inv {M}) : (j.inv * i.inv) * (i.val * j.val) = ide =>
            (j.inv * i.inv) * (i.val * j.val) ==< *-assoc j.inv i.inv (i.val * j.val) >==
            j.inv * (i.inv * (i.val * j.val)) ==< pmap (j.inv *) (Paths.inv (*-assoc i.inv i.val j.val)) >==
            j.inv * ((i.inv * i.val) * j.val) ==< pmap (\lam t => j.inv * (t * j.val)) i.inv-left >==
            j.inv * (ide * j.val)             ==< pmap (j.inv *) (ide-left j.val) >==
            j.inv * j.val                     ==< j.inv-left >==
            ide                               `qed
        }

      \lemma factor-right {M : Monoid} (x y : M) (i : LInv x) (j : Inv (x * y)) : Inv y \cowith
        | inv => j.inv * x
        | inv-left => *-assoc j.inv x y *> j.inv-left
        | inv-right =>
          y * (j.inv * x)                 ==< Paths.inv (ide-left (y * (j.inv * x))) >==
          ide * (y * (j.inv * x))         ==< pmap (`* (y * (j.inv * x))) (Paths.inv i.inv-left) >==
          (i.inv * x) * (y * (j.inv * x)) ==< *-assoc i.inv x (y * (j.inv * x)) >==
          i.inv * (x * (y * (j.inv * x))) ==< pmap (i.inv *) (Paths.inv (*-assoc x y (j.inv * x))) >==
          i.inv * ((x * y) * (j.inv * x)) ==< pmap (i.inv *) (Paths.inv (*-assoc (x * y) j.inv x)) >==
          i.inv * (((x * y) * j.inv) * x) ==< pmap (\lam t => i.inv * (t * x)) j.inv-right >==
          i.inv * (ide * x)               ==< pmap (i.inv *) (ide-left x) >==
          i.inv * x                       ==< i.inv-left >==
          ide                             `qed

      \lemma factor-left {M : Monoid} (x y : M) (i : RInv y) (j : Inv (x * y)) : Inv x =>
        \let t : Inv {op M} x => factor-right {op M} y x (\new LInv y i.inv i.inv-right) (\new Inv (x * y) j.inv j.inv-right j.inv-left)
        \in \new Inv t.val t.inv t.inv-right t.inv-left

      \func lmake {M : CMonoid} {x : M} (y : M) (p : y * x = ide) : Inv x \cowith
        | inv => y
        | inv-left => p
        | inv-right => *-comm x y *> p

      \func rmake {M : CMonoid} {x : M} (y : M) (p : x * y = ide) : Inv x \cowith
        | inv => y
        | inv-left => *-comm y x *> p
        | inv-right => p

      \func ldiv {M : CMonoid} (d : LDiv {M} { | elem => ide }) : Inv d.val \cowith
        | inv => d.inv
        | inv-left => *-comm d.inv d.val *> d.inv-right
        | inv-right => d.inv-right

      \func rdiv {M : CMonoid} (d : RDiv {M} { | elem => ide }) : Inv d.val \cowith
        | inv => d.inv
        | inv-left => d.inv-left
        | inv-right => *-comm d.val d.inv *> d.inv-left

      \lemma cfactor-right {M : CMonoid} (x y : M) (i : Inv (x * y)) : Inv y =>
        lmake (i.inv * x) (*-assoc i.inv x y *> i.inv-left)

      \lemma cfactor-left {M : CMonoid} (x y : M) (i : Inv (x * y)) : Inv x =>
        cfactor-right y x (transport (\lam t => Inv t) (*-comm x y) i)
    }
}

\class AddMonoid \extends AddPointed
  | \infixl 6 + : E -> E -> E
  | zro-left (x : E) : zro + x = x
  | zro-right (x : E) : x + zro = x
  | +-assoc (x y z : E) : (x + y) + z = x + (y + z)
  \where {
    \use \coerce fromMonoid (M : Monoid) => \new AddMonoid M.E M.ide (M.*) M.ide-left M.ide-right M.*-assoc
    \use \coerce toMonoid (M : AddMonoid) => \new Monoid M.E M.zro (M.+) M.zro-left M.zro-right M.+-assoc
  }

\class CMonoid \extends Monoid {
  | *-comm (x y : E) : x * y = y * x
  | ide-right x => *-comm x ide *> ide-left x
}

\class AbMonoid \extends AddMonoid
  | +-comm (x y : E) : x + y = y + x
  | zro-right x => +-comm x zro *> zro-left x
  \where {
    \use \coerce fromCMonoid (M : CMonoid) => \new AbMonoid M.E M.ide (M.*) M.ide-left M.*-assoc M.*-comm
    \use \coerce toCMonoid (M : AbMonoid) => \new CMonoid M.E M.zro (M.+) M.zro-left M.+-assoc M.+-comm
  }

\class CancelMonoid \extends Monoid
  | cancel-left (x y z : E) (p : x * y = x * z) : y = z
  | cancel-right (x y z : E) (p : x * z = y * z) : x = y

\class CancelCMonoid \extends CancelMonoid, CMonoid
  | cancel-right x y z x*z=y*z => cancel-left z x y (*-comm z x *> x*z=y*z *> *-comm y z)
