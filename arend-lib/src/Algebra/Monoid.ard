\import Algebra.Pointed
\import Paths

\class Monoid \extends Pointed {
  | \infixl 7 * : E -> E -> E
  | id-left (x : E) : id * x = x
  | id-right (x : E) : x * id = x
  | *-assoc (x y z : E) : (x * y) * z = x * (y * z)

  \func isInv (x : E) => \Sigma (y : E) (x * y = id) (y * x = id)
}

\class AddMonoid \extends AddPointed
  | \infixl 6 + : E -> E -> E
  | addId-left (x : E) : addId + x = x
  | addId-right (x : E) : x + addId = x
  | +-assoc (x y z : E) : (x + y) + z = x + (y + z)
  \where {
    \use \coerce fromMonoid (M : Monoid) => \new AddMonoid M.E M.id (M.*) M.id-left M.id-right M.*-assoc
    \use \coerce toMonoid (M : AddMonoid) => \new Monoid M.E M.addId (M.+) M.addId-left M.addId-right M.+-assoc
  }

\class CMonoid \extends Monoid {
  | *-comm (x y : E) : x * y = y * x
  | id-right x => *-comm x id *> id-left x

  \func isInv (x : E) => \Sigma (y : E) (x * y = id)
}

\class AbMonoid \extends AddMonoid
  | +-comm (x y : E) : x + y = y + x
  | addId-right x => +-comm x addId *> addId-left x
  \where {
    \use \coerce fromCMonoid (M : CMonoid) => \new AbMonoid M.E M.id (M.*) M.id-left M.*-assoc M.*-comm
    \use \coerce toCMonoid (M : AbMonoid) => \new CMonoid M.E M.addId (M.+) M.addId-left M.+-assoc M.+-comm
  }
