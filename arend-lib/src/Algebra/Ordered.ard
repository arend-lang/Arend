\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Semiring
\import Logic
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta

\open Monoid(Inv)
\open StrictPoset.Reasoning
\open LinearOrder (trichotomy)
\open AddGroup \hiding (cancel-left,cancel-right)

\class OrderedAddMonoid \extends StrictPoset, AddMonoid
  | <_+-left (x y z : E) : x < y -> x + z < y + z
  | <_+-right (x y z : E) : x < y -> z + x < z + y

\class OrderedAbMonoid \extends OrderedAddMonoid, AbMonoid
  | <_+-right x y z x<y => transport2 (<) (+-comm x z) (+-comm y z) (<_+-left x y z x<y)

\class OrderedAddGroup \extends OrderedAddMonoid, AddGroup {
  | isPos : E -> \Prop
  | zro/>0 : Not (isPos zro)
  | positive_+ (x y : E) : isPos x -> isPos y -> isPos (x + y)

  | < x y => isPos (y - x)
  | <-irreflexive x x<x => zro/>0 (transport isPos (negative-right x) x<x)
  | <-transitive x y z x<y y<z => transport isPos diff_+ (positive_+ (z - y) (y - x) y<z x<y)
  | <_+-left x y z x<y => transport isPos (inv (
      (y + z) - (x + z)          ==< pmap ((y + z) +) (negative_+ x z) >==
      (y + z) + (negative z - x) ==< +-assoc _ _ _ >==
      y + (z + (negative z - x)) ==< inv (pmap (y +) (+-assoc _ _ _)) >==
      y + ((z - z) - x)          ==< pmap (\lam t => y + (t - x)) (negative-right z) >==
      y + (zro - x)              ==< pmap (y +) (zro-left _) >==
      y - x                      `qed)) x<y

  | isNeg : E -> \Prop
  | isNeg x => isPos (negative x)

  \lemma fromNeg (x y : E) (x-y<0 : isNeg (x - y)) : x < y
    => transport isPos (negative_+ _ _ *> pmap (`- x) (negative-isInv y)) x-y<0

  \lemma toNeg (x y : E) (x<y : x < y) : isNeg (x - y)
    => transport isPos (inv (negative_+ _ _ *> pmap (`- x) (negative-isInv y))) x<y

  \lemma positive_negative (x : E) (x>0 : isPos x) : isNeg (negative x)
    => transport isPos (inv (negative-isInv x)) x>0

  \lemma negative_positive (x : E) (-x<0 : isNeg (negative x)) : isPos x
    => transport isPos (negative-isInv x) -x<0
} \where {
  \lemma diff_+ {A : AddGroup} {x y z : A} : (z - y) + (y - x) = z - x =>
    (z - y) + (y - x)          ==< +-assoc _ _ _ >==
    z + (negative y + (y - x)) ==< inv (pmap (z +) (+-assoc _ _ _)) >==
    z + ((negative y + y) - x) ==< pmap (\lam t => z + (t - x)) (negative-left y) >==
    z + (zro - x)              ==< pmap (z +) (zro-left _) >==
    z - x                      `qed
}

\class OrderedAbGroup \extends OrderedAbMonoid, OrderedAddGroup, AbGroup

\class OrderedSemiring \extends Semiring, OrderedAbMonoid
  | zro<ide : zro < ide
  | <_*_positive-left (x y z : E) : x < y -> z > zro -> x * z < y * z
  | <_*_positive-right (x y z : E) : x > zro -> y < z -> x * y < x * z
  | <_*_negative-left (x y z : E) : x < y -> z < zro -> x * z > y * z
  | <_*_negative-right (x y z : E) : x < zro -> y < z -> x * y > x * z

\class LinearlyOrderedSemiring \extends OrderedSemiring, LinearOrder {
  | <_+-cancel-left (x y z : E) : x + y < x + z -> y < z
  | <_+-cancel-right (x y z : E) : x + z < y + z -> x < y
  | <_*-cancel-left (x y z : E) : x * y < x * z -> (\Sigma (x > zro) (y < z)) || (\Sigma (x < zro) (y > z))
  | <_*-cancel-right (x y z : E) : x * z < y * z -> (\Sigma (z > zro) (x < y)) || (\Sigma (z < zro) (x > y))

  \class Dec \extends LinearlyOrderedSemiring, LinearOrder.Dec {
    | <_+-cancel-left x y z x+y<x+z => \case trichotomy y z \with {
      | byLeft y=z => absurd (<-irreflexive (x + z) (rewrite {1} y=z x+y<x+z))
      | byRight (byLeft y<z) => y<z
      | byRight (byRight y>z) => absurd (<-irreflexive (x + z) (<-transitive (x + z) (x + y) (x + z) (<_+-right z y x y>z) x+y<x+z))
    }
    | <_+-cancel-right x y z x+z<y+z => \case trichotomy x y \with {
      | byLeft x=y => absurd (<-irreflexive (y + z) (rewrite {1} x=y x+z<y+z))
      | byRight (byLeft x<y) => x<y
      | byRight (byRight x>y) => absurd (<-irreflexive (y + z) (<-transitive (y + z) (x + z) (y + z) (<_+-left y x z x>y) x+z<y+z))
    }
    | <_*-cancel-left x y z x*y<x*z => \case trichotomy x zro, trichotomy y z \with {
      | byLeft x=0, _ => absurd (<-irreflexive zro (transport2 (<) (zro_*-left y) (zro_*-left z) (rewrite x=0 x*y<x*z)))
      | _, byLeft y=z => absurd (<-irreflexive (x * z) (rewrite {1} y=z x*y<x*z))
      | byRight (byLeft x<0), byRight (byLeft y<z) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (x * y) (x * z) (<_*_negative-right x y z x<0 y<z) x*y<x*z))
      | byRight (byRight x>0), byRight (byLeft y<z) => byLeft (x>0, y<z)
      | byRight (byLeft x<0), byRight (byRight y>z) => byRight (x<0, y>z)
      | byRight (byRight x>0), byRight (byRight y>z) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (x * y) (x * z) (<_*_positive-right x z y x>0 y>z) x*y<x*z))
    }
    | <_*-cancel-right x y z x*z<y*z => \case trichotomy x y, trichotomy z zro \with {
      | byLeft x=y, _ => absurd (<-irreflexive (y * z) (rewrite {1} x=y x*z<y*z))
      | _, byLeft z=0 => absurd (<-irreflexive zro (transport2 (<) (zro_*-right x) (zro_*-right y) (rewrite z=0 x*z<y*z)))
      | byRight (byLeft x<y), byRight (byLeft z<0) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (y * z) (x * z) x*z<y*z (<_*_negative-left x y z x<y z<0)))
      | byRight (byLeft x<y), byRight (byRight z>0) => byLeft (z>0, x<y)
      | byRight (byRight x>y), byRight (byLeft z<0) => byRight (z<0, x>y)
      | byRight (byRight x>y), byRight (byRight z>0) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (y * z) (x * z) x*z<y*z (<_*_positive-left y x z x>y z>0)))
    }
  } \where {
    \class Impl \extends Dec, LinearOrder.Dec.Impl
  }
}

\class OrderedCSemiring \extends OrderedSemiring, CSemiring, OrderedAbMonoid
  | <_*_positive-right x y z x>0 y<z => transport2 (<) (*-comm y x) (*-comm z x) (<_*_positive-left y z x y<z x>0)
  | <_*_negative-right x y z x<0 y<z => transport2 (>) (*-comm y x) (*-comm z x) (<_*_negative-left y z x y<z x<0)

\class LinearlyOrderedCSemiring \extends LinearlyOrderedSemiring, OrderedCSemiring, OrderedAbMonoid
  | <_+-cancel-right x y z x+z<y+z => <_+-cancel-left z x y (transport2 (<) (+-comm x z) (+-comm y z) x+z<y+z)
  | <_*-cancel-right x y z x*z<y*z => <_*-cancel-left z x y (transport2 (<) (*-comm x z) (*-comm y z) x*z<y*z)
  \where {
    \class Dec \extends OrderedCSemiring, LinearlyOrderedSemiring.Dec
      \where
        \class Impl \extends Dec, LinearlyOrderedSemiring.Dec.Impl
  }

{- | An ordered ring is a linearly ordered domain such that the product of positive elements is positive
 -   and an element is apart from {zro} if and only if it is either positive or negative.
 -}
\class OrderedRing \extends Domain, LinearlyOrderedSemiring, OrderedAbGroup {
  | ide>zro : isPos ide
  | <_+-comparison (x y : E) : isPos (x + y) -> isPos x || isPos y
  | <_+-connectedness (x : E) : Not (isPos x) -> Not (isNeg x) -> x = zro
  | positive_* (x y : E) : isPos x -> isPos y -> isPos (x * y)
  | positive_*-cancel (x y : E) : isPos (x * y) -> (\Sigma (isPos x) (isPos y)) || (\Sigma (isNeg x) (isNeg y))
  | positive=>#0 (x : E) : isPos x -> x `#0
  | negative=>#0 (x : E) : isNeg x -> x `#0
  | #0=>eitherPosOrNeg (x : E) : x `#0 -> isPos x || isNeg x

  | negative_*-cancel (x y : E) : isNeg (x * y) -> (\Sigma (isPos x) (isNeg y)) || (\Sigma (isNeg x) (isPos y))
  | negative_*-cancel x y x*y<0 => ||.map (\lam t => (t.1, t.2))
                                          (\lam t => (t.1, negative_positive y t.2))
                                          (positive_*-cancel x (negative y) (transport isPos (inv (Ring.negative_*-right x y)) x*y<0))

  | positive_negative_* (x y : E) : isPos x -> isNeg y -> isNeg (x * y)
  | positive_negative_* x y x>0 y<0 => transport isPos (Ring.negative_*-right x y) (positive_* x (negative y) x>0 y<0)

  | negative_positive_* (x y : E) : isNeg x -> isPos y -> isNeg (x * y)
  | negative_positive_* x y x<0 y>0 => transport isPos (Ring.negative_*-left x y) (positive_* (negative x) y x<0 y>0)

  | negative_* (x y : E) : isNeg x -> isNeg y -> isPos (x * y)
  | negative_* x y x<0 y<0 => transport isPos (Ring.negative_* x y) (positive_* (negative x) (negative y) x<0 y<0)

  | zro<ide => transport isPos (inv (minus_zro ide)) ide>zro

  | <-comparison x y z x<z => \case <_+-comparison (z - y) (y - x) (transport isPos (inv OrderedAddGroup.diff_+) x<z) \with {
    | byLeft p => byRight p
    | byRight p => byLeft p
  }
  | <-connectedness x y x/<y y/<x => fromZero x y (<_+-connectedness (x - y) y/<x (\lam p => x/<y (fromNeg x y p)))

  | <_*_positive-left x y z x<y z>0 =>
    transport isPos (rdistr y (negative x) z *> pmap (y * z +) (Ring.negative_*-left x z))
              (positive_* (y - x) z x<y (transport isPos (minus_zro z) z>0))
  | <_*_positive-right x y z x>0 y<z =>
    transport isPos (ldistr x z (negative y) *> pmap (x * z +) (Ring.negative_*-right x y))
              (positive_* x (z - y) (transport isPos (minus_zro x) x>0) y<z)
  | <_*_negative-left x y z x<y z<0 =>
    transport isPos (rdistr _ _ _ *> pmap (x * z +) (Ring.negative_*-left y z))
              (negative_* (x - y) z (toNeg x y x<y) (transport isPos (zro-left _) z<0))
  | <_*_negative-right x y z x<0 y<z =>
    transport isPos (ldistr _ _ _ *> pmap (x * y +) (Ring.negative_*-right x z))
              (negative_* x (y - z) (transport isPos (zro-left _) x<0) (toNeg y z y<z))
  | <_+-cancel-left x y z x+y<x+z =>
    transport2 (<)
               (inv (+-assoc (negative x) x y) *> pmap (`+ y) (negative-left x) *> zro-left y)
               (inv (+-assoc (negative x) x z) *> pmap (`+ z) (negative-left x) *> zro-left z)
               (<_+-right (x + y) (x + z) (negative x) x+y<x+z)
  | <_+-cancel-right x y z x+z<y+z =>
    transport2 (<)
               (+-assoc x z (negative z) *> pmap (x +) (negative-right z) *> zro-right x)
               (+-assoc y z (negative z) *> pmap (y +) (negative-right z) *> zro-right y)
               (<_+-left (x + z) (y + z) (negative z) x+z<y+z)
  | <_*-cancel-left x y z x*y<x*z =>
    \let x*[z-y]>0 => transport isPos (inv (ldistr x z (negative y) *> pmap (x * z +) (Ring.negative_*-right x y))) x*y<x*z
    \in \case positive_*-cancel x (z - y) x*[z-y]>0 \with {
      | byLeft (x>0, z-y>0) => byLeft (transport isPos (inv (minus_zro x)) x>0, z-y>0)
      | byRight (x<0, z-y<0) => byRight (transport isPos (inv (zro-left _)) x<0, fromNeg z y z-y<0)
    }
  | <_*-cancel-right x y z x*z<y*z =>
    \let [y-x]*z>0 => transport isPos (inv (rdistr y (negative x) z *> pmap (y * z +) (Ring.negative_*-left x z))) x*z<y*z
    \in \case positive_*-cancel (y - x) z [y-x]*z>0 \with {
      | byLeft (y-x>0, z>0) => byLeft (transport isPos (inv (minus_zro z)) z>0, y-x>0)
      | byRight (y-x<0, z<0) => byRight (transport isPos (inv (zro-left _)) z<0, fromNeg y x y-x<0)
    }

  | #0-zro zro#0 => \case #0=>eitherPosOrNeg zro zro#0 \with {
    | byLeft zro>0 => zro/>0 zro>0
    | byRight zro>0 => zro/>0 (transport isPos negative_zro zro>0)
  }
  | #0-+ x y x+y#0 => \case #0=>eitherPosOrNeg (x + y) x+y#0 \with {
    | byLeft x+y>0 => ||.map (positive=>#0 x) (positive=>#0 y) (<_+-comparison x y x+y>0)
    | byRight x+y<0 => \case <_+-comparison (negative y) (negative x) (transport isPos (negative_+ x y) x+y<0) \with {
      | byLeft y<0 => byRight (negative=>#0 y y<0)
      | byRight x<0 => byLeft (negative=>#0 x x<0)
    }
  }
  | #0-tight x x/#0 => <_+-connectedness x (\lam x>0 => x/#0 (positive=>#0 x x>0)) (\lam x<0 => x/#0 (negative=>#0 x x<0))
  | #0-*-left x y x*y#0 => \case #0=>eitherPosOrNeg (x * y) x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x y x*y>0 \with {
        | byLeft (x>0, _) => positive=>#0 x x>0
        | byRight (x<0, _) => negative=>#0 x x<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x y x*y<0 \with {
        | byLeft (x>0, _) => positive=>#0 x x>0
        | byRight (x<0, _) => negative=>#0 x x<0
      }
  }
  | #0-*-right x y x*y#0 => \case #0=>eitherPosOrNeg (x * y) x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x y x*y>0 \with {
        | byLeft (_, y>0) => positive=>#0 y y>0
        | byRight (_, y<0) => negative=>#0 y y<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x y x*y<0 \with {
        | byLeft (_, y<0) => negative=>#0 y y<0
        | byRight (_, y>0) => positive=>#0 y y>0
      }
  }
  | zro#ide => positive=>#0 ide ide>zro
  | apartZeroProduct x y x#0 y#0 => \case #0=>eitherPosOrNeg x x#0, #0=>eitherPosOrNeg y y#0 \with {
    | byLeft x>0, byLeft y>0 => positive=>#0 (x * y) (positive_* x y x>0 y>0)
    | byLeft x>0, byRight y<0 => negative=>#0 (x * y) (positive_negative_* x y x>0 y<0)
    | byRight x<0, byLeft y>0 => negative=>#0 (x * y) (negative_positive_* x y x<0 y>0)
    | byRight x<0, byRight y<0 => positive=>#0 (x * y) (negative_* x y x<0 y<0)
  }

  \lemma positive_*-cancel-left {x y : E} (x*y>0 : isPos (x * y)) (y>0 : isPos y) : isPos x
    => \case positive_*-cancel x y x*y>0 \with {
      | byLeft (x>0, _) => x>0
      | byRight (_, -y>0) => absurd (zro/>0 (transport isPos (negative-right y) (positive_+ y (negative y) y>0 -y>0)))
    }
} \where {
  \open OrderedAddGroup(isNeg,toNeg,fromNeg,negative_positive,positive_negative)

  \class Impl \extends OrderedRing
    | #0 x => isPos x || isNeg x
    | positive=>#0 x => byLeft
    | negative=>#0 x => byRight
    | #0=>eitherPosOrNeg x x#0 => x#0

  \class Dec \extends OrderedRing, LinearlyOrderedSemiring.Dec, Domain.Dec
    | +_trichotomy (x : E) : (x = zro) || isPos x || isNeg x

    | trichotomy x y => \case +_trichotomy (x - y) \with {
      | byLeft x-y=0 => byLeft (fromZero x y x-y=0)
      | byRight (byLeft x-y>0) => byRight (byRight x-y>0)
      | byRight (byRight x-y<0) => byRight (byLeft (fromNeg x y x-y<0))
    }
    | <_+-comparison x y x+y>0 => \case +_trichotomy x \with {
      | byLeft x=0 => byRight (transport isPos (pmap (`+ y) x=0 *> zro-left y) x+y>0)
      | byRight (byLeft x>0) => byLeft x>0
      | byRight (byRight x<0) => byRight (transport isPos (inv (+-assoc _ _ _) *> pmap (`+ y) (negative-left x) *> zro-left y) (positive_+ (negative x) (x + y) x<0 x+y>0))
    }
    | <_+-connectedness x x/>0 x/<0 => \case +_trichotomy x \with {
      | byLeft x=0 => x=0
      | byRight (byLeft x>0) => absurd (x/>0 x>0)
      | byRight (byRight x<0) => absurd (x/<0 x<0)
    }
    | positive_*-cancel x y x*y>0 => \case +_trichotomy x, +_trichotomy y \with {
      | byLeft x=0, _ => absurd (zro/>0 (transport isPos (pmap (`* y) x=0 *> zro_*-left y) x*y>0))
      | _, byLeft y=0 => absurd (zro/>0 (transport isPos (pmap (x *) y=0 *> zro_*-right x) x*y>0))
      | byRight (byLeft x>0), byRight (byLeft y>0) => byLeft (x>0, y>0)
      | byRight (byLeft x>0), byRight (byRight y<0) => absurd (zro/>0 (transport isPos (negative-right _) (positive_+ (x * y) (negative (x * y)) x*y>0 (positive_negative_* x y x>0 y<0))))
      | byRight (byRight x<0), byRight (byLeft y>0) => absurd (zro/>0 (transport isPos (negative-right _) (positive_+ (x * y) (negative (x * y)) x*y>0 (negative_positive_* x y x<0 y>0))))
      | byRight (byRight x<0), byRight (byRight y<0) => byRight (x<0, y<0)
    }
    | nonEqualApart x x/=0 => \case +_trichotomy x \with {
      | byLeft x=0 => absurd (x/=0 x=0)
      | byRight (byLeft x>0) => positive=>#0 x x>0
      | byRight (byRight x<0) => negative=>#0 x x<0
    } \where
      \class Impl \extends Dec, Domain.Dec.Impl
        | positive=>#0 x x>0 x=0 => zro/>0 (transport isPos x=0 x>0)
        | negative=>#0 x x<0 x=0 => zro/>0 (transport isPos (pmap negative x=0 *> negative_zro) x<0)
        | #0=>eitherPosOrNeg x x/=0 => \case +_trichotomy x \with {
          | byLeft x=0 => absurd (x/=0 x=0)
          | byRight (byLeft x>0) => byLeft x>0
          | byRight (byRight x<0) => byRight x<0
        }
}

\class OrderedCRing \extends OrderedRing, IntegralDomain, OrderedCSemiring
  \where {
    \class Impl \extends OrderedCRing, OrderedRing.Impl

    \class Dec \extends OrderedCRing, OrderedRing.Dec, LinearlyOrderedCSemiring.Dec, IntegralDomain.Dec
      \where
        \class Impl \extends Dec, OrderedRing.Dec.Impl, IntegralDomain.Dec.Impl
  }

\class OrderedField \extends OrderedCRing, Field {
  | zro/=ide _0=1 => <-irreflexive ide (transport (`< ide) _0=1 zro<ide)
  | locality x => \case <_+-comparison (x + ide) (negative x) (transport isPos (inv (pmap (`- x) (+-comm x ide) *> +-assoc _ _ _ *> pmap (ide +) (negative-right x) *> zro-right ide)) ide>zro) \with {
    | byLeft x+1>0 => byRight (positive=>#0 (x + ide) x+1>0)
    | byRight x<0 => byLeft (negative=>#0 x x<0)
  }
  | positive_*-cancel x y x*y>0 =>
    \case #0=>eitherPosOrNeg x (Inv.cfactor-left x y (positive=>#0 (x * y) x*y>0)), #0=>eitherPosOrNeg y (Inv.cfactor-right x y (positive=>#0 (x * y) x*y>0)) \with {
      | byLeft x>0, byLeft y>0 => byLeft (x>0, y>0)
      | byLeft x>0, byRight y<0 => absurd (zro/>0 (transport isPos (negative-right _) (positive_+ (x * y) (negative (x * y)) x*y>0 (positive_negative_* x y x>0 y<0))))
      | byRight x<0, byLeft y>0 => absurd (zro/>0 (transport isPos (negative-right _) (positive_+ (x * y) (negative (x * y)) x*y>0 (negative_positive_* x y x<0 y>0))))
      | byRight x<0, byRight y<0 => byRight (x<0, y<0)
    }
  | negative=>#0 x x<0 => rewrite (negative-isInv x) (Ring.negative_inv (positive=>#0 (negative x) x<0))
}

\class DiscreteOrderedField \extends OrderedField, DiscreteField, OrderedCRing.Dec {
  | positive=>#0 x x>0 => \case eitherZeroOrInv x \with {
    | byLeft x=0 => absurd (zro/>0 (transport isPos x=0 x>0))
    | byRight x-isInv => x-isInv
  }
  | +_trichotomy x => \case eitherZeroOrInv x \with {
    | byLeft x=0 => byLeft x=0
    | byRight x-isInv => \case #0=>eitherPosOrNeg x x-isInv \with {
      | byLeft x>0 => byRight (byLeft x>0)
      | byRight x<0 => byRight (byRight x<0)
    }
  }
}
