\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Semiring
\import Data.Or
\import Logic
\import Meta
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta

\open Monoid(Inv)
\open StrictPoset.Reasoning
\open LinearOrder (trichotomy)
\open AddGroup \hiding (cancel-left,cancel-right)

\class OrderedAddMonoid \extends StrictPoset, AddMonoid
  | <_+-left (z : E) {x y : E} : x < y -> x + z < y + z
  | <_+-right (z : E) {x y : E} : x < y -> z + x < z + y

\class OrderedAbMonoid \extends OrderedAddMonoid, AbMonoid
  | <_+-right z x<y => transport2 (<) +-comm +-comm (<_+-left z x<y)

\class OrderedAddGroup \extends OrderedAddMonoid, AddGroup {
  | isPos : E -> \Prop
  | zro/>0 : Not (isPos zro)
  | positive_+ {x y : E} : isPos x -> isPos y -> isPos (x + y)

  | < x y => isPos (y - x)
  | <-irreflexive x<x => zro/>0 (transport isPos negative-right x<x)
  | <-transitive x<y y<z => transport isPos diff_+ (positive_+ y<z x<y)
  | <_+-left z {x} {y} x<y => transport isPos (inv (
      (y + z) - (x + z)          ==< pmap ((y + z) +) (negative_+ x z) >==
      (y + z) + (negative z - x) ==< +-assoc >==
      y + (z + (negative z - x)) ==< inv (pmap (y +) +-assoc) >==
      y + ((z - z) - x)          ==< pmap (y + (__ - x)) negative-right >==
      y + (zro - x)              ==< pmap (y +) zro-left >==
      y - x                      `qed)) x<y

  | isNeg : E -> \Prop
  | isNeg x => isPos (negative x)

  \lemma fromNeg {x y : E} (x-y<0 : isNeg (x - y)) : x < y
    => transport isPos (negative_+ _ _ *> pmap (`- x) (negative-isInv y)) x-y<0

  \lemma toNeg {x y : E} (x<y : x < y) : isNeg (x - y)
    => transport isPos (inv (negative_+ _ _ *> pmap (`- x) (negative-isInv y))) x<y

  \lemma positive_negative {x : E} (x>0 : isPos x) : isNeg (negative x)
    => transport isPos (inv (negative-isInv x)) x>0

  \lemma negative_positive {x : E} (-x<0 : isNeg (negative x)) : isPos x
    => transport isPos (negative-isInv x) -x<0
} \where {
  \lemma diff_+ {A : AddGroup} {x y z : A} : (z - y) + (y - x) = z - x =>
    (z - y) + (y - x)          ==< +-assoc >==
    z + (negative y + (y - x)) ==< inv (pmap (z +) +-assoc) >==
    z + ((negative y + y) - x) ==< pmap (z + (__ - x)) negative-left >==
    z + (zro - x)              ==< pmap (z +) zro-left >==
    z - x                      `qed
}

\class OrderedAbGroup \extends OrderedAbMonoid, OrderedAddGroup, AbGroup

\class OrderedSemiring \extends Semiring, OrderedAbMonoid
  | zro<ide : zro < ide
  | <_*_positive-left {x y z : E} : x < y -> z > zro -> x * z < y * z
  | <_*_positive-right {x y z : E} : x > zro -> y < z -> x * y < x * z
  | <_*_negative-left {x y z : E} : x < y -> z < zro -> x * z > y * z
  | <_*_negative-right {x y z : E} : x < zro -> y < z -> x * y > x * z

\class LinearlyOrderedSemiring \extends OrderedSemiring, LinearOrder {
  | <_+-cancel-left (x : E) {y z : E} : x + y < x + z -> y < z
  | <_+-cancel-right (z : E) {x y : E} : x + z < y + z -> x < y
  | <_*-cancel-left (x y z : E) : x * y < x * z -> (\Sigma (x > zro) (y < z)) || (\Sigma (x < zro) (y > z))
  | <_*-cancel-right (x y z : E) : x * z < y * z -> (\Sigma (z > zro) (x < y)) || (\Sigma (z < zro) (x > y))

  \lemma <=_+ {a b c d : E} (a<=b : a <= b) (c<=d : c <= d) : a + c <= b + d
    => notGreater (\case <-comparison (b + c) __ \with {
      | byLeft b+d<b+c => notLess c<=d (<_+-cancel-left b b+d<b+c)
      | byRight b+c<a+c => notLess a<=b (<_+-cancel-right c b+c<a+c)
    })

  \lemma <=_*_positive-left {x y z : E} (x<=y : x <= y) (z>=0 : 0 <= z) : x * z <= y * z
    => notGreater (\case <_*-cancel-right _ _ _ __ \with {
      | byLeft (_,y<x) => notLess x<=y y<x
      | byRight (z<0,_) => notLess z>=0 z<0
    })

  \lemma <=_*_positive-right {x y z : E} (x>=0 : 0 <= x) (y<=z : y <= z) : x * y <= x * z
    => notGreater (\case <_*-cancel-left _ _ _ __ \with {
      | byLeft (_,z<y) => notLess y<=z z<y
      | byRight (x<0,_) => notLess x>=0 x<0
    })

  \lemma <=_*_negative-left {x y z : E} (x<=y : x <= y) (z<=0 : z <= 0) : y * z <= x * z
    => notGreater (\case <_*-cancel-right _ _ _ __ \with {
      | byLeft (z>0,_) => notLess z<=0 z>0
      | byRight (_,x>y) => notLess x<=y x>y
    })

  \lemma <=_*_negative-right {x y z : E} (x<=0 : x <= 0) (y<=z : y <= z) : x * z <= x * y
    => notGreater (\case <_*-cancel-left _ _ _ __ \with {
      | byLeft (x>0,_) => notLess x<=0 x>0
      | byRight (_,z<y) => notLess y<=z z<y
    })

  \class Dec \extends LinearlyOrderedSemiring, LinearOrder.Dec {
    | <_+-cancel-left x {y} {z} x+y<x+z => \case trichotomy y z \with {
      | equals y=z => absurd (<-irreflexive (rewriteF y=z x+y<x+z))
      | less y<z => y<z
      | greater y>z => absurd (<-irreflexive (<-transitive (<_+-right x y>z) x+y<x+z))
    }
    | <_+-cancel-right z {x} {y} x+z<y+z => \case trichotomy x y \with {
      | equals x=y => absurd (<-irreflexive (rewriteF x=y x+z<y+z))
      | less x<y => x<y
      | greater x>y => absurd (<-irreflexive (<-transitive (<_+-left z x>y) x+z<y+z))
    }
    | <_*-cancel-left x y z x*y<x*z => \case trichotomy x zro, trichotomy y z \with {
      | equals x=0, _ => absurd (<-irreflexive (transport2 (<) zro_*-left zro_*-left (rewriteF x=0 x*y<x*z)))
      | _, equals y=z => absurd (<-irreflexive (rewriteF y=z x*y<x*z))
      | less x<0, less y<z => absurd (<-irreflexive (<-transitive (<_*_negative-right x<0 y<z) x*y<x*z))
      | greater x>0, less y<z => byLeft (x>0, y<z)
      | less x<0, greater y>z => byRight (x<0, y>z)
      | greater x>0, greater y>z => absurd (<-irreflexive (<-transitive (<_*_positive-right x>0 y>z) x*y<x*z))
    }
    | <_*-cancel-right x y z x*z<y*z => \case trichotomy x y, trichotomy z zro \with {
      | equals x=y, _ => absurd (<-irreflexive (rewriteF x=y x*z<y*z))
      | _, equals z=0 => absurd (<-irreflexive (transport2 (<) zro_*-right zro_*-right (rewriteF z=0 x*z<y*z)))
      | less x<y, less z<0 => absurd (<-irreflexive (<-transitive x*z<y*z (<_*_negative-left x<y z<0)))
      | less x<y, greater z>0 => byLeft (z>0, x<y)
      | greater x>y, less z<0 => byRight (z<0, x>y)
      | greater x>y, greater z>0 => absurd (<-irreflexive (<-transitive x*z<y*z (<_*_positive-left x>y z>0)))
    }
  }
} \where \open LinearOrder

\class OrderedCSemiring \extends OrderedSemiring, CSemiring, OrderedAbMonoid
  | <_*_positive-right x>0 y<z => transport2 (<) *-comm *-comm (<_*_positive-left y<z x>0)
  | <_*_negative-right x<0 y<z => transport2 (>) *-comm *-comm (<_*_negative-left y<z x<0)

\class LinearlyOrderedCSemiring \extends LinearlyOrderedSemiring, OrderedCSemiring, OrderedAbMonoid
  | <_+-cancel-right z x+z<y+z => <_+-cancel-left z (transport2 (<) +-comm +-comm x+z<y+z)
  | <_*-cancel-right x y z x*z<y*z => <_*-cancel-left z x y (transport2 (<) *-comm *-comm x*z<y*z)
  \where
    \class Dec \extends OrderedCSemiring, LinearlyOrderedSemiring.Dec

{- | An ordered ring is a linearly ordered domain such that the product of positive elements is positive
 -   and an element is apart from {zro} if and only if it is either positive or negative.
 -}
\class OrderedRing \extends Domain, LinearlyOrderedSemiring, OrderedAbGroup {
  | ide>zro : isPos ide
  | <_+-comparison (x y : E) : isPos (x + y) -> isPos x || isPos y
  | <_+-connectedness {x : E} : Not (isPos x) -> Not (isNeg x) -> x = zro
  | positive_* {x y : E} : isPos x -> isPos y -> isPos (x * y)
  | positive_*-cancel {x y : E} : isPos (x * y) -> (\Sigma (isPos x) (isPos y)) || (\Sigma (isNeg x) (isNeg y))
  | positive=>#0 {x : E} : isPos x -> x `#0
  | negative=>#0 {x : E} : isNeg x -> x `#0
  | #0=>eitherPosOrNeg {x : E} : x `#0 -> isPos x || isNeg x

  | negative_*-cancel {x y : E} : isNeg (x * y) -> (\Sigma (isPos x) (isNeg y)) || (\Sigma (isNeg x) (isPos y))
  | negative_*-cancel {x} {y} x*y<0 => ||.map (\lam t => (t.1, t.2))
                                              (\lam t => (t.1, negative_positive t.2))
                                              (positive_*-cancel (transport isPos (inv (Ring.negative_*-right x y)) x*y<0))

  | positive_negative_* {x y : E} : isPos x -> isNeg y -> isNeg (x * y)
  | positive_negative_* {x} {y} x>0 y<0 => transport isPos (Ring.negative_*-right x y) (positive_* x>0 y<0)

  | negative_positive_* {x y : E} : isNeg x -> isPos y -> isNeg (x * y)
  | negative_positive_* {x} {y} x<0 y>0 => transport isPos (Ring.negative_*-left x y) (positive_* x<0 y>0)

  | negative_* {x y : E} : isNeg x -> isNeg y -> isPos (x * y)
  | negative_* {x} {y} x<0 y<0 => transport isPos (Ring.negative_* x y) (positive_* x<0 y<0)

  | zro<ide => transport isPos (inv (minus_zro ide)) ide>zro

  | <-comparison y {x} {z} x<z => \case <_+-comparison (z - y) (y - x) (transport isPos (inv OrderedAddGroup.diff_+) x<z) \with {
    | byLeft p => byRight p
    | byRight p => byLeft p
  }
  | <-connectedness x/<y y/<x => fromZero _ _ (<_+-connectedness y/<x (\lam p => x/<y (fromNeg p)))

  | <_*_positive-left {x} {y} {z} x<y z>0 =>
    transport isPos (rdistr *> pmap (y * z +) (Ring.negative_*-left x z))
              (positive_* x<y (transport isPos (minus_zro z) z>0))
  | <_*_positive-right {x} {y} {z} x>0 y<z =>
    transport isPos (ldistr *> pmap (x * z +) (Ring.negative_*-right x y))
              (positive_* (transport isPos (minus_zro x) x>0) y<z)
  | <_*_negative-left {x} {y} {z} x<y z<0 =>
    transport isPos (rdistr *> pmap (x * z +) (Ring.negative_*-left y z))
              (negative_* (toNeg x<y) (transport isPos zro-left z<0))
  | <_*_negative-right {x} {y} {z} x<0 y<z =>
    transport isPos (ldistr *> pmap (x * y +) (Ring.negative_*-right x z))
              (negative_* (transport isPos zro-left x<0) (toNeg y<z))
  | <_+-cancel-left x {y} {z} x+y<x+z =>
    transport2 (<)
               (inv +-assoc *> pmap (`+ y) negative-left *> zro-left)
               (inv +-assoc *> pmap (`+ z) negative-left *> zro-left)
               (<_+-right (negative x) x+y<x+z)
  | <_+-cancel-right z {x} {y} x+z<y+z =>
    transport2 (<)
               (+-assoc *> pmap (x +) negative-right *> zro-right)
               (+-assoc *> pmap (y +) negative-right *> zro-right)
               (<_+-left (negative z) x+z<y+z)
  | <_*-cancel-left x y z x*y<x*z =>
    \have x*[z-y]>0 => transport isPos (inv (ldistr *> pmap (x * z +) (Ring.negative_*-right x y))) x*y<x*z
    \in \case positive_*-cancel x*[z-y]>0 \with {
      | byLeft (x>0, z-y>0) => byLeft (transport isPos (inv (minus_zro x)) x>0, z-y>0)
      | byRight (x<0, z-y<0) => byRight (transport isPos (inv zro-left) x<0, fromNeg z-y<0)
    }
  | <_*-cancel-right x y z x*z<y*z =>
    \have [y-x]*z>0 => transport isPos (inv (rdistr *> pmap (y * z +) (Ring.negative_*-left x z))) x*z<y*z
    \in \case positive_*-cancel [y-x]*z>0 \with {
      | byLeft (y-x>0, z>0) => byLeft (transport isPos (inv (minus_zro z)) z>0, y-x>0)
      | byRight (y-x<0, z<0) => byRight (transport isPos (inv zro-left) z<0, fromNeg y-x<0)
    }

  | #0-zro zro#0 => \case #0=>eitherPosOrNeg zro#0 \with {
    | byLeft zro>0 => zro/>0 zro>0
    | byRight zro>0 => zro/>0 (transport isPos negative_zro zro>0)
  }
  | #0-+ x y x+y#0 => \case #0=>eitherPosOrNeg x+y#0 \with {
    | byLeft x+y>0 => ||.map positive=>#0 positive=>#0 (<_+-comparison x y x+y>0)
    | byRight x+y<0 => \case <_+-comparison (negative y) (negative x) (transport isPos (negative_+ x y) x+y<0) \with {
      | byLeft y<0 => byRight (negative=>#0 y<0)
      | byRight x<0 => byLeft (negative=>#0 x<0)
    }
  }
  | #0-tight x/#0 => <_+-connectedness (\lam x>0 => x/#0 (positive=>#0 x>0)) (\lam x<0 => x/#0 (negative=>#0 x<0))
  | #0-*-left x*y#0 => \case #0=>eitherPosOrNeg x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x*y>0 \with {
        | byLeft (x>0, _) => positive=>#0 x>0
        | byRight (x<0, _) => negative=>#0 x<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x*y<0 \with {
        | byLeft (x>0, _) => positive=>#0 x>0
        | byRight (x<0, _) => negative=>#0 x<0
      }
  }
  | #0-*-right x*y#0 => \case #0=>eitherPosOrNeg x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x*y>0 \with {
        | byLeft (_, y>0) => positive=>#0 y>0
        | byRight (_, y<0) => negative=>#0 y<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x*y<0 \with {
        | byLeft (_, y<0) => negative=>#0 y<0
        | byRight (_, y>0) => positive=>#0 y>0
      }
  }
  | zro#ide => positive=>#0 ide>zro
  | apartZeroProduct x#0 y#0 => \case #0=>eitherPosOrNeg x#0, #0=>eitherPosOrNeg y#0 \with {
    | byLeft x>0, byLeft y>0 => positive=>#0 (positive_* x>0 y>0)
    | byLeft x>0, byRight y<0 => negative=>#0 (positive_negative_* x>0 y<0)
    | byRight x<0, byLeft y>0 => negative=>#0 (negative_positive_* x<0 y>0)
    | byRight x<0, byRight y<0 => positive=>#0 (negative_* x<0 y<0)
  }

  \default #0 x : \Prop => isPos x || isNeg x
  \default positive=>#0 \as positive=>#0Impl {x} : isPos x -> #0 x => byLeft
  \default negative=>#0 \as negative=>#0Impl {x} : isNeg x -> #0 x => byRight
  \default #0=>eitherPosOrNeg \as #0=>eitherPosOrNegImpl {x} (x#0 : #0 x) => x#0

  \lemma positive_*-cancel-left {x y : E} (x*y>0 : isPos (x * y)) (y>0 : isPos y) : isPos x
    => \case positive_*-cancel x*y>0 \with {
      | byLeft (x>0, _) => x>0
      | byRight (_, -y>0) => absurd (zro/>0 (transport isPos negative-right (positive_+ y>0 -y>0)))
    }
} \where {
  \open OrderedAddGroup(isNeg,toNeg,fromNeg,negative_positive)

  -- TODO: \use \level instead of \truncated
  \truncated \data Tri {A : OrderedAddGroup} (x : A) : \Prop
    | triZro (x = 0)
    | triPos (isPos x)
    | triNeg (isNeg x)

  \class Dec \extends Domain.Dec, OrderedRing, LinearlyOrderedSemiring.Dec {
    \field +_trichotomy (x : E) : Tri x

    | trichotomy x y => \case +_trichotomy (x - y) \with {
      | triZro x-y=0 => equals (fromZero x y x-y=0)
      | triPos x-y>0 => greater x-y>0
      | triNeg x-y<0 => less (fromNeg x-y<0)
    }
    | <_+-comparison x y x+y>0 => \case +_trichotomy x \with {
      | triZro x=0 => byRight (transport isPos (pmap (`+ y) x=0 *> zro-left) x+y>0)
      | triPos x>0 => byLeft x>0
      | triNeg x<0 => byRight (transport isPos (inv +-assoc *> pmap (`+ y) negative-left *> zro-left) (positive_+ x<0 x+y>0))
    }
    | <_+-connectedness {x} x/>0 x/<0 => \case +_trichotomy x \with {
      | triZro x=0 => x=0
      | triPos x>0 => absurd (x/>0 x>0)
      | triNeg x<0 => absurd (x/<0 x<0)
    }
    | positive_*-cancel {x} {y} x*y>0 => \case +_trichotomy x, +_trichotomy y \with {
      | triZro x=0, _ => absurd (zro/>0 (transport isPos (pmap (`* y) x=0 *> zro_*-left) x*y>0))
      | _, triZro y=0 => absurd (zro/>0 (transport isPos (pmap (x *) y=0 *> zro_*-right) x*y>0))
      | triPos x>0, triPos y>0 => byLeft (x>0, y>0)
      | triPos x>0, triNeg y<0 => absurd (zro/>0 (transport isPos negative-right (positive_+ x*y>0 (positive_negative_* x>0 y<0))))
      | triNeg x<0, triPos y>0 => absurd (zro/>0 (transport isPos negative-right (positive_+ x*y>0 (negative_positive_* x<0 y>0))))
      | triNeg x<0, triNeg y<0 => byRight (x<0, y<0)
    }
    | nonEqualApart {x} x/=0 => \case +_trichotomy x \with {
      | triZro x=0 => absurd (x/=0 x=0)
      | triPos x>0 => positive=>#0 x>0
      | triNeg x<0 => negative=>#0 x<0
    }

    \default positive=>#0 {x} (x>0 : isPos x) : AddGroup.Dec.#0 x => \lam x=0 => zro/>0 (transport isPos x=0 x>0)
    \default negative=>#0 {x} (x<0 : isNeg x) : AddGroup.Dec.#0 x => \lam x=0 => zro/>0 (transport isPos (pmap negative x=0 *> negative_zro) x<0)
    \default #0=>eitherPosOrNeg {x} (x#0 : AddGroup.Dec.#0 x) : isPos x || isNeg x => \case +_trichotomy x \with {
      | triZro x=0 => absurd (transport AddGroup.Dec.#0 x=0 x#0 idp)
      | triPos x>0 => byLeft x>0
      | triNeg x<0 => byRight x<0
    }
  }
}

\class OrderedCRing \extends OrderedRing, IntegralDomain, OrderedCSemiring
  \where
    \class Dec \extends OrderedRing.Dec, OrderedCRing, LinearlyOrderedCSemiring.Dec, IntegralDomain.Dec

\class OrderedField \extends OrderedCRing, Field {
  | zro/=ide _0=1 => <-irreflexive (transport (`< ide) _0=1 zro<ide)
  | locality x => \case <_+-comparison (x + ide) (negative x) (transport isPos (inv (pmap (`- x) +-comm *> +-assoc *> pmap (ide +) negative-right *> zro-right)) ide>zro) \with {
    | byLeft x+1>0 => byRight (positive=>#0 x+1>0)
    | byRight x<0 => byLeft (negative=>#0 x<0)
  }
  | positive_*-cancel {x} {y} x*y>0 =>
    \case #0=>eitherPosOrNeg (Inv.cfactor-left x y (positive=>#0 x*y>0)), #0=>eitherPosOrNeg (Inv.cfactor-right x y (positive=>#0 x*y>0)) \with {
      | byLeft x>0, byLeft y>0 => byLeft (x>0, y>0)
      | byLeft x>0, byRight y<0 => absurd (zro/>0 (transport isPos negative-right (positive_+ x*y>0 (positive_negative_* x>0 y<0))))
      | byRight x<0, byLeft y>0 => absurd (zro/>0 (transport isPos negative-right (positive_+ x*y>0 (negative_positive_* x<0 y>0))))
      | byRight x<0, byRight y<0 => byRight (x<0, y<0)
    }
  | negative=>#0 x<0 => transport #0 (negative-isInv _) (Ring.negative_inv (positive=>#0 x<0))
}

\class DiscreteOrderedField \extends OrderedCRing.Dec, OrderedField, DiscreteField {
  | positive=>#0 {x} x>0 => \case eitherZeroOrInv x \with {
    | inl x=0 => absurd (zro/>0 (transport isPos x=0 x>0))
    | inr x-isInv => x-isInv
  }
  | +_trichotomy x => \case eitherZeroOrInv x \with {
    | inl x=0 => OrderedRing.triZro x=0
    | inr x-isInv => \case #0=>eitherPosOrNeg x-isInv \with {
      | byLeft x>0 => OrderedRing.triPos x>0
      | byRight x<0 => OrderedRing.triNeg x<0
    }
  }
}
