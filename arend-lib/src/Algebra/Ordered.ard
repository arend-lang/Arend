\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Semiring
\import Logic
\import Order.LinearOrder
\open LinearOrder (trichotomy)
\import Order.StrictOrder
\import Paths

\open Monoid(Inv)
\open OrderedAddMonoid(isPos,isNeg)
\open StrictPoset.Reasoning

\class OrderedAddMonoid \extends StrictPoset, AddMonoid {
  | <_+-left (x y z : E) : x < y -> x + z < y + z
  | <_+-right (x y z : E) : x < y -> z + x < z + y

  \func isPos (x : E) => x > zro
  \func isNeg (x : E) => x < zro
}

\class OrderedAbMonoid \extends OrderedAddMonoid, AbMonoid
  | <_+-right x y z x<y => transport2 (<) (+-comm x z) (+-comm y z) (<_+-left x y z x<y)

\class OrderedAddGroup \extends OrderedAddMonoid, AddGroup {
  \lemma fromPos (x y : E) (x-y>0 : isPos (x - y)) : x > y =>
    y                    ==< inv (zro-left y) >=>
    zro + y              <<< <_+-left zro (x - y) y x-y>0 >>=
    x - y + y            ==< +-assoc x (negative y) y >==
    x + (negative y + y) ==< pmap (\lam t => x + t) (negative-left y) >==
    x + zro              ==< zro-right x >==
    x                    `qed

  \lemma fromNeg (x y : E) (x-y<0 : isNeg (x - y)) : x < y =>
    x                    ==< inv (zro-right x) >=>
    x + zro              ==< pmap (\lam t => x + t) (inv (negative-left y)) >=>
    x + (negative y + y) ==< inv (+-assoc x (negative y) y) >=>
    x - y + y            <<< <_+-left (x - y) zro y x-y<0 >>=
    zro + y              ==< zro-left y >==
    y                    `qed

  \lemma toPos (x y : E) (x>y : x > y) : isPos (x - y) =>
    transport (\lam t => x - y > t) (negative-right y) (<_+-left y x (negative y) x>y)

  \lemma toNeg (x y : E) (x<y : x < y) : isNeg (x - y) =>
    transport (\lam t => x - y < t) (negative-right y) (<_+-left x y (negative y) x<y)

  \lemma positive_negative (x : E) (x>0 : x > zro) : negative x < zro =>
    transport2 (<) (zro-right (negative x)) (negative-left x) (<_+-right zro x (negative x) x>0)

  \lemma negative_positive (x : E) (x<0 : x < zro) : negative x > zro =>
    transport2 (<) (negative-left x) (zro-right (negative x)) (<_+-right x zro (negative x) x<0)
}

\class OrderedAbGroup \extends OrderedAbMonoid, OrderedAddGroup, AbGroup

\class OrderedSemiring \extends Semiring, OrderedAbMonoid {
  | zro<ide : zro < ide
  | <_*_positive-left (x y z : E) : x < y -> isPos z -> x * z < y * z
  | <_*_positive-right (x y z : E) : isPos x -> y < z -> x * y < x * z
  | <_*_negative-left (x y z : E) : x < y -> isNeg z -> x * z > y * z
  | <_*_negative-right (x y z : E) : isNeg x -> y < z -> x * y > x * z

  \lemma positive_negative_* (x y : E) (x>0 : isPos x) (y<0 : isNeg y) : isNeg (x * y) =>
    transport (x * y <) (zro_*-right x) (<_*_positive-right x y zro x>0 y<0)

  \lemma negative_positive_* (x y : E) (x<0 : isNeg x) (y>0 : isPos y) : isNeg (x * y) =>
    transport (x * y <) (zro_*-left y) (<_*_positive-left x zro y x<0 y>0)

  \lemma negative_* (x y : E) (x<0 : isNeg x) (y<0 : isNeg y) : isPos (x * y) =>
    transport (x * y >) (zro_*-left y) (<_*_negative-left x zro y x<0 y<0)
}

\class LinearlyOrderedSemiring \extends OrderedSemiring, LinearOrder {
  | <_+-cancel-left (x y z : E) : x + y < x + z -> y < z
  | <_+-cancel-right (x y z : E) : x + z < y + z -> x < y
  | <_*-cancel-left (x y z : E) : x * y < x * z -> (\Sigma (x > zro) (y < z)) || (\Sigma (x < zro) (y > z))
  | <_*-cancel-right (x y z : E) : x * z < y * z -> (\Sigma (z > zro) (x < y)) || (\Sigma (z < zro) (x > y))

  \lemma +_positive (x y : E) (x+y>0 : isPos (x + y)) : isPos x || isPos y
    => \case <-comparison zro x (x + y) x+y>0 \with {
      | byLeft x>0 => byLeft x>0
      | byRight x+y>x => byRight (<_+-cancel-left x zro y (transport (x + y >) (inv (zro-right x)) x+y>x))
    }

  \lemma +_negative (x y : E) (x+y<0 : isNeg (x + y)) : isNeg x || isNeg y
    => \case <-comparison (x + y) x zro x+y<0 \with {
      | byLeft x+y<x => byRight (<_+-cancel-left x y zro (transport (x + y <) (inv (zro-right x)) x+y<x))
      | byRight x<0 => byLeft x<0
    }

  \class Dec \extends LinearlyOrderedSemiring, LinearOrder.Dec {
    | <_+-cancel-left x y z x+y<x+z => \case trichotomy y z \with {
      | byLeft y=z => absurd (<-irreflexive (x + z) (transport (\lam t => x + t < x + z) y=z x+y<x+z))
      | byRight (byLeft y<z) => y<z
      | byRight (byRight y>z) => absurd (<-irreflexive (x + z) (<-transitive (x + z) (x + y) (x + z) (<_+-right z y x y>z) x+y<x+z))
    }
    | <_+-cancel-right x y z x+z<y+z => \case trichotomy x y \with {
      | byLeft x=y => absurd (<-irreflexive (y + z) (transport (\lam t => t + z < y + z) x=y x+z<y+z))
      | byRight (byLeft x<y) => x<y
      | byRight (byRight x>y) => absurd (<-irreflexive (y + z) (<-transitive (y + z) (x + z) (y + z) (<_+-left y x z x>y) x+z<y+z))
    }
    | <_*-cancel-left x y z x*y<x*z => \case trichotomy x zro, trichotomy y z \with {
      | byLeft x=0, _ => absurd (<-irreflexive zro (transport2 (<) (zro_*-left y) (zro_*-left z) (transport (\lam t => t * y < t * z) x=0 x*y<x*z)))
      | _, byLeft y=z => absurd (<-irreflexive (x * z) (transport (\lam t => x * t < x * z) y=z x*y<x*z))
      | byRight (byLeft x<0), byRight (byLeft y<z) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (x * y) (x * z) (<_*_negative-right x y z x<0 y<z) x*y<x*z))
      | byRight (byRight x>0), byRight (byLeft y<z) => byLeft (x>0, y<z)
      | byRight (byLeft x<0), byRight (byRight y>z) => byRight (x<0, y>z)
      | byRight (byRight x>0), byRight (byRight y>z) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (x * y) (x * z) (<_*_positive-right x z y x>0 y>z) x*y<x*z))
    }
    | <_*-cancel-right x y z x*z<y*z => \case trichotomy x y, trichotomy z zro \with {
      | byLeft x=y, _ => absurd (<-irreflexive (y * z) (transport (\lam t => t * z < y * z) x=y x*z<y*z))
      | _, byLeft z=0 => absurd (<-irreflexive zro (transport2 (<) (zro_*-right x) (zro_*-right y) (transport (\lam t => x * t < y * t) z=0 x*z<y*z)))
      | byRight (byLeft x<y), byRight (byLeft z<0) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (y * z) (x * z) x*z<y*z (<_*_negative-left x y z x<y z<0)))
      | byRight (byLeft x<y), byRight (byRight z>0) => byLeft (z>0, x<y)
      | byRight (byRight x>y), byRight (byLeft z<0) => byRight (z<0, x>y)
      | byRight (byRight x>y), byRight (byRight z>0) => absurd (<-irreflexive (x * z) (<-transitive (x * z) (y * z) (x * z) x*z<y*z (<_*_positive-left y x z x>y z>0)))
    }
  } \where {
    \class Impl \extends Dec, LinearOrder.Dec.Impl
  }
}

\class OrderedCSemiring \extends OrderedSemiring, CSemiring, OrderedAbMonoid
  | <_*_positive-right x y z x>0 y<z => transport2 (<) (*-comm y x) (*-comm z x) (<_*_positive-left y z x y<z x>0)
  | <_*_negative-right x y z x<0 y<z => transport2 (>) (*-comm y x) (*-comm z x) (<_*_negative-left y z x y<z x<0)

\class LinearlyOrderedCSemiring \extends LinearlyOrderedSemiring, OrderedCSemiring, OrderedAbMonoid
  | <_+-cancel-right x y z x+z<y+z => <_+-cancel-left z x y (transport2 (<) (+-comm x z) (+-comm y z) x+z<y+z)
  | <_*-cancel-right x y z x*z<y*z => <_*-cancel-left z x y (transport2 (<) (*-comm x z) (*-comm y z) x*z<y*z)
  \where {
    \class Dec \extends OrderedCSemiring, LinearlyOrderedSemiring.Dec
      \where
        \class Impl \extends Dec, LinearlyOrderedSemiring.Dec.Impl
  }

{- | An ordered ring is a linearly ordered domain such that the product of positive elements is positive
 -   and an element is apart from {zro} if and only if it is either positive or negative.
 -}
\class OrderedRing \extends Domain, LinearlyOrderedSemiring, OrderedAbGroup {
  | positive_* (x y : E) : isPos x -> isPos y -> isPos (x * y)
  | positive_*-cancel (x y : E) : isPos (x * y) -> (\Sigma (isPos x) (isPos y)) || (\Sigma (isNeg x) (isNeg y))
  | positive=>#0 (x : E) : isPos x -> x `#0
  | negative=>#0 (x : E) : isNeg x -> x `#0
  | #0=>eitherPosOrNeg (x : E) : x `#0 -> isPos x || isNeg x

  | negative_*-cancel (x y : E) : isNeg (x * y) -> (\Sigma (isPos x) (isNeg y)) || (\Sigma (isNeg x) (isPos y))
  | negative_*-cancel x y x*y<0 => ||.map (\lam t => (t.1, transport isNeg (AddGroup.negative-isInvolution y) (positive_negative (negative y) t.2)))
                                          (\lam t => (t.1, transport isPos (AddGroup.negative-isInvolution y) (negative_positive (negative y) t.2)))
                                          (positive_*-cancel x (negative y) (transport isPos (inv (Ring.negative_*-right x y)) (negative_positive (x * y) x*y<0)))

  | <_*_positive-left x y z x<y z>0 =>
    fromPos (y * z) (x * z) (transport isPos
                                       (rdistr y (negative x) z *> pmap (y * z +) (Ring.negative_*-left x z))
                                       (positive_* (y - x) z (toPos y x x<y) z>0))
  | <_*_positive-right x y z x>0 y<z =>
    fromPos (x * z) (x * y) (transport isPos
                                       (ldistr x z (negative y) *> pmap (x * z +) (Ring.negative_*-right x y))
                                       (positive_* x (z - y) x>0 (toPos z y y<z)))
  | <_*_negative-left x y z x<y z<0 =>
    fromNeg (y * z) (x * z)
            (transport isNeg
                       (rdistr y (negative x) z *> pmap (y * z +) (Ring.negative_*-left x z))
                       (transport ((y - x) * z <) (zro_*-right (y - x)) (<_*_positive-right (y - x) z zro (toPos y x x<y) z<0)))
  | <_*_negative-right x y z x<0 y<z =>
    fromNeg (x * z) (x * y)
            (transport isNeg
                       (ldistr x z (negative y) *> pmap (x * z +) (Ring.negative_*-right x y))
                       (transport (x * (z - y) <) (zro_*-left (z - y)) (<_*_positive-left x zro (z - y) x<0 (toPos z y y<z))))
  | <_+-cancel-left x y z x+y<x+z =>
    transport2 (<)
               (inv (+-assoc (negative x) x y) *> pmap (\lam t => t + y) (negative-left x) *> zro-left y)
               (inv (+-assoc (negative x) x z) *> pmap (\lam t => t + z) (negative-left x) *> zro-left z)
               (<_+-right (x + y) (x + z) (negative x) x+y<x+z)
  | <_+-cancel-right x y z x+z<y+z =>
    transport2 (<)
               (+-assoc x z (negative z) *> pmap (x +) (negative-right z) *> zro-right x)
               (+-assoc y z (negative z) *> pmap (y +) (negative-right z) *> zro-right y)
               (<_+-left (x + z) (y + z) (negative z) x+z<y+z)
  | <_*-cancel-left x y z x*y<x*z =>
    \let x*[z-y]>0 => transport (\lam t => t > zro) (inv (ldistr x z (negative y) *> pmap (x * z +) (Ring.negative_*-right x y))) (toPos (x * z) (x * y) x*y<x*z)
    \in \case positive_*-cancel x (z - y) x*[z-y]>0 \with {
      | byLeft (x>0, z-y>0) => byLeft (x>0, fromPos z y z-y>0)
      | byRight (x<0, z-y<0) => byRight (x<0, fromNeg z y z-y<0)
    }
  | <_*-cancel-right x y z x*z<y*z =>
    \let [y-x]*z>0 => transport (\lam t => t > zro) (inv (rdistr y (negative x) z *> pmap (y * z +) (Ring.negative_*-left x z))) (toPos (y * z) (x * z) x*z<y*z)
    \in \case positive_*-cancel (y - x) z [y-x]*z>0 \with {
      | byLeft (y-x>0, z>0) => byLeft (z>0, fromPos y x y-x>0)
      | byRight (y-x<0, z<0) => byRight (z<0, fromNeg y x y-x<0)
    }

  | #0-zro zro#0 => \case #0=>eitherPosOrNeg zro zro#0 \with {
    | byLeft zro<zro => <-irreflexive zro zro<zro
    | byRight zro<zro => <-irreflexive zro zro<zro
  }
  | #0-negative x x#0 => \case #0=>eitherPosOrNeg x x#0 \with {
    | byLeft x>0 => negative=>#0 (negative x) (positive_negative x x>0)
    | byRight x<0 => positive=>#0 (negative x) (negative_positive x x<0)
  }
  | #0-+ x y x+y#0 => \case #0=>eitherPosOrNeg (x + y) x+y#0 \with {
    | byLeft x+y>0 => ||.map (positive=>#0 x) (positive=>#0 y) (LinearlyOrderedSemiring.+_positive x y x+y>0)
    | byRight x+y<0 => ||.map (negative=>#0 x) (negative=>#0 y) (LinearlyOrderedSemiring.+_negative x y x+y<0)
  }
  | #0-tight x x/#0 => <-connectedness x zro (\lam x<0 => x/#0 (negative=>#0 x x<0)) (\lam x>0 => x/#0 (positive=>#0 x x>0))
  | #0-*-left x y x*y#0 => \case #0=>eitherPosOrNeg (x * y) x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x y x*y>0 \with {
        | byLeft (x>0, _) => positive=>#0 x x>0
        | byRight (x<0, _) => negative=>#0 x x<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x y x*y<0 \with {
        | byLeft (x>0, _) => positive=>#0 x x>0
        | byRight (x<0, _) => negative=>#0 x x<0
      }
  }
  | #0-*-right x y x*y#0 => \case #0=>eitherPosOrNeg (x * y) x*y#0 \with {
    | byLeft x*y>0 =>
      \case positive_*-cancel x y x*y>0 \with {
        | byLeft (_, y>0) => positive=>#0 y y>0
        | byRight (_, y<0) => negative=>#0 y y<0
      }
    | byRight x*y<0 =>
      \case negative_*-cancel x y x*y<0 \with {
        | byLeft (_, y<0) => negative=>#0 y y<0
        | byRight (_, y>0) => positive=>#0 y y>0
      }
  }
  | zro#ide => positive=>#0 ide zro<ide
  | apartZeroProduct x y x#0 y#0 =>
    \let neg=>#0 z (z<0 : isNeg z) => transport #0 (AddGroup.negative-isInvolution z) (#0-negative (negative z) (positive=>#0 (negative z) (negative_positive z z<0)))
    \in \case #0=>eitherPosOrNeg x x#0, #0=>eitherPosOrNeg y y#0 \with {
      | byLeft x>0, byLeft y>0 => positive=>#0 (x * y) (positive_* x y x>0 y>0)
      | byLeft x>0, byRight y<0 => neg=>#0 (x * y) (OrderedSemiring.positive_negative_* x y x>0 y<0)
      | byRight x<0, byLeft y>0 => neg=>#0 (x * y) (OrderedSemiring.negative_positive_* x y x<0 y>0)
      | byRight x<0, byRight y<0 => positive=>#0 (x * y) (OrderedSemiring.negative_* x y x<0 y<0)
    }
} \where {
  \open OrderedAddGroup(toPos,toNeg,fromPos,fromNeg,negative_positive,positive_negative)

  \class Impl \extends OrderedRing
    | #0 x => isPos x || isNeg x
    | positive=>#0 x => byLeft
    | negative=>#0 x => byRight
    | #0=>eitherPosOrNeg x x#0 => x#0

  \class Dec \extends OrderedRing, LinearlyOrderedSemiring.Dec, Domain.Dec
    | positive_*-cancel x y x*y>0 => \case trichotomy x zro, trichotomy y zro \with {
      | byLeft x=0, _ => absurd (<-irreflexive zro (transport isPos (pmap (\lam t => t * y) x=0 *> zro_*-left y) x*y>0))
      | _, byLeft y=0 => absurd (<-irreflexive zro (transport isPos (pmap (x *) y=0 *> zro_*-right x) x*y>0))
      | byRight (byLeft x<0), byRight (byLeft y<0) => byRight (x<0, y<0)
      | byRight (byLeft x<0), byRight (byRight y>0) => absurd (<-irreflexive zro (<-transitive zro (x * y) zro x*y>0 (OrderedSemiring.negative_positive_* x y x<0 y>0)))
      | byRight (byRight x>0), byRight (byLeft y<0) => absurd (<-irreflexive zro (<-transitive zro (x * y) zro x*y>0 (OrderedSemiring.positive_negative_* x y x>0 y<0)))
      | byRight (byRight x>0), byRight (byRight y>0) => byLeft (x>0, y>0)
    }
    \where
      \class Impl \extends Dec, Domain.Dec.Impl
        | positive=>#0 x x>0 x=0 => <-irreflexive zro (transport (zro <) x=0 x>0)
        | negative=>#0 x x<0 x=0 => <-irreflexive x (transport (x <) (inv x=0) x<0)
        | #0=>eitherPosOrNeg x x/=0 => \case trichotomy x zro \with {
          | byLeft x=0 => absurd (x/=0 x=0)
          | byRight (byLeft x<0) => byRight x<0
          | byRight (byRight x>0) => byLeft x>0
        }
}

\class OrderedCRing \extends OrderedRing, IntegralDomain, OrderedCSemiring
  \where {
    \class Impl \extends OrderedCRing, OrderedRing.Impl

    \class Dec \extends OrderedCRing, OrderedRing.Dec, LinearlyOrderedCSemiring.Dec, IntegralDomain.Dec
      \where
        \class Impl \extends Dec, OrderedRing.Dec.Impl, IntegralDomain.Dec.Impl
  }

\class OrderedField \extends OrderedCRing, Field {
  | zro/=ide _0=1 => <-irreflexive ide (transport (\lam x => x < ide) _0=1 zro<ide)
  | locality x y x+y=1 => ||.map (positive=>#0 x) (positive=>#0 y) (LinearlyOrderedSemiring.+_positive x y (transport isPos (inv x+y=1) zro<ide))
  | positive_*-cancel x y x*y>0 =>
    \case #0=>eitherPosOrNeg x (Inv.cfactor-left x y (positive=>#0 (x * y) x*y>0)), #0=>eitherPosOrNeg y (Inv.cfactor-right x y (positive=>#0 (x * y) x*y>0)) \with {
      | byLeft x>0, byLeft y>0 => byLeft (x>0, y>0)
      | byLeft x>0, byRight y<0 => absurd (<-irreflexive zro (<-transitive zro (x * y) zro x*y>0 (OrderedSemiring.positive_negative_* x y x>0 y<0)))
      | byRight x<0, byLeft y>0 => absurd (<-irreflexive zro (<-transitive zro (x * y) zro x*y>0 (OrderedSemiring.negative_positive_* x y x<0 y>0)))
      | byRight x<0, byRight y<0 => byRight (x<0, y<0)
    }
  | negative=>#0 x x<0 => transport (\lam t => Inv t) (AddGroup.negative-isInvolution x) (Ring.negative_inv (positive=>#0 (negative x) (OrderedAddGroup.negative_positive x x<0)))
}

\class DiscreteOrderedField \extends OrderedField, DiscreteField, OrderedCRing.Dec {
  | positive=>#0 x x>0 => \case eitherZeroOrInv x \with {
    | byLeft x=0 => absurd (<-irreflexive zro (transport isPos x=0 x>0))
    | byRight x-isInv => x-isInv
  }
  | trichotomy x y => \case eitherZeroOrInv (x - y) \with {
    | byLeft x-y=0 => byLeft (
      x                    ==< inv (zro-right x) >==
      x + zro              ==< pmap (\lam t => x + t) (inv (negative-left y)) >==
      x + (negative y + y) ==< inv (+-assoc x (negative y) y) >==
      x - y + y            ==< pmap (\lam t => t + y) x-y=0 >==
      zro + y              ==< zro-left y >==
      y                    `qed
    )
    | byRight x-y-isInv => \case #0=>eitherPosOrNeg (x - y) x-y-isInv \with {
      | byLeft x-y>0 => byRight (byRight (OrderedAddGroup.fromPos x y x-y>0))
      | byRight x-y<0 => byRight (byLeft (OrderedAddGroup.fromNeg x y x-y<0))
    }
  }
}
