\import Algebra.Monoid
\import Algebra.Pointed
\import Algebra.Pointed.Category
\import Category
\import Category.Meta
\import Paths
\import Paths.Meta
\import Set.Category

\record MonoidHom \extends PointedHom {
  \override Dom : Monoid
  \override Cod : Monoid
  | func-* (x y : Dom) : func (x * y) = func x * func y
}
  \where {
    \func equals {M N : Monoid} {f g : MonoidHom M N} (p : \Pi (x : M) -> f x = g x) : f = g
      => exts p

    \open Monoid(Inv)

    \func presInv (h : MonoidHom) (e : Inv {h.Dom}) : Inv (h e) \cowith
      | inv => h e.inv
      | inv-left => inv (h.func-* e.inv e) *> pmap h e.inv-left *> h.func-ide
      | inv-right => inv (h.func-* e e.inv) *> pmap h e.inv-right *> h.func-ide

    \lemma presInvElem (h : MonoidHom) (e : Inv {h.Dom}) (e' : Inv (h e)) : h e.inv = e'.inv
      => pmap (\lam (j : Inv) => j.inv) (Inv.levelProp (\new Inv (h e) {
        | inv => h e.inv
        | inv-left => inv (h.func-* e.inv e) *> pmap h e.inv-left *> h.func-ide
        | inv-right => inv (h.func-* e e.inv) *> pmap h e.inv-right *> h.func-ide
      }) e')
  }

\instance MonoidCategory : Cat Monoid
  | Hom M N => MonoidHom M N
  | id => id
  | o {x y z : Monoid} (g : MonoidHom y z) (f : MonoidHom x y) => \new MonoidHom {
    | func x => g (f x)
    | func-ide => pmap g f.func-ide *> g.func-ide
    | func-* x y => pmap g (f.func-* x y) *> g.func-* (f x) (f y)
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam p1 p2 => exts (func-ide {p1}, func-* {p1}))
  \where
    \func id (M : Monoid) : MonoidHom M M \cowith
      | func x => x
      | func-ide => idp
      | func-* _ _ => idp
