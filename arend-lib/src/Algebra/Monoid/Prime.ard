\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Pointed
\import Data.Or
\import Logic
\import Paths
\open CMonoid(Inv,Div)

\record Prime {M : CMonoid} (e : M) (notInv : Not (Inv e))
  | isPrime (x y : M) : Div e (x * y) -> Div e x || Div e y

\record Irr {M : CMonoid} (e : M) (notInv : Not (Inv e)) {
  | isIrr (x y : M) : e = x * y -> Inv x || Inv y

  \func decide (x y : M) (e=x*y : e = x * y) : Inv x `Or` Inv y =>
    ||.rec (Or.isProp (\lam (i : Inv x) (j : Inv y) => notInv (transport (\lam x => Inv x) (inv e=x*y) (Inv.product i j)))) inl inr (isIrr x y e=x*y)
}

\lemma Prime-isIrr {M : CancelCMonoid} (p : Prime {M}) : Irr p.e p.notInv \cowith
  | isIrr x y p=x*y => \case p.isPrime x y (\new Div p.e (x * y) ide (ide-left p.e *> p=x*y)) \with {
    | byLeft p|x =>
      \let j => Div.inv {p|x}
      \in byRight (\new Inv y j (M.cancel-right (j * y) ide x (
        (j * y) * x ==< *-assoc j y x >==
        j * (y * x) ==< pmap (j *) (*-comm y x) >==
        j * (x * y) ==< pmap (j *) (inv p=x*y) >==
        j * p.e     ==< Div.inv-left {p|x} >==
        x           ==< inv (ide-left x) >==
        ide * x     `qed
      )))
    | byRight p|y =>
      \let j => Div.inv {p|y}
      \in byLeft (\new Inv x j (M.cancel-right (j * x) ide y (
        (j * x) * y ==< *-assoc j x y >==
        j * (x * y) ==< pmap (j *) (inv p=x*y) >==
        j * p.e     ==< Div.inv-left {p|y} >==
        y           ==< inv (ide-left y) >==
        ide * y     `qed
      )))
  }

\lemma irr-isPrime {M : GCDMonoid} (p : Irr {M}) : Prime p.e p.notInv \cowith
  | isPrime x y p|x*y => {?}
