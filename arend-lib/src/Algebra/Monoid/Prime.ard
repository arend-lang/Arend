\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Pointed
\import Data.Or
\import Logic
\import Paths
\open Monoid(Inv,LDiv)

\record Prime {M : CMonoid} (e : M) (notInv : Not (Inv e))
  | isPrime (x y : M) : LDiv e (x * y) -> LDiv e x || LDiv e y

\record Irr {M : CMonoid} (e : M) (notInv : Not (Inv e)) {
  | isIrr (x y : M) : e = x * y -> Inv x || Inv y

  \func decide (x y : M) (e=x*y : e = x * y) : Inv x `Or` Inv y =>
    ||.rec (Or.isProp (\lam (i : Inv x) (j : Inv y) => notInv (transport (\lam x => Inv x) (inv e=x*y) (Inv.product i j)))) inl inr (isIrr x y e=x*y)
}

\lemma Prime-isIrr {M : CancelCMonoid} (p : Prime {M}) : Irr p.e p.notInv \cowith
  | isIrr x y p=x*y => \case p.isPrime x y (\new LDiv p.e (x * y) ide (ide-right p.e *> p=x*y)) \with {
    | byLeft (p|x : LDiv p.e x) =>
      \let j => p|x.inv
      \in byRight (Inv.rmake j (M.cancel-left x (y * j) ide (
        x * (y * j) ==< inv (*-assoc x y j) >==
        (x * y) * j ==< pmap (\lam t => t * j) (inv p=x*y) >==
        p.e * j     ==< p|x.inv-right >==
        x           ==< inv (ide-right x) >==
        x * ide     `qed
      )))
    | byRight (p|y : LDiv p.e y) =>
      \let j => p|y.inv
      \in byLeft (Inv.lmake j (M.cancel-right (j * x) ide y (
        (j * x) * y ==< *-assoc j x y >==
        j * (x * y) ==< pmap (j *) (inv p=x*y) >==
        j * p.e     ==< *-comm j p.e >==
        p.e * j     ==< p|y.inv-right >==
        y           ==< inv (ide-left y) >==
        ide * y     `qed
      )))
  }

\func Coprime {M : CMonoid} (x y : M) => \Pi (z : M) -> LDiv z x -> LDiv z y -> Inv z
  \where {
    \func =>gcd {M : CMonoid} (x y : M) (c : Coprime x y) : GCD x y ide \cowith
      | gcd|val1 => \new LDiv ide x x (ide-left x)
      | gcd|val2 => \new LDiv ide y y (ide-left y)
      | gcd-univ g g|x g|y => \let i : Inv g => c g g|x g|y
                              \in \new LDiv g ide i.inv i.inv-right

    \func <=gcd {M : CMonoid} (x y : M) (g : GCD x y ide) : Coprime x y =>
      \lam z z|x z|y =>
          \let z|g : LDiv z g.gcd => g.gcd-univ z z|x z|y
          \in Inv.rmake z|g.inv z|g.inv-right
  }

\lemma irr-isPrime {M : GCDMonoid} (p : Irr {M}) : Prime p.e p.notInv \cowith
  | isPrime x y p|x*y => \case irr-cmp p x \with {
    | byLeft p|x => byLeft p|x
    | byRight p_x => byRight (gcd_*_div p.e x y p|x*y (Coprime.=>gcd p.e x p_x))
  }
  \where {
    \open DivQuotient

    \lemma irr-cmp {M : GCDMonoid} (p : Irr {M}) (a : M) : LDiv p.e a || Coprime p.e a => \case isGCD p.e a \with {
      | inP (gc : GCD p.e a) =>
        \let | g => gc.gcd
             | g|p : LDiv g p.e => gc.gcd|val1
             | g|a : LDiv g a => gc.gcd|val2
             | x => g|p.inv
        \in \case p.isIrr g x (inv g|p.inv-right) \with {
          | byLeft (gi : Inv g) => byRight (\lam z z|p z|a =>
            \let z|g : LDiv z g => gc.gcd-univ z z|p z|a
            \in Inv.rmake (gi.inv * z|g.inv) (
              z * (gi.inv * z|g.inv) ==< pmap (z *) (*-comm gi.inv z|g.inv) >==
              z * (z|g.inv * gi.inv) ==< inv (*-assoc _ _ _) >==
              (z * z|g.inv) * gi.inv ==< pmap (\lam t => t * gi.inv) z|g.inv-right >==
              g * gi.inv             ==< gi.inv-right >==
              ide                    `qed
            ))
          | byRight (xi : Inv x) => byLeft (\new LDiv p.e a (xi.inv * g|a.inv) (
            p.e * (xi.inv * g|a.inv)     ==< inv (*-assoc _ _ _) >==
            (p.e * xi.inv) * g|a.inv     ==< pmap (\lam t => (t * xi.inv) * g|a.inv) (inv g|p.inv-right) >==
            ((g * x) * xi.inv) * g|a.inv ==< pmap (\lam t => t * g|a.inv) (*-assoc _ _ _) >==
            (g * (x * xi.inv)) * g|a.inv ==< pmap (\lam t => (g * t) * g|a.inv) xi.inv-right >==
            (g * ide) * g|a.inv          ==< pmap (\lam t => t * g|a.inv) (ide-right g) >==
            g * g|a.inv                  ==< g|a.inv-right >==
            a                            `qed
          ))
        }
    }
  }
