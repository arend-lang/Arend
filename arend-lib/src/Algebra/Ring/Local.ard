\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Logic
\import Paths
\open Monoid(Inv,LInv)

\class LocalRing \extends Ring {
  | zro/=ide : Not (zro = ide)
  | locality (x y : E) : x + y = ide -> Inv x || Inv y

  \lemma sumInv=>eitherInv (x y : E) (q : Inv (x + y)) : Inv x || Inv y =>
    \case locality (q.inv * x) (q.inv * y) (inv (ldistr q.inv x y) *> q.inv-left) \with {
      | byLeft s => byLeft (Inv.factor-right q.inv x (\new LInv q.inv (x + y) q.inv-right) s)
      | byRight s => byRight (Inv.factor-right q.inv y (\new LInv q.inv (x + y) q.inv-right) s)
    }
}

\class LocalCRing \extends LocalRing, CRing
