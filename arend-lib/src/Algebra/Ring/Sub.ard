\import Algebra.Group.Sub
\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Semiring.Sub
\import HLevel
\import Paths.Meta

\class SubRing \extends SubSemiring, SubAddGroup {
  \override S : Ring

  \func struct : Ring \cowith
    | Semiring => SubSemiring.struct
    | AbGroup => SubAddGroup.abStruct \this
} \where {
  \func cStruct {R : CRing} (S : SubRing R) : CRing \cowith
    | Ring => S.struct
    | *-comm => ext *-comm

  \lemma isContr {R : Ring} {S : SubRing R} (c : Contr R) : Contr S.struct \cowith
    | center => (c.center, rewrite (c.contraction 1) contains_ide)
    | contraction x => ext (c.contraction _)

  \lemma comm-isContr {R : CRing} {S : SubRing R} (c : Contr R) : Contr (cStruct S) \cowith
    | center => (c.center, rewrite (c.contraction 1) contains_ide)
    | contraction x => ext (c.contraction _)
}