\import Algebra.Group
\import Algebra.Group.Sub
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Ring
\import Algebra.Semiring
\import Arith.Int
\import Arith.Nat
\import Combinatorics.Binom
\import Data.Array
\import Data.Bool
\import Equiv
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Set.Fin
\open AddMonoid
\open AbMonoid

-- | Left ideal
\record LIdeal \extends SubAddGroup {
  \override S : Ring
  | ideal-left {r a : S} : contains a -> contains (r * a)
  | contains_negative c => transport contains (Ring.negative_*-left *> pmap negative ide-left) (ideal-left c)
}

-- | Right ideal
\record RIdeal \extends SubAddGroup {
  \override S : Ring
  | ideal-right {r a : S} : contains a -> contains (a * r)
  | contains_negative c => transport contains (Ring.negative_*-right *> pmap negative ide-right) (ideal-right c)

  \lemma ldiv {a b : S} (a|b : Monoid.LDiv a b) (Ia : contains a) : contains b
    => transport contains a|b.inv-right (ideal-right Ia)
}

-- | Two-sided ideal
\record TIdeal \extends LIdeal, RIdeal

-- | Ideal of a commutative ring
\record Ideal \extends TIdeal {
  \override S : CRing
  | ideal-right s => transport contains *-comm (ideal-left s)

  \func radical : Ideal S \cowith
    | contains a => ∃ (n : Nat) (contains (Monoid.pow a n))
    | contains_zro => inP (1, transportInv contains ide-left contains_zro)
    | contains_+ {x} {y} (inP (n,xS)) (inP (m,yS)) => inP (n + m, transportInv contains (binom.expansion x y (n + m)) (bigSum
        (\new Array S (suc (n + m)) (\lam i => natCoef (binom (n + m) i) * (Monoid.pow x i * Monoid.pow y (iabs (n + m Nat.- i)))))
        (\lam i => ideal-left (\let j => iabs (n + m Nat.- i) \in \case NatSemiring.splitSum (Poset.<=_= (pmap iabs (inv (pmap (`+ (n + m)) IntRing.minus__) *> IntRing.minus+pos i i (n + m) *> pmap (pos i +) (inv (pos_iabs (<_suc_<= (fin_< i))))))) \with {
          | byLeft n<=i => ideal-right (rewriteI (<=_exists n<=i) (rewrite Monoid.pow_+ (ideal-right xS)))
          | byRight m<=j => ideal-left (rewriteI (<=_exists m<=j) (rewrite Monoid.pow_+ (ideal-right yS)))
        }))))
    | ideal-left (inP (n,s)) => inP (n, transportInv contains CMonoid.pow_*-comm (ideal-left s))

  \lemma radical-superset {x : S} (s : contains x) : radical x
    => inP (1, transportInv contains ide-left s)

  \lemma radical_pow {x : S} {n : Nat} (s : radical (Monoid.pow x n)) : radical x \elim s
    | inP (m,p) => inP (n * m, transportInv contains Monoid.pow_* p)

  \lemma radical-univ {I : Ideal S} (p : \Pi {x : S} -> I x -> radical x) {x : S} (s : I.radical x) : radical x \elim s
    | inP (n,Ix^n) => radical_pow (p Ix^n)

  \lemma bigSum (l : Array S) (p : \Pi (i : Fin l.len) -> contains (l i)) : contains (BigSum l) \elim l
    | nil => contains_zro
    | :: a l => contains_+ (p 0) (bigSum l (\lam i => p (suc i)))

  \lemma finSum {J : FinSet} {a : J -> S} (p : \Pi (j : J) -> contains (a j)) : contains (FinSum a)
    => \case FinSum_char a \with {
         | inP (e,q) => transportInv contains q $ bigSum _ $ \lam i => p (e i)
       }

  \func isGenerated (l : Array (\Sigma (x : S) (contains x)))
    => \Pi {a : S} -> contains a -> ∃ (l' : Array S l.len) (a = BigSum (\lam j => l' j * (l j).1))

  \func isFinitelyGenerated => ∃ (l : Array (\Sigma (x : S) (contains x))) (isGenerated l)

  \func isPrincipal => ∃ (a : S) (contains a) (\Pi {b : S} -> contains b -> TruncP (Monoid.LDiv a b))
} \where {
  \func closure {R : CRing} {J : \Set} (g : J -> R) : Ideal R \cowith
    | contains e => ∃ (l : Array (\Sigma R J)) (e = BigSum (map (\lam p => p.1 * g p.2) l))
    | contains_zro => inP (nil,idp)
    | contains_+ (inP (l,p)) (inP (l',p')) => inP (l ++ l', pmap2 (+) p p' *> inv (pmap BigSum (map_++ (later (\lam (c,j) => c * g j))) *> BigSum_++))
    | ideal-left {r} (inP (l,p)) => inP (map (\lam (c,j) => (r * c, j)) l, pmap (r *) p *> R.BigSum-ldistr *> path (\lam i => BigSum (map (\lam (c,j) => inv (R.*-assoc {r} {c} {g j}) @ i) l)))

  \func sclosure {R : CRing} (U : R -> \Prop) => closure (\lam (p : \Sigma (x : R) (U x)) => p.1)

  \lemma closure-superset {R : CRing} {J : \Set} {g : J -> R} (j : J) : closure g (g j)
    => inP ((1,j) :: nil, equation)

  \lemma sclosure-superset {R : CRing} {U : R -> \Prop} {x : R} (Ux : U x) : sclosure U x
    => inP ((1,(x,Ux)) :: nil, equation)

  \lemma closure-univ {R : CRing} {J : \Set} {g : J -> R} {I : Ideal R} (c : \Pi (j : J) -> I (g j)) {x : R} (d : closure g x) : I x \elim d
    | inP (l,p) => transportInv I p $ bigSum _ $ \lam i => later $ ideal-left (c (l i).2)

  \lemma sclosure-univ {R : CRing} {U : R -> \Prop} {I : Ideal R} (c : \Pi (x : R) -> U x -> I x) {x : R} (d : sclosure U x) : I x
    => closure-univ {R} {\Sigma (x : R) (U x)} {__.1} (\lam j => c j.1 j.2) d

  \func closure1 {R : CRing} (a : R) : Ideal R
    => closure (\lam (_ : \Sigma) => a)

  \lemma closure1-lem {R : CRing} {a b : R} : closure1 a b <-> ∃ (c : R) (b = a * c)
    => (\lam (inP (l,b=sl)) => inP (BigSum (map __.1 l), b=sl *> inv (R.BigSum-rdistr {map __.1 l})  *> *-comm), \lam (inP (c,b=ac)) => inP ((c,()) :: nil, b=ac *> *-comm *> inv zro-right))

  \lemma closure2-lem {R : CRing} {a : R} (f : Bool -> R)
    : closure f a <-> ∃ (c d : R) (a = f true * c + f false * d)
    => \have (g,h) => fin-closure-lem f
       \in (\lam s => TruncP.map (g s) (\lam (c, a=fc) => (c true, c false, a=fc *> FinSum_char2 _ BoolFin.equiv *> equation)),
            \lam (inP (c, d, a=fc)) => h (inP (if __ c d, a=fc *> inv (FinSum_char2 _ BoolFin.equiv *> equation))))

  \lemma fin-closure-lem {D : FinSet} {R : CRing} {a : R} (f : D -> R)
    : closure f a <-> ∃ (c : D -> R) (a = FinSum (\lam i => c i * f i))
    => \case D.finEq \with {
         | inP (eq : Equiv) =>
           \have (g,h) => closureN-lem (\lam i => f (eq i))
           \in (
             \lam (inP (l, a=fl)) =>
                 TruncP.map (g (inP (map (\lam (r, d) => (r, eq.ret d)) l,
                                     a=fl *> pmap BigSum (exts (\lam j => pmap (_ * f __) (inv (eq.f_ret _)))))))
                     (\lam (c, a=fc) => (\lam d => c (eq.ret d),
                                         a=fc *> pmap BigSum (exts (\lam j => pmap (c __ * _) (inv (eq.ret_f _)))) *> inv (FinSum_char2 _ eq)
                                        )),
             \lam (inP (c, a=fc)) =>
                 TruncP.map (h (inP (\lam i => c (eq i), a=fc *> FinSum_char2 _ eq))) (\lam (l, a=fl) => (map (\lam (r, i) => (r, eq i)) l, a=fl)))
       }

  \lemma closureN-lem {R : CRing} {a : R} {n : Nat} (B : Array R n)
    : closure B a <-> ∃ (c : Array R n) (a = BigSum (\lam i => c i * B i)) =>
    (TruncP.map __ (\lam q =>
        (\lam i => BigSum (map (\lam p => if (p.2 NatSemiring.== i) p.1 0) q.1),
         q.2 *> pmap BigSum (exts (\lam k => inv (singleton-lem _ _ (q.1 k).2)
                                     *> pmap BigSum (exts (\lam h => unfold (==) (cases (NatSemiring.decideEq (q.1 k).2 h) \with {
                                     | yes e => pmap (_ * B __) (fin_nat-inj e)
                                     | no _ => inv zro_*-left
                                   })))))
                  *> R.BigSum-transpose (\lam i j => if ((q.1 i).2 NatSemiring.== j) (q.1 i).1 0 * B j)
                       *> pmap BigSum (exts (\lam j => inv R.BigSum-rdistr)))),
     TruncP.map __ (\lam (c, a=Bc) => (\lam i => (c i, i), a=Bc)))
    \where {
      \lemma singleton-lem {R : Semiring} (a : R) (n : Nat) (i : Fin n)
        : BigSum (\lam (j : Fin n) => if (i NatSemiring.== j) a 0) = a \elim n, i
        | suc _, 0 => pmap (_ +) (R.BigSum_zro (\lam _ => idp)) *> zro-right
        | suc n, suc i => zro-left *> pmap BigSum (exts (\lam j => pmap (if __ _ _) suc-eq)) *> singleton-lem a n i

      \lemma suc-eq {a b : Nat} : suc a == suc b = a == b =>
        unfold (==) (cases (decideEq a b, decideEq (suc a) (suc b)) idp \with {
          | yes e, no n => absurd (n (pmap suc e))
          | no n, yes e => absurd (n (pmap pred e))
        })
    }

  \func ChainCondition {R : CRing} (I : Nat -> Ideal R) =>
    (\Pi (n : Nat) {a : R} -> I n a -> I (suc n) a) -> ∃ (n : Nat) (\Pi {a : R} -> I (suc n) a -> I n a)

  \lemma fromMonoidChainCondition {R : CRing} (cc : CMonoid.DivChain {DivQuotient.DivQuotientMonoid R})
    (I : Nat -> Ideal R) (p : \Pi (n : Nat) -> Ideal.isPrincipal {I n}) : ChainCondition I
    => \lam f =>
        \let | r n => TruncP.rec-set (p n) (\lam s => in~ s.1) \lam s s' => ~-pequiv $ later (s'.3 s.2, s.3 s'.2)
             | t => cc (\lam n => (r n).1) \lam n => \case (r n).2, (r (suc n)).2 \with {
               | inP sn, inP sn+1 => transport2 (\lam x y => TruncP (Monoid.LDiv x y)) sn+1.2 sn.2 $ TruncP.map (sn+1.1.3 $ f n sn.1.2) DivQuotient.div-to~
             }
        \in TruncP.map t \lam s => (s.1, \case (r s.1).2, (r (suc s.1)).2 \with {
          | inP d, inP d' => \lam c => \case DivQuotient.div-from~' $ transport2 Monoid.LDiv (inv d.2) (inv d'.2) s.2, d'.1.3 c \with {
            | inP d|d', inP d'|a => ldiv d'|a (ldiv d|d' d.1.2)
          }
        })
}
