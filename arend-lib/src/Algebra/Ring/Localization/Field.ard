\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ordered
\import Algebra.Pointed
\import Algebra.Ring
\import Algebra.Ring.Local
\import Algebra.Ring.Localization
\import Logic
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\import Relation.Equivalence
\open Monoid \hiding (equals)
\open LocRing

\lemma localization-inv {R : CRing} (S : MSubset R) (a : SType S) (r : R) (p : contains (a.1 * r)) : Inv (inl~ a)
  => Inv.lmake {LocRing S} (in~ (a.2.1 * r, (a.1 * r, p)))
               (path (~-equiv {SType S} _ _ (
                 ((a.2.1 * r) * a.1) * ide ==< ide-right _ >==
                 (a.2.1 * r) * a.1         ==< *-comm _ _ >==
                 a.1 * (a.2.1 * r)         ==< inv (*-assoc _ _ _) >==
                 (a.1 * a.2.1) * r         ==< pmap (\lam t => t * r) (*-comm _ _) >==
                 (a.2.1 * a.1) * r         ==< *-assoc _ _ _ >==
                 a.2.1 * (a.1 * r)         ==< *-comm _ _ >==
                 (a.1 * r) * a.2.1         ==< inv (ide-left _) >==
                 ide * ((a.1 * r) * a.2.1) `qed)))
  \where {
    \lemma converse {R : CRing} (S : MSubset R) (a : SType S) (j : Inv (inl~ a)) : TruncP (\Sigma (r : R) (contains (a.1 * r)))
      => \case j.inv \as i, j.inv-right : inl~ a * i = ide \with {
        | in~ b, p => \case unequals S p \with {
          | inP (c,cs,q) => inP (b.1 * (ide * c), transport contains (inv q *> *-assoc _ _ _ *> *-assoc _ _ _)
                                                            (contains_* _ _ (contains_* _ _ contains_ide (contains_* _ _ a.2.2 b.2.2)) cs))
        }
      }
  }

\lemma localization-zro {R : CRing} (S : MSubset R) (a : SType S) (s : R) (c : contains s) (p : a.1 * s = zro) : inl~ a = zro
  => equals S s c (
    (a.1 * ide) * s   ==< pmap (\lam t => t * s) (ide-right a.1) >==
    a.1 * s           ==< p >==
    zro               ==< inv (Ring.zro_*-left s) >==
    zro * s           ==< inv (pmap (\lam t => t * s) (Ring.zro_*-left a.2.1)) >==
    (zro * a.2.1) * s `qed)

\lemma localization-nonTrivial {R : CRing} (S : MSubset R) (p : Not (S.contains zro)) : Not (zro = {LocRing S} ide)
  => \lam zro=ide => \case unequals S zro=ide \with {
    | inP (c, s, q) => p (transport contains (
      c               ==< inv (ide-left c) >==
      ide * c         ==< inv (pmap (\lam t => t * c) (ide-left ide)) >==
      (ide * ide) * c ==< inv q >==
      (zro * ide) * c ==< pmap (\lam t => t * c) (ide-right zro) >==
      zro * c         ==< Ring.zro_*-left c >==
      zro             `qed) s)
  }

\lemma localization-isLocal {R : CRing} (S : MSubset R) (nt : Not (S.contains zro))
                            (loc : \Pi (x y : R) -> contains y -> (\Sigma (r : R) (contains (x * r))) || (\Sigma (r : R) (contains ((x + y) * r))))
  : LocalCRing { | CRing => LocRing S } \cowith
  | zro/=ide => localization-nonTrivial S nt
  | locality x~ => \case x~ \as x~ \return Inv x~ || Inv (x~ + ide) \with {
    | in~ x => \case loc x.1 x.2.1 x.2.2 \with {
      | byLeft (r,c) => byLeft (localization-inv S x r c)
      | byRight (r,c) => byRight (localization-inv S (x.1 * ide + ide * x.2.1, (x.2.1 * ide, contains_* x.2.1 ide x.2.2 contains_ide)) r
                                                   (transport contains (inv (pmap2 (\lam a b => (a + b) * r) (ide-right x.1) (ide-left x.2.1))) c))
    }
  }

\lemma localization-isField {R : CRing} (S : MSubset R) (nt : Not (S.contains zro))
                            (loc : \Pi (x y : R) -> contains y -> (\Sigma (r : R) (contains (x * r))) || (\Sigma (r : R) (contains ((x + y) * r))))
                            (fp : \Pi (x : R) -> (\Pi (r : R) -> Not (contains (x * r))) -> TruncP (\Sigma (s : R) (contains s) (x * s = zro)))
  : Field { | CRing => LocRing S } \cowith
  | LocalCRing => localization-isLocal S nt loc
  | #0-tight x~ x~-ni => \case x~ \as x~, x~-ni : Not (Inv x~) \return x~ = zro \with {
    | in~ x, x-ni => \case fp x.1 (\lam r c[x*r] => x-ni (localization-inv S x r c[x*r])) \with {
      | inP (s,c,p) => localization-zro S x s c p
    }
  }

\lemma localization-isDiscreteField {R : CRing} (S : MSubset R) (nt : Not (S.contains zro))
                                    (fp : \Pi (x : R) -> (\Sigma (s : R) (contains s) (x * s = zro)) || (\Sigma (r : R) (contains (x * r))))
  : DiscreteField { | CRing => LocRing S } \cowith
  | zro/=ide => localization-nonTrivial S nt
  | eitherZeroOrInv x~ => \case x~ \as x~ \return (x~ = in~ (zro, (ide, contains_ide))) || Inv x~ \with {
    | in~ x => \case fp x.1 \with {
      | byLeft (s, cs, x*s=0) => byLeft (localization-zro S x s cs x*s=0)
      | byRight (r, c[x*r]) => byRight (localization-inv S x r c[x*r])
    }
  }

-- | The localization of an ordering commutative ring at the set of positive elements is an ordered field.
\func localization-isOrderedField (R : OrderedCRing) : OrderedField \cowith
  | Field => localization-isField (positiveSubset R) zro/>0
    (\lam x y y>0 => \case <_+-comparison (negative x) (x + y) (transport isPos (inv (inv (+-assoc _ _ _) *> pmap (\lam t => t + y) (negative-left x) *> zro-left y)) y>0) \with {
      | byLeft -x>0 => byLeft (negative ide, transport isPos (inv (Ring.negative_*-right x ide *> pmap negative (ide-right x))) -x>0)
      | byRight x+y>0 => byRight (ide, transport isPos (inv (ide-right (x + y))) x+y>0)
    })
    (\lam x x-ni => inP (ide, ide>zro, ide-right x *>
      <_+-connectedness x (\lam x>0 => x-ni ide (transport isPos (inv (ide-right x)) x>0))
                          (\lam -x>0 => x-ni (negative ide) (transport isPos (inv (Ring.negative_*-right x ide *> pmap negative (ide-right x))) -x>0))))
  | isPos => isPositive
  | zro/>0 => zro/>0
  | positive_+ x~ y~ => \case x~ \as x~, y~ \as y~ \return isPositive x~ -> isPositive y~ -> isPositive (x~ + y~) \with {
    | in~ x, in~ y => \lam x>0 y>0 => positive_+ _ _ (positive_* x.1 y.2.1 x>0 y.2.2) (positive_* y.1 x.2.1 y>0 x.2.2)
  }
  | ide>zro => ide>zro
  | <_+-comparison x~ y~ => \case x~ \as x~, y~ \as y~ \return isPositive (x~ + y~) -> isPositive x~ || isPositive y~ \with {
    | in~ x, in~ y => \lam x+y>0 => ||.map (\lam p => OrderedRing.positive_*-cancel-left p y.2.2)
                                           (\lam p => OrderedRing.positive_*-cancel-left p x.2.2)
                                           (<_+-comparison _ _ x+y>0)
  }
  | <_+-connectedness x~ => \case x~ \as x~ \return Not (isPositive x~) -> Not (isPositive (negative x~)) -> x~ = zro \with {
    | in~ x => \lam x/>0 -x/>0 => localization-zro (positiveSubset R) x ide ide>zro (ide-right x.1 *> <_+-connectedness x.1 x/>0 -x/>0)
  }
  | positive_* x~ y~ => \case x~ \as x~, y~ \as y~ \return isPositive x~ -> isPositive y~ -> isPositive (x~ * y~) \with {
    | in~ x, in~ y => positive_* x.1 y.1
  }
  | positive=>#0 x~ => \case x~ \as x~ \return isPositive x~ -> Inv x~ \with {
    | in~ x => \lam x>0 => localization-inv (positiveSubset R) x ide (transport isPos (inv (ide-right x.1)) x>0)
  }
  | #0=>eitherPosOrNeg x~ => \case x~ \as x~ \return Inv x~ -> isPositive x~ || isPositive (negative x~) \with {
    | in~ x => \lam x-inv => \case localization-inv.converse (positiveSubset R) x x-inv \with {
      | inP (r, x*r>0) => ||.map (\lam p => p.1) (\lam p => p.1) (positive_*-cancel x.1 r x*r>0)
    }
  }
  \where {
    \func positiveSubset (R : OrderedCRing) : MSubset R \cowith
      | contains => isPos
      | contains_ide => ide>zro
      | contains_* => positive_*

    \func isPositive {R : OrderedCRing} (x : Type (positiveSubset R)) : \Prop \elim x
      | in~ x => isPos x.1
      | ~-equiv x y x~y i => propExt {isPos x.1} {isPos y.1}
          (\lam x>0 => OrderedRing.positive_*-cancel-left (transport isPos x~y (positive_* x.1 y.2.1 x>0 y.2.2)) x.2.2)
          (\lam y>0 => OrderedRing.positive_*-cancel-left (transport isPos (inv x~y) (positive_* y.1 x.2.1 y>0 x.2.2)) y.2.2) @ i
  }

-- | The localization of a decidable ordering commutative ring at the set of positive elements is a discrete ordered field.
\func localization-isDiscreteOrderedField (R : OrderedCRing.Dec) : DiscreteOrderedField \cowith
  | DiscreteField => localization-isDiscreteField (localization-isOrderedField.positiveSubset R) zro/>0 (\lam x => \case OrderedRing.+_trichotomy x \with {
    | byLeft x=0 => byLeft (ide, ide>zro, ide-right x *> x=0)
    | byRight (byLeft x>0) => byRight (ide, transport isPos (inv (ide-right x)) x>0)
    | byRight (byRight x<0) => byRight (negative ide, transport isPos (inv (Ring.negative_*-right x ide *> pmap negative (ide-right x))) x<0)
  })
  | OrderedField => localization-isOrderedField R