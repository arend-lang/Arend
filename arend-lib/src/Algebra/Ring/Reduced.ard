\import Algebra.Group
\import Algebra.Meta
\import Algebra.Ring
\import Arith.Nat
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths

\class ReducedRing \extends Ring {
  | isReduced {a : E} : a * a = 0 -> a = 0

  \lemma noNilpotent {a : E} {n : Nat} (p : pow a n = 0) : a = 0
    => aux $ pmap (pow a) (inv $ <=_exists $ LinearOrder.<_<= id<pow2) *> pow_+  *> pmap (`* pow a (NatSemiring.pow 2 n -' n)) p *> zro_*-left
    \where
      \lemma aux {a : E} {n : Nat} (p : pow a (NatSemiring.pow 2 n) = 0) : a = 0 \elim n
        | 0 => inv ide-left *> p
        | suc n => aux $ isReduced (inv pow_+ *> p)
}

\class ReducedCRing \extends ReducedRing, CRing

\class PPRing \extends ReducedCRing {
  | isPPRing (a : E) : âˆƒ (u : E) (a = u * a) (\Pi {x : E} -> a * x = 0 -> u * x = 0)

  | isReduced {a} aa=0 => \case isPPRing a \with {
    | inP s => s.2 *> s.3 aa=0
  }

  \lemma bezout->strictBezout (bez : IsBezout) : IsStrictBezout
    => \lam a b =>
        \have | (inP (s,t,(a',p),(b',q))) => bez a b
              | (inP (w,b=wb,f)) => isPPRing (s * a + t * b)
        \in inP (w * t, w * s + (1 - w), w * b', w * a' + (1 - w),
                 equation {usingOnly (f {b' * a - a' * b} equation)} *> inv zro-right *> pmap (_ +) equation *> inv rdistr *> *-comm,
                 equation {usingOnly (f {t * b' + s * a' - 1} equation, f {1 - w} equation)})
}

\class ImpotentRing \extends ReducedRing, NonZeroRing {
  | isImpotent {a : E} : a * a = a -> (a = 0) || (a = 1)

  \lemma decomp {a b : E} (a+b=1 : a + b = 1) (ab=0 : a * b = 0) : (\Sigma (a = 1) (b = 0)) || (\Sigma (a = 0) (b = 1))
    => \case isImpotent $ inv zro-left *> pmap (`+ _) (inv ab=0) *> inv rdistr *> pmap (`* b) a+b=1 *> ide-left \with {
      | byLeft b=0 => byLeft (inv zro-right *> pmap (a +) (inv b=0) *> a+b=1, b=0)
      | byRight b=1 => byRight (inv ide-right *> pmap (a *) (inv b=1) *> ab=0, b=1)
    }
}

\class ImpotentCRing \extends ImpotentRing, ReducedCRing, NonZeroCRing