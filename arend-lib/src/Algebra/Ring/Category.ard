\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Pointed
\import Algebra.Ring
\import Algebra.Semiring
\import Category (Cat, Iso)
\import Category.Meta
\import Category.Sub
\import Equiv
\import Paths
\import Paths.Meta
\import Set.Category

\record SemiringHom \extends AddMonoidHom, MonoidHom {
  \override Dom : Semiring
  \override Cod : Semiring
}

\record RingHom \extends SemiringHom, AddGroupHom {
  \override Dom : Ring
  \override Cod : Ring
} \where {
    \func equals {R S : Ring} {f g : RingHom R S} (p : \Pi (x : R) -> f x = g x) : f = g
      => exts p
}

\instance RingCategory : Cat Ring
  | Hom M N => RingHom M N
  | id => id
  | o {x y z : Ring} (g : RingHom y z) (f : RingHom x y) => \new RingHom {
    | func x => g (f x)
    | func-ide => pmap g f.func-ide *> g.func-ide
    | func-+ x y => pmap g (f.func-+ x y) *> g.func-+ (f x) (f y)
    | func-* x y => pmap g (f.func-* x y) *> g.func-* (f x) (f y)
  }
  | id-left _ => idp
  | id-right _ => idp
  | o-assoc _ _ _ => idp
  | univalence => sip (\lam {X} {R} {S} (p1 : RingHom) _ => exts (p1.func-zro, p1.func-+, p1.func-ide, p1.func-*, natCoefUnique R S p1, AddGroup.negative-equality R S p1.func-zro p1.func-+))
  \where {
    \func id (M : Ring) : RingHom M M \cowith
      | func x => x
      | func-ide => idp
      | func-+ _ _ => idp
      | func-* _ _ => idp

    \lemma natCoefUnique {X : \Set} (R S : Ring X) (h : RingHom R S (\lam x => x)) (n : Nat) : R.natCoef n = S.natCoef n \elim n
      | 0 => R.natCoefZero *> h.func-zro *> inv S.natCoefZero
      | suc n => R.natCoefSuc n *> h.func-+ _ _ *> pmap2 (S.+) (natCoefUnique R S h n) h.func-ide *> inv (S.natCoefSuc n)
  }

\instance CRingCategory : Cat CRing
  => subCat (\new Embedding {CRing} {Ring} {
    | f R => R
    | isEmb (R S : CRing) => \new Retraction {
      | sec p => path (\lam i => \new CRing {
        | Ring => p @ i
        | *-comm => pathInProp (\Pi {x y : p @ __} -> x * y = y * x) R.*-comm S.*-comm @ i
      })
      | f_sec => idpe
    }
  })
