\import Algebra.Field
\import Algebra.Group
\import Algebra.LocalRing
\import Algebra.Monoid
\import Algebra.Ordered.Strictly
\import Algebra.Ring
\import Logic
\import Order.LinearOrder
\import Paths
\import Relation.Apartness
\open CMonoid(Inv)

\class Domain \extends Ring, TightApartness
  | +-extensional (x y x' y' : E) : x + y # x' + y' -> x # x' || y # y'
  | *-extensional (x y x' y' : E) : x * y # x' * y' -> x # x' || y # y'
  | zro#ide : zro # ide
  | nonZeroProduct (x y : E) : x # zro -> y # zro -> x * y # zro

\class IntegralDomain \extends Domain, CRing
  \where {
    \func fromField (K : Field) : IntegralDomain \cowith
      | CRing => K
      | Apartness => LocalCRing.=>Apartness {K}
      | tightness x y p =>
        x                    ==< inv (zro-right x) >==
        x + zro              ==< pmap (x +) (inv (negative-left y)) >==
        x + (negative y + y) ==< inv (+-assoc x (negative y) y) >==
        (x - y) + y          ==< pmap (\lam t => t + y) (nonInvIsZero (x - y) p) >==
        zro + y              ==< zro-left y >==
        y                    `qed
      | +-extensional x y x' y' x+y#x'+y' => LocalCRing.sumInv=>eitherInv (x - x') (y - y') (transport (\lam t => Inv t) (
        (x + y) - (x' + y')          ==< pmap ((x + y) +) (AddGroup.negative_+ x' y') >==
        (x + y) + (negative y' - x') ==< +-assoc x y (negative y' - x') >==
        x + (y + (negative y' - x')) ==< pmap (x +) (inv (+-assoc y (negative y') (negative x'))) >==
        x + ((y - y') - x')          ==< pmap (x +) (+-comm (y - y') (negative x')) >==
        x + (negative x' + (y - y')) ==< inv (+-assoc x (negative x') (y - y')) >==
        (x - x') + (y - y')          `qed
      ) x+y#x'+y')
      | *-extensional x y x' y' x*y#x'*y' => \case #-comparison {LocalCRing.=>Apartness {K}} (x * y) (x * y') (x' * y') x*y#x'*y' \with {
        | byLeft x*y#x*y' =>
          \let j => Inv.inv {x*y#x*y'}
          \in byRight (\new Inv (y - y') (j * x) (
            (j * x) * (y - y')            ==< *-assoc j x (y - y') >==
            j * (x * (y - y'))            ==< pmap (j *) (ldistr x y (negative y')) >==
            j * (x * y + x * negative y') ==< pmap (\lam t => j * (x * y + t)) (Ring.negative_*-right x y') >==
            j * (x * y - x * y')          ==< Inv.inv-left {x*y#x*y'} >==
            ide                           `qed
          ))
        | byRight x*y'#x'*y' =>
          \let j => Inv.inv {x*y'#x'*y'}
          \in byLeft (\new Inv (x - x') (j * y') (
            (j * y') * (x - x')             ==< *-assoc j y' (x - x') >==
            j * (y' * (x - x'))             ==< pmap (j *) (*-comm y' (x - x')) >==
            j * ((x - x') * y')             ==< pmap (j *) (rdistr x (negative x') y') >==
            j * (x * y' + negative x' * y') ==< pmap (\lam t => j * (x * y' + t)) (Ring.negative_*-left x' y') >==
            j * (x * y' - x' * y')          ==< Inv.inv-left {x*y'#x'*y'} >==
            ide                             `qed
          ))
      }
      | zro#ide => \new Inv (zro - ide) (negative ide) (
        negative ide * (zro - ide)  ==< pmap (negative K.ide *) (zro-left (negative ide)) >==
        negative ide * negative ide ==< Ring.negative_* K.ide ide >==
        ide * ide                   ==< ide-left K.ide >==
        ide                         `qed
      )
      | nonZeroProduct x y (xj : Inv (x - zro)) (yj : Inv (y - zro)) => \new Inv (x * y - zro) (yj.inv * xj.inv) (
        (yj.inv * xj.inv) * (x * y - zro)   ==< pmap ((yj.inv * xj.inv) *) (AddGroup.minus_zro (x * y)) >==
        (yj.inv * xj.inv) * (x * y)         ==< *-assoc yj.inv xj.inv (x * y) >==
        yj.inv * (xj.inv * (x * y))         ==< pmap (yj.inv *) (inv (*-assoc xj.inv x y)) >==
        yj.inv * ((xj.inv * x) * y)         ==< pmap (\lam t => yj.inv * ((xj.inv * t) * y)) (inv (AddGroup.minus_zro x)) >==
        yj.inv * ((xj.inv * (x - zro)) * y) ==< pmap (\lam t => yj.inv * (t * y)) xj.inv-left >==
        yj.inv * (ide * y)                  ==< pmap (yj.inv *) (ide-left y) >==
        yj.inv * y                          ==< pmap (yj.inv *) (inv (AddGroup.minus_zro y)) >==
        yj.inv * (y - zro)                  ==< yj.inv-left >==
        ide                                 `qed
      )
  }
