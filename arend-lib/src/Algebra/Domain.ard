\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Ring
\import Logic
\import Paths

{- | Domain is a ring with a tight apartness relation such that elements apart from {zro} are closed under finite products.
 -   Classically, this is equivalent to the usual definition since there is a unique apartness relation on a set assuming LEM.
 -}
\class Domain \extends Ring.With# {
  | zro#ide : ide `#0
  | apartZeroProduct (x y : E) : x `#0 -> y `#0 -> (x * y) `#0

  \lemma nonZeroProduct (x y : E) (x/=0 : Not (x = zro)) (y/=0 : Not (y = zro)) : Not (x * y = zro) => \lam x*y=0 =>
    x/=0 (#0-tight x (\lam x#0 =>
    y/=0 (#0-tight y (\lam y#0 =>
        #0-zro (transport #0 x*y=0 (apartZeroProduct x y x#0 y#0))))))

  \lemma nonZero-left (x y : E) (x/=0 : Not (x = zro)) (x*y=0 : x * y = zro) : y = zro =>
    separatedEq (\lam y/=0 => nonZeroProduct x y x/=0 y/=0 x*y=0)

  \lemma nonZero-right (x y : E) (y/=0 : Not (y = zro)) (x*y=0 : x * y = zro) : x = zro =>
    separatedEq (\lam x/=0 => nonZeroProduct x y x/=0 y/=0 x*y=0)

  \lemma nonZero-cancel-left (x y z : E) (x/=0 : Not (x = zro)) (x*y=x*z : x * y = x * z) : y = z =>
    AddGroup.fromZero y z (nonZero-left x (y - z) x/=0 (ldistr x y (negative z) *> pmap (x * y +) (Ring.negative_*-right x z) *> AddGroup.toZero (x * y) (x * z) x*y=x*z))

  \lemma nonZero-cancel-right (x y z : E) (z/=0 : Not (z = zro)) (x*z=y*z : x * z = y * z) : x = y =>
    AddGroup.fromZero x y (nonZero-right (x - y) z z/=0 (rdistr x (negative y) z *> pmap (x * z +) (Ring.negative_*-left y z) *> AddGroup.toZero (x * z) (y * z) x*z=y*z))

  \func nonZeroMonoid : CancelMonoid \cowith
    | E => \Sigma (x : E) (x `#0)
    | ide => (ide, zro#ide)
    | * x y => (x.1 * y.1, apartZeroProduct x.1 y.1 x.2 y.2)
    | ide-left x => SigmaPropExt #0 _ _ (ide-left x.1)
    | ide-right x => SigmaPropExt #0 _ _ (ide-right x.1)
    | *-assoc x y z => SigmaPropExt #0 _ _ (*-assoc x.1 y.1 z.1)
    | cancel-left x y z x*y=x*z => SigmaPropExt #0 y z (nonZero-cancel-left x.1 y.1 z.1 (\lam x=0 => #0-zro (transport #0 x=0 x.2)) (pmap (\lam t => t.1) x*y=x*z))
    | cancel-right x y z x*z=y*z => SigmaPropExt #0 x y (nonZero-cancel-right x.1 y.1 z.1 (\lam z=0 => #0-zro (transport #0 z=0 z.2)) (pmap (\lam t => t.1) x*z=y*z))
} \where {
  \class Dec \extends Domain, Ring.Dec
    \where
      \class Impl \extends Dec, Ring.Dec.Impl
}

-- | An integral domain is a commutative domain.
\class IntegralDomain \extends Domain, CRing.With# {
  \func nonZeroMonoid : CancelCMonoid \cowith
    | CancelMonoid => Domain.nonZeroMonoid
    | *-comm x y => SigmaPropExt #0 _ _ (*-comm x.1 y.1)

  \lemma div-inv (x y : E) (x/=0 : Not (x = zro)) (x|y : LDiv x y) (y|x : LDiv y x) : Inv x|y.inv
    => Inv.rmake y|x.inv (Domain.nonZero-cancel-left _ _ _ x/=0 (
      x * (x|y.inv * y|x.inv) ==< inv (*-assoc _ _ _) >==
      (x * x|y.inv) * y|x.inv ==< pmap (`* y|x.inv) x|y.inv-right >==
      y * y|x.inv             ==< y|x.inv-right >==
      x                       ==< inv (ide-right x) >==
      x * ide                 `qed))
} \where {
  \open Monoid

  \class Dec \extends Domain.Dec, IntegralDomain
    \where
      \class Impl \extends Dec, Domain.Dec.Impl
}
