\import Algebra.Field
\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Monoid.GCD
\import Algebra.Monoid.Sub
\import Algebra.Ring
\import Algebra.Ring.Localization
\import Algebra.Ring.Reduced
\import Algebra.Semiring
\import Arith.Nat
\import Data.Or
\import Function
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Set.Fin

{- | Domain is a ring with a tight apartness relation such that elements apart from {zro} are closed under finite products.
 -   Classically, this is equivalent to the usual definition since there is a unique apartness relation on a set assuming LEM.
 -}
\class Domain \extends Ring.With#, ImpotentRing, NonZeroRing {
  | zro#ide : ide `#0
  | #0-* {x y : E} : x `#0 -> y `#0 -> (x * y) `#0

  | isReduced p => #0-tight $ \lam a#0 => #0-zro $ transport #0 p (#0-* a#0 a#0)
  | isImpotent {a} p => \have q : a * (1 - a) = 0 => ldistr *> rewrite negative_*-right (toZero $ ide-right *> inv p)
                        \in \case #0-+ (transportInv #0 (+-comm *> +-assoc *> pmap (1 +) negative-left *> zro-right) zro#ide) \with {
                          | byLeft a#0 => byRight $ inv $ fromZero $ #0-tight \lam zro-a#0 => apartNonZero (#0-* a#0 zro-a#0) q
                          | byRight zro-a#0 => byLeft $ #0-tight \lam a#0 => apartNonZero (#0-* a#0 zro-a#0) q
                        }

  \default zro/=ide zro=ide => #0-zro (transportInv #0 zro=ide zro#ide)

  \lemma nonZeroProduct {x y : E} (x/=0 : x /= zro) (y/=0 : y /= zro) : x * y /= zro => \lam x*y=0 =>
    x/=0 (#0-tight (\lam x#0 =>
    y/=0 (#0-tight (\lam y#0 =>
        #0-zro (transport #0 x*y=0 (#0-* x#0 y#0))))))

  \lemma nonZero-left {x y : E} (x/=0 : x /= zro) (x*y=0 : x * y = zro) : y = zro
    => separatedEq (nonZeroProduct x/=0 __ x*y=0)

  \lemma nonZero-right {x y : E} (y/=0 : y /= zro) (x*y=0 : x * y = zro) : x = zro
    => separatedEq (nonZeroProduct __ y/=0 x*y=0)

  \lemma nonZero-cancel-left {x y z : E} (x/=0 : x /= zro) (x*y=x*z : x * y = x * z) : y = z
    => fromZero (nonZero-left x/=0 (ldistr *> pmap (x * y +) Ring.negative_*-right *> toZero x*y=x*z))

  \lemma nonZero-cancel-right {x y z : E} (z/=0 : z /= zro) (x*z=y*z : x * z = y * z) : x = y
    => fromZero (nonZero-right z/=0 (rdistr *> pmap (x * z +) Ring.negative_*-left *> toZero x*z=y*z))

  \func nonZeroMonoid : CancelMonoid \cowith
    | E => \Sigma (x : E) (x `#0)
    | ide => (ide, zro#ide)
    | * x y => (x.1 * y.1, #0-* x.2 y.2)
    | ide-left => ext ide-left
    | ide-right => ext ide-right
    | *-assoc => ext *-assoc
    | cancel-left x {y} {z} x*y=x*z => ext (nonZero-cancel-left (apartNonZero x.2) (pmap __.1 x*y=x*z))
    | cancel-right z {x} {y} x*z=y*z => ext (nonZero-cancel-right (apartNonZero z.2) (pmap __.1 x*z=y*z))

  \func subMonoid : SubMonoid \this \cowith
    | contains => #0
    | contains_ide => zro#ide
    | contains_* => #0-*

  \lemma ldiv_nonZero {a b : E} {a#0 : a `#0} {b#0 : b `#0} (a|b : Monoid.LDiv a b) : Monoid.LDiv {nonZeroMonoid} (a,a#0) (b,b#0) \cowith
    | inv => (a|b.inv, #0-*-right (transportInv #0 a|b.inv-right b#0))
    | inv-right => ext a|b.inv-right

  \func nonZero_ldiv {a b : E} {a#0 : a `#0} {b#0 : b `#0} (a|b : Monoid.LDiv {nonZeroMonoid} (a,a#0) (b,b#0)) : Monoid.LDiv a b \cowith
    | inv => a|b.inv.1
    | inv-right => pmap __.1 a|b.inv-right

  \lemma inv_nonZero {a : E} (a#0 : a `#0) (i : Monoid.Inv a) : Monoid.Inv {nonZeroMonoid} (a,a#0) \cowith
    | inv => (i.inv, #0-*-right (transportInv #0 i.inv-right zro#ide))
    | inv-left => ext i.inv-left
    | inv-right => ext i.inv-right

  \lemma nonZero_inv {a : E} (a#0 : a `#0) (i : Monoid.Inv {nonZeroMonoid} (a,a#0)) : Monoid.Inv a \cowith
    | inv => i.inv.1
    | inv-left => pmap __.1 i.inv-left
    | inv-right => pmap __.1 i.inv-right

  \lemma pow_#0 {a : E} {n : Nat} (a#0 : a `#0) : pow a n `#0 \elim n
    | 0 => zro#ide
    | suc n => #0-* (pow_#0 a#0) a#0
} \where {
  \open Monoid

  \class Dec \extends Domain, Ring.Dec, StrictDomain {
    \default zeroProduct {x} {y} xy=0 => \case decideEq x zro, decideEq y zro \with {
      | yes x=0, _ => byLeft x=0
      | _, yes y=0 => byRight y=0
      | no x/=0, no y/=0 => absurd $ #0-zro $ transport #0 xy=0 $ #0-* (nonZeroApart x/=0) (nonZeroApart y/=0)
    }
    \default zro#ide => nonZeroApart (\lam x => zro/=ide (inv x))
    \default #0-* x#0 y#0 => nonZeroApart (\lam xy=0 => ||.rec' (apartNonZero x#0) (apartNonZero y#0) (zeroProduct xy=0))

    \func LDiv_TruncP {a b : E} (p : TruncP (LDiv a b)) : LDiv a b
      => \case decideEq a 0 \with {
        | yes a=0 => LDiv.make 1 \case p \with {
          | inP (_,q) => later (rewrite a=0 simplify) *> q
        }
        | no a/=0 => TruncP.remove (\lam d d' => ext $ nonZero-cancel-left a/=0 $ LDiv.inv-right {d} *> inv (LDiv.inv-right {d'})) p
      }
  }
}

-- | An integral domain is a commutative domain.
\class IntegralDomain \extends Domain, CRing.With#, ImpotentCRing, NonZeroCRing {
  \func nonZeroMonoid : CancelCMonoid \cowith
    | CancelMonoid => Domain.nonZeroMonoid
    | *-comm => ext *-comm

  \lemma div-inv (x y : E) (x/=0 : x /= zro) (x|y : LDiv x y) (y|x : LDiv y x) : Inv x|y.inv
    => Inv.rmake y|x.inv (Domain.nonZero-cancel-left x/=0 (equation {Monoid}))

  \func gcd_nonZero {a b : E} (a#0 : a `#0) (b#0 : b `#0) (gcd : GCD a b) : GCD {nonZeroMonoid} (a,a#0) (b,b#0) \cowith
    | gcd => (gcd.gcd, #0-*-left (transportInv #0 gcd.gcd|val1.inv-right a#0))
    | gcd|val1 => Domain.ldiv_nonZero gcd.gcd|val1
    | gcd|val2 => Domain.ldiv_nonZero gcd.gcd|val2
    | gcd-univ g g|a g|b => Domain.ldiv_nonZero (gcd.gcd-univ g.1 (Domain.nonZero_ldiv g|a) (Domain.nonZero_ldiv g|b))
} \where {
  \open Monoid

  \class Dec \extends IntegralDomain, Domain.Dec, StrictIntegralDomain, PPRing {
    | isPPRing a => inP \case decideEq a 0 \with {
      | yes a=0 => (0, rewrite a=0 (inv zro_*-left), \lam _ => zro_*-left)
      | no a/=0 => (1, inv ide-left, \lam p => ide-left *> nonZero-left a/=0 p)
    }

    \lemma divQuotient_dec0 (a : DivQuotient \this) : Set.Dec (a = in~ 0)
      | in~ a => \case decideEq a 0 \with {
        | yes e => yes $ ~-pequiv $ rewrite e (inP LDiv.id-div, inP LDiv.id-div)
        | no q => no \lam p => q $ \case (DivQuotient.make~ p).1 \with {
          | inP d => inv (LDiv.inv-right {d}) *> zro_*-left
        }
      }

    \lemma fromNonZeroDivChain (cc : CMonoid.DivChain {DivQuotient.DivQuotientMonoid nonZeroMonoid}) : CMonoid.DivChain {DivQuotient.DivQuotientMonoid \this}
      => \lam a ac =>
          \have | f => DivQuotient.map {SubMonoid.cStruct subMonoid} subMonoid.embed
                | f-inj : isInj f => \lam {x} {y} => \case \elim x, \elim y \with {
                  | in~ x, in~ y => \lam p => \have t => DivQuotient.make~ p \in ~-pequiv (TruncP.map t.1 ldiv_nonZero, TruncP.map t.2 ldiv_nonZero)
                }
                | f-lem {x} {y} (d : LDiv {DivQuotient.DivQuotientMonoid \this} (f x) (f y)) : TruncP (LDiv x y) =>
                  \case x \as x, y \as y, d.inv \as z, d.inv-right : f x * {DivQuotient.DivQuotientMonoid \this} z = f y \return TruncP (LDiv x y) \with {
                    | in~ x, in~ y, in~ z, p => TruncP.map (DivQuotient.make~ p).2 \lam s => DivQuotient.div-to~ $ ldiv_nonZero $ LDiv.trans (LDiv.factor-left LDiv.id-div) s
                  }
                | r n (q : Not (âˆƒ (j : Fin (suc (suc n))) (a (suc j) = in~ 0))) => TruncP.rec {_} {\Sigma (x : DivQuotient nonZeroMonoid) (f x = a (suc n))} (\lam s s' => ext $ f-inj $ s.2 *> inv s'.2) (Quotient.in-surj (a (suc n)))
                   \lam s => (in~ (s.1, nonZeroApart \lam s=0 => q $ inP (n, pmap (\lam x => a (suc x)) (toFin'=id $ <-transitive id<suc id<suc) *> inv s.2 *> pmap in~ s=0)), s.2)
                | t => cc (\lam n => \case FinSet.search {FinFin (suc (suc n))} _ (\lam j => divQuotient_dec0 (a (suc j))) \with {
                         | yes e => in~ (1,zro#ide)
                         | no q => (r n q).1
                       }) (\lam n => mcases {1} \with {
                         | yes e => inP LDiv.ide-div
                         | no q => rewrite (FinSet.search_no_reduce (\lam (j : Fin (suc (suc n))) => divQuotient_dec0 (a (suc j))) (\lam p => q p)) $ \case ac (suc n) \with {
                           | inP d => f-lem $ transport2 LDiv (inv (r (suc n) q).2) (inv (r n (\lam p => q p)).2) d
                         }
                       })
          \in \case t \with {
            | inP s => mcases {2} s.2 _ \with {
                | yes e', s2 => TruncP.map e' \lam e => (e.1, \new LDiv {
                  | inv => in~ 0
                  | inv-right => cases (a e.1) \with {
                    | in~ b => pmap in~ zro_*-right *> inv e.2
                  }
                })
                | no q, s2 => rewrite (FinSet.search_no_reduce (\lam (j : Fin (suc (suc s.1))) => divQuotient_dec0 (a (suc j))) (\lam p => q p)) at s2 $
                                inP (suc s.1, transport2 LDiv (r s.1 (\lam p => q p)).2 (r (suc s.1) q).2 $ MonoidHom.func-LDiv {f} s2)
              }
          }
  }
}

\instance FieldOfQuotients (D : IntegralDomain.Dec) : DiscreteField \cowith
  | CRing => LocRing D.subMonoid
  | zro/=ide p => \case LocRing.unequals _ p \with {
    | inP (c,c#0,q) => D.#0-zro (transport D.#0 equation c#0)
  }
  | eitherZeroOrInv => \case \elim __ \with {
    | in~ x => \case decideEq x.1 0 \with {
      | yes e => inl $ LocRing.equals1 _ $ ide-right *> e *> inv zro_*-left
      | no q => inr $ Monoid.Inv.lmake (inl~ (x.2, x.1, AddGroup.nonZeroApart q)) $ LocRing.equals1 _ (simplify *-comm)
    }
  }

\class StrictDomain \extends Ring, NonZeroSemiring, ImpotentRing {
  | zeroProduct {x y : E} : x * y = zro -> (x = zro) || (y = zro)
  | isReduced => \case zeroProduct __ \with {
    | byLeft r => r
    | byRight r => r
  }
  | isImpotent {a} p => \have q : a * (a - 1) = 0 => ldistr *> rewrite negative_*-right (toZero $ p *> inv ide-right)
                        \in \case zeroProduct q \with {
                          | byLeft r => byLeft r
                          | byRight r => byRight (fromZero r)
                        }

  \lemma zeroOrCancel-left {x y z : E} (p : x * y = x * z) : (x = 0) || (y = z)
    => \case zeroProduct $ ldistr *> pmap (_ +) negative_*-right *> toZero p \with {
      | byLeft x=0 => byLeft x=0
      | byRight y-z=0 => byRight (fromZero y-z=0)
    }

  \lemma zeroOrCancel-right {x y z : E} (p : x * z = y * z) : (x = y) || (z = 0)
    => \case zeroProduct $ rdistr *> pmap (_ +) negative_*-left *> toZero p \with {
      | byLeft x-y=0 => byLeft (fromZero x-y=0)
      | byRight z=0 => byRight z=0
    }
}

\class StrictIntegralDomain \extends StrictDomain, ImpotentCRing
