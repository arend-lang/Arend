\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.Solver
\import Algebra.Ring
\import Data.List
\import Logic
\import Meta
\import Paths
\import Paths.Meta

{- | Domain is a ring with a tight apartness relation such that elements apart from {zro} are closed under finite products.
 -   Classically, this is equivalent to the usual definition since there is a unique apartness relation on a set assuming LEM.
 -}
\class Domain \extends Ring.With# {
  | zro#ide : ide `#0
  | apartZeroProduct {x y : E} : x `#0 -> y `#0 -> (x * y) `#0

  \lemma nonZeroProduct (x y : E) (x/=0 : Not (x = zro)) (y/=0 : Not (y = zro)) : Not (x * y = zro) => \lam x*y=0 =>
    x/=0 (#0-tight (\lam x#0 =>
    y/=0 (#0-tight (\lam y#0 =>
        #0-zro (transport #0 x*y=0 (apartZeroProduct x#0 y#0))))))

  \lemma nonZero-left {x y : E} (x/=0 : Not (x = zro)) (x*y=0 : x * y = zro) : y = zro =>
    separatedEq (nonZeroProduct x y x/=0 __ x*y=0)

  \lemma nonZero-right {x y : E} (y/=0 : Not (y = zro)) (x*y=0 : x * y = zro) : x = zro =>
    separatedEq (nonZeroProduct x y __ y/=0 x*y=0)

  \lemma nonZero-cancel-left {x y z : E} (x/=0 : Not (x = zro)) (x*y=x*z : x * y = x * z) : y = z =>
    AddGroup.fromZero y z (nonZero-left x/=0 (ldistr *> pmap (x * y +) (Ring.negative_*-right x z) *> AddGroup.toZero (x * y) (x * z) x*y=x*z))

  \lemma nonZero-cancel-right {x y z : E} (z/=0 : Not (z = zro)) (x*z=y*z : x * z = y * z) : x = y =>
    AddGroup.fromZero x y (nonZero-right z/=0 (rdistr *> pmap (x * z +) (Ring.negative_*-left y z) *> AddGroup.toZero (x * z) (y * z) x*z=y*z))

  \func nonZeroMonoid : CancelMonoid \cowith
    | E => \Sigma (x : E) (x `#0)
    | ide => (ide, zro#ide)
    | * x y => (x.1 * y.1, apartZeroProduct x.2 y.2)
    | ide-left {_} => ext ide-left
    | ide-right {_} => ext ide-right
    | *-assoc {_} {_} {_} => ext *-assoc
    | cancel-left x {y} {z} x*y=x*z => ext (nonZero-cancel-left (\lam x=0 => #0-zro (transport #0 x=0 x.2)) (pmap __.1 x*y=x*z))
    | cancel-right z {x} {y} x*z=y*z => ext (nonZero-cancel-right (\lam z=0 => #0-zro (transport #0 z=0 z.2)) (pmap __.1 x*z=y*z))
} \where {
  \class Dec \extends Domain, Ring.Dec
}

-- | An integral domain is a commutative domain.
\class IntegralDomain \extends Domain, CRing.With# {
  \func nonZeroMonoid : CancelCMonoid \cowith
    | CancelMonoid => Domain.nonZeroMonoid
    | *-comm {_} {_} => ext *-comm

  \lemma div-inv (x y : E) (x/=0 : Not (x = zro)) (x|y : LDiv x y) (y|x : LDiv y x) : Inv x|y.inv
    => Inv.rmake y|x.inv (Domain.nonZero-cancel-left x/=0 (equation {Monoid}))
} \where {
  \open Monoid

  \class Dec \extends Domain.Dec, IntegralDomain
}
