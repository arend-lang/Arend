\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Group.GSet
\import Algebra.Group.Sub
\import Algebra.Pointed
\import HLevel
\import Relation.Equivalence
{- | this is a type $\sum (E : GroupAction G) (pt : E)$
of group actions with chosen point in the underlying set -}
\func PointedGroupAction (G : Group) : \Type => \Sigma (E : GroupAction G) (pt : E)

{- |This is analogous to the previous Type but we make action transitive -}
\func TransitivePointedGroupAction (G : Group) : \Type => \Sigma (E : TransitiveGroupAction G) (pt : E)

{- |by a subgroup $ H \leq G $ we get a transitive action of $G$ on $G/H$ with a chosen point $eH \in G/H$ -}
\func TransitivePointedActionBySubgroup {G : Group} (H : SubGroup G) : TransitivePointedGroupAction G
  => (TransitiveActionBySubgroup H, in~ ide)

{- |by a transitive action of $G$ on $S$ and a chosen point $s \in S$ we get $ Stab(s) \leq G$ -}
\func SubGroupByTransitivePointedAction {G : Group} (E : TransitivePointedGroupAction G) : SubGroup G => Stabilizer_ E.1 E.2
  \where \func Stabilizer_ {G : Group} (E : TransitiveGroupAction G) (pt : E) : SubGroup G =>
    E.Stabilizer pt

\func SubgroupsAreTransitiveActions (G : Group) : SubGroup G = TransitivePointedGroupAction G => {?}

\data action-groupoid {G : Group} (E : GroupAction G)
  | pt E.E
  | g-connect (z : E) (g : G) (i : I) \elim i {
    | left => pt z
    | right => pt (g ** z)
  }
