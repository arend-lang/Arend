\import Algebra.Field
\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Pointed.Category
\import Algebra.Ring
\import Algebra.Ring.Category
\import Algebra.Ring.Ideal
\import Algebra.Ring.MPoly
\import Algebra.Ring.Poly
\import Algebra.Semiring
\import Arith.Nat
\import Category
\import Data.Array
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Set.Countable
\open Monoid \hiding (equals)

\type IsSplitting {k : DiscreteField} {R : CRing} (p : Poly k) (f : RingHom k R)
  => ∃ (l : Array R) (c : R) (RingHom.isAlgebraGenerated f l) (polyMap f p = c PolyRing.*c Monoid.BigProd (map (\lam a => padd 1 (negative a)) l))

\private \record RootFieldData (P : DiscreteField -> \Set) (k : DiscreteField) (p : Poly k)
  | RootField : DiscreteField
  | RootFieldP : P RootField
  | rootFieldHom : RingHom k RootField
  | root : RootField
  | isRoot : polyMapEval rootFieldHom p root = 0
  | RootField-gen (x : RootField) : ∃ (q : Poly k) (polyMapEval rootFieldHom q root = x)

\private \class SplittingFieldData \noclassifying
  (P : DiscreteField -> \Set) (S : \Pi {K : DiscreteField} -> Poly K -> \Prop)
  (S-hom : \Pi {K K' : DiscreteField} (f : RingHom K K') {p : Poly K} -> S p -> S (polyMap f p))
  (S-factor : \Pi {K : DiscreteField} {p q : Poly K} -> S (p * q) -> S p)
  (nextField : \Pi {K : DiscreteField} {p : Poly K} -> P K -> p /= 0 -> Not (Inv p) -> RootFieldData P K p) {

  \func makeSplittingField {k : DiscreteField} (Pk : P k) {p : Poly k} (Sp : S p) : \Sigma (K : DiscreteField) (f : RingHom k K) (IsSplitting p f)
    => aux Pk idp Sp
    \where
      \func aux {k : DiscreteField} (Pk : P k) {p : Poly k} {n : Nat} (d : degree p = n) (Sp : S p) : \Sigma (K : DiscreteField) (f : RingHom k K) (IsSplitting p f) \elim n
        | 0 => (k, RingCat.id k, inP (nil, polyCoef p 0, \lam x => inP (mConst x, simplify), rewrite {1} (degree=0-lem d) $ pmap (padd pzero) $ leadCoef_polyCoef *> pmap (polyCoef p) d *> inv ide-right))
        | suc n => \let | p/=0 : p /= 0 => \case rewriteF __ d
                        | rfd : RootFieldData P k p => nextField Pk p/=0 \lam pi => \case polyInv pi \with {
                                                         | inP (r,q,_) => \case rewriteF q d
                                                       }
                        | (K,f,Ks) => aux rfd.RootFieldP {_} {n} (pmap pred (inv (rewriteF (decideEq/=_reduce $ /=-sym zro/=ide) (inv (degree_polyMap RingHom.field-isInj) *> degree_*_= (\lam q => p/=0 $ polyMap-inj RingHom.field-isInj q) (rootDiv_* rfd.isRoot))) *> d)) $ S-factor $ transport S (rootDiv_* rfd.isRoot) (S-hom rfd.rootFieldHom Sp)
                   \in (K, f RingCat.∘ rfd.rootFieldHom, TruncP.map Ks \lam (l,c,fl,q) => later
                        (f rfd.root :: l, c, RingHom.isAlgebraGenerated-comp rfd.RootField-gen fl,
                         inv (polyMap-comp rfd.rootFieldHom f) *> pmap (polyMap f) (rootDiv_* rfd.isRoot) *> func-* {polyMapRingHom f} *> pmap (`* _) q *> inv PolyRing.*c-comm-left *>
                         pmap (c PolyRing.*c) (pmap (_ *) (pmap2 (\lam x y => padd (padd pzero x) y) func-ide AddGroupHom.func-negative) *> *-comm {_} {_} {padd 1 (negative (f root))})))
}

\sfunc countableSplittingField {k : DiscreteField} (c : Countable k) {p : Poly k} : \Sigma (K : DiscreteField) (f : RingHom k K) (IsSplitting p f)
  => CountableSplittingFieldData.makeSplittingField c ()
  \where {
    \private \func CountableSplittingFieldData : SplittingFieldData \cowith
      | P K => Countable K
      | S _ => \Sigma
      | S-hom _ _ => ()
      | S-factor _ => ()
      | nextField {k} {p} c p/=0 pc => \new RootFieldData {
        | RootField => FactorField {(poly-maximal-ideal c p pc).1} (poly-maximal-ideal c p pc).2
        | RootFieldP => factor-countable (Poly.poly-countable c)
        | rootFieldHom => factorHom RingCat.∘ polyHom
        | root => in~ (padd 1 0)
        | isRoot => pmap (polyEval __ _) (inv (polyMap-comp polyHom factorHom)) *> polyEval_polyMap *>
                                                                                   FactorRing.fequiv0 (transportInv (poly-maximal-ideal c p pc).1 poly-eval (poly-maximal-ideal c p pc).3)
        | RootField-gen (in~ q) => inP (q, unfold polyMapEval $ rewriteI (polyMap-comp polyHom) $ polyEval_polyMap *> pmap FactorRing.inF poly-eval)
      }

      \lemma poly-eval {K : DiscreteField} {p : Poly K} : polyMapEval polyHom p (padd 1 0) = p \elim p
        | pzero => idp
        | padd p e => unfold polyMapEval $ rewrite poly-eval $ inv padd-expand
  }