\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Logic
\import Paths
\import Paths.Meta
\import Set
\import Set.Category

\class Group \extends CancelMonoid {
  | inverse : E -> E
  | inverse-left (x : E) : inverse x * x = ide
  | inverse-right (x : E) : x * inverse x = ide

  | cancel-left x {y} {z} p =>
      y                   ==< inv ide-left >==
      ide * y             ==< pmap (`* y) (inv (inverse-left x)) >==
      (inverse x * x) * y ==< *-assoc >==
      inverse x * (x * y) ==< pmap (inverse x *) p >==
      inverse x * (x * z) ==< inv *-assoc >==
      (inverse x * x) * z ==< pmap (`* z) (inverse-left x) >==
      ide * z             ==< ide-left >==
      z                   `qed
  | cancel-right z {x} {y} p =>
      x                   ==< inv ide-right >==
      x * ide             ==< pmap (x *) (inv (inverse-right z)) >==
      x * (z * inverse z) ==< inv *-assoc >==
      (x * z) * inverse z ==< pmap (`* inverse z) p >==
      (y * z) * inverse z ==< *-assoc >==
      y * (z * inverse z) ==< pmap (y *) (inverse-right z) >==
      y * ide             ==< ide-right >==
      y                   `qed
} \where {
  \func op (G : Group) : Group \cowith
    | Monoid => Monoid.op G
    | inverse => G.inverse
    | inverse-left => G.inverse-right
    | inverse-right => G.inverse-left

  \open Monoid(Inv)

  \lemma inverse-equality {X : \Set} (G H : Group X) (z : G.ide = H.ide) (m : \Pi (x y : G) -> x G.* y = x H.* y) (e : G) : G.inverse e = H.inverse e
    => pmap (\lam (x : Inv) => x.inv) (Inv.levelProp {G}
        (\new Inv e (G.inverse e) (G.inverse-left e) (G.inverse-right e))
        (\new Inv e (H.inverse e) (m _ _ *> H.inverse-left e *> inv z) (m _ _ *> H.inverse-right e *> inv z)))

  \func equals (G H : Group) (p : G = {Monoid} H) : G = H
    => exts Group {
         | Monoid => p
         | inverse => inverse-equality G H p
       }
    \where {
      \lemma inverse-equality (G H : Group) (p : G = {Monoid} H) (e : G) : coe (p @ __) (inverse e) right = inverse (coe (p @ __) e right)
        => \let | h' {H' : Monoid} (q : G = {Monoid} H') => transport (\lam (H' : Monoid) => MonoidHom G H') q (MonoidCategory.id G)
                | h => transport (MonoidHom G H __) (Jl (\lam (H' : Monoid) q => func {h' q} = (\lam x => coe (q @ __) x right)) idp p) (h' p)
                | e' => coe (p @ __) e right
           \in MonoidHom.presInvElem h
                (\new Inv e (inverse e) (inverse-left e) (inverse-right e))
                (\new Inv e' (inverse e') (inverse-left e') (inverse-right e'))
    }
}

\func \infixl 7 / {G : Group} (x y : G) => x * inverse y

\class AddGroup \extends AddMonoid {
  | negative : E -> E
  | negative-left (x : E) : negative x + x = zro
  | negative-right (x : E) : x + negative x = zro

  \lemma cancel-left (x : E) {y z : E} (p : x + y = x + z) : y = z =>
    Group.cancel-left {toGroup \this} x p

  \lemma cancel-right (z : E) {x y : E} (p : x + z = y + z) : x = y =>
    Group.cancel-right {toGroup \this} z p

  \lemma negative-isInv (x : E) : negative (negative x) = x =>
    cancel-left (negative x) (negative-right (negative x) *> inv (negative-left x))

  \lemma negative_+ (x y : E) : negative (x + y) = negative y - x => cancel-left (x + y) (
    (x + y) - (x + y)          ==< negative-right (x + y) >==
    zro                        ==< inv (negative-right x) >==
    x - x                      ==< pmap (x +) (inv zro-left) >==
    x + (zro - x)              ==< pmap (x + (__ - x)) (inv (negative-right y)) >==
    x + ((y - y) - x)          ==< pmap (x +) +-assoc >==
    x + (y + (negative y - x)) ==< inv +-assoc >==
    (x + y) + (negative y - x) `qed
  )

  \lemma negative_zro : negative zro = zro
    => inv zro-right *> negative-left zro

  \lemma minus_zro (x : E) : x - zro = x
    => pmap (x +) negative_zro *> zro-right

  \lemma fromZero (x y : E) (x-y=0 : x - y = zro) : x = y =>
    x                    ==< inv zro-right >==
    x + zro              ==< pmap (x +) (inv (negative-left y)) >==
    x + (negative y + y) ==< inv +-assoc >==
    x - y + y            ==< pmap (`+ y) x-y=0 >==
    zro + y              ==< zro-left >==
    y                    `qed

  \lemma toZero (x y : E) (x=y : x = y) : x - y = zro => rewriteI x=y (negative-right x)
} \where {
    \use \coerce fromGroup (G : Group) => \new AddGroup G.E G.ide (G.*) G.ide-left G.ide-right G.*-assoc G.inverse G.inverse-left G.inverse-right
    \use \coerce toGroup (G : AddGroup) => \new Group G.E G.zro (G.+) G.zro-left G.zro-right G.+-assoc G.negative G.negative-left G.negative-right

    \lemma negative-equality {X : \Set} (A B : AddGroup X) (z : A.zro = B.zro) (m : \Pi (x y : A) -> x A.+ y = x B.+ y) (e : A) : A.negative e = B.negative e
      => Group.inverse-equality A B z m e

  -- | An additive group with a tight apartness relation.
  \class With# \extends AddGroup, Set# {
    | \fix 8 #0 : E -> \Prop
    | #0-zro : Not (zro `#0)
    | #0-negative {x : E} : x `#0 -> negative x `#0
    | #0-+ (x y : E) : (x + y) `#0 -> x `#0 || y `#0
    | #0-tight {x : E} : Not (x `#0) -> x = zro

    | # x y => (x - y) `#0
    | #-irreflexive x-x#0 => #0-zro (transport #0 (negative-right _) x-x#0)
    | #-symmetric x-y#0 => transport #0 (negative_+ _ (negative _) *> pmap (`+ negative _) (negative-isInv _)) (#0-negative x-y#0)
    | #-comparison x y z x-z#0 =>
        \have s : (x - y) + (y - z) = x - z
                => +-assoc *> pmap (x +) (inv +-assoc *> pmap (`- z) (negative-left y) *> zro-left)
        \in #0-+ (x - y) (y - z) (transport #0 (inv s) x-z#0)
    | tightness {x} {y} x-y/#0 => fromZero x y (#0-tight x-y/#0)
  }

  -- | An additive group with decidable equality.
  \class Dec \extends With#, DecSet {
    | nonEqualApart {x : E} (x/=0 : x /= zro) : x `#0
    | #0-negative {x} x#0 => nonEqualApart (\lam -x=0 => #0-zro (transport #0 (inv (negative-isInv x) *> pmap negative -x=0 *> negative_zro) x#0))
    | #0-+ x y x+y#0 => \case decideEq y zro \with {
      | yes y=0 => byLeft (transport #0 (pmap (x +) y=0 *> zro-right) x+y#0)
      | no y/=0 => byRight (nonEqualApart y/=0)
    }
    | #0-tight {x} x/#0 => \case decideEq x zro \with {
      | yes x=0 => x=0
      | no x/=0 => absurd (x/#0 (nonEqualApart x/=0))
    }

    \default #0 x : \Prop => x /= zro
    \default #0-zro (zro/=0 : #0 zro) : Empty => zro/=0 idp
    \default nonEqualApart \as notEqualApartImpl {x} x#0 : #0 x => x#0
  }
}

\func \infixl 6 - {G : AddGroup} (x y : G) => x + negative y

\class CGroup \extends Group, CancelCMonoid
  | inverse-right x => *-comm *> inverse-left x

\class AbGroup \extends AddGroup, AbMonoid
  | negative-right x => +-comm *> negative-left x
  \where {
    \use \coerce fromCGroup (G : CGroup) => \new AbGroup G.E G.ide (G.*) G.ide-left G.*-assoc G.inverse G.inverse-left G.*-comm
    \use \coerce toCGroup (G : AbGroup) => \new CGroup G.E G.zro (G.+) G.zro-left G.+-assoc G.negative G.negative-left G.+-comm

    \func equals (A B : AbGroup) (p : A = {AddGroup} B) : A = B
      => path (\lam i => \new AbGroup {
        | AddGroup => p @ i
        | +-comm => pathInProp (\Pi {x y : p @ __} -> x + y = y + x) A.+-comm B.+-comm @ i
      })
  }
