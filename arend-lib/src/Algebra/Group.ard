\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Logic
\import Paths
\import Set

\class Group \extends CancelMonoid {
  | inverse : E -> E
  | inverse-left (x : E) : inverse x * x = ide
  | inverse-right (x : E) : x * inverse x = ide

  | cancel-left x y z p =>
      y                   ==< inv (ide-left y) >==
      ide * y             ==< pmap (\lam t => t * y) (inv (inverse-left x)) >==
      (inverse x * x) * y ==< *-assoc (inverse x) x y >==
      inverse x * (x * y) ==< pmap (inverse x *) p >==
      inverse x * (x * z) ==< inv (*-assoc (inverse x) x z) >==
      (inverse x * x) * z ==< pmap (\lam t => t * z) (inverse-left x) >==
      ide * z             ==< ide-left z >==
      z                   `qed
  | cancel-right x y z p =>
      x                   ==< inv (ide-right x) >==
      x * ide             ==< pmap (x *) (inv (inverse-right z)) >==
      x * (z * inverse z) ==< inv (*-assoc x z (inverse z)) >==
      (x * z) * inverse z ==< pmap (\lam t => t * inverse z) p >==
      (y * z) * inverse z ==< *-assoc y z (inverse z) >==
      y * (z * inverse z) ==< pmap (y *) (inverse-right z) >==
      y * ide             ==< ide-right y >==
      y                   `qed
} \where {
  \func op (G : Group) : Group \cowith
    | Monoid => Monoid.op G
    | inverse => G.inverse
    | inverse-left => G.inverse-right
    | inverse-right => G.inverse-left

  \open Monoid(Inv)

  \func equals (G H : Group) (p : G = {Monoid} H) : G = H
    => \let t => inverse-equality G H p
       \in path (\lam i =>
          \new Group {
            | Monoid => p @ i
            | inverse => t @ i
            | inverse-left => pathInProp (\lam j => \Pi (x : p @ j) -> (t @ j) x * x = ide) G.inverse-left H.inverse-left @ i
            | inverse-right => pathInProp (\lam j => \Pi (x : p @ j) -> x * (t @ j) x = ide) G.inverse-right H.inverse-right @ i
          })
    \where {
      \lemma inverse-equality (G H : Group) (p : G = {Monoid} H) : Path (\lam i => p @ i -> p @ i) G.inverse H.inverse
        => \let | q => pmap (\lam X => Monoid.E {X}) p
                | f x => coe (\lam i => p @ i) x right
                | g y => coe (\lam i => inv q @ i) y right
                | h' {H' : Monoid} (q : G = {Monoid} H') => transport (\lam (H' : Monoid) => MonoidHom G H') q (MonoidCategory.id G)
                | h => transport (\lam f' => MonoidHom G H f') (Jl (\lam (H' : Monoid) q => func {h' q} = (\lam x => coe (\lam i => q @ i) x right)) idp p) (\new (h' p))
                | h-inv (y : H) => MonoidHom.presInvElem h
                                      (\new Inv { | val => g y | inv => G.inverse (g y) | inv-left => G.inverse-left (g y) | inv-right => G.inverse-right (g y) })
                                      (\new Inv { | inv => H.inverse (f (g y)) | inv-left => H.inverse-left (f (g y)) | inv-right => H.inverse-right (f (g y)) })
                | t (y : H) =>
                    coe (\lam i => q @ i -> q @ i) G.inverse right y ==< transport_pi (\lam Z => Z) (\lam Z => Z) q G.inverse y >==
                    f (G.inverse (g y))                              ==< h-inv y >==
                    H.inverse (f (g y))                              ==< pmap H.inverse (transport_id_inv (\lam Z => Z) q y) >==
                    H.inverse y                                      `qed
           \in pathOver (path (\lam i y => t y @ i))
    }
}

\func \infixl 7 / {G : Group} (x y : G) => x * inverse y

\class AddGroup \extends AddMonoid {
  | negative : E -> E
  | negative-left (x : E) : negative x + x = zro
  | negative-right (x : E) : x + negative x = zro

  \lemma cancel-left (x y z : E) (p : x + y = x + z) : y = z =>
    Group.cancel-left {toGroup \this} x y z p

  \lemma cancel-right (x y z : E) (p : x + z = y + z) : x = y =>
    Group.cancel-right {toGroup \this} x y z p

  \lemma negative-isInv (x : E) : negative (negative x) = x =>
    cancel-left (negative x) (negative (negative x)) x (negative-right (negative x) *> inv (negative-left x))

  \lemma negative_+ (x y : E) : negative (x + y) = negative y - x => cancel-left (x + y) (negative (x + y)) (negative y - x) (
    (x + y) - (x + y)          ==< negative-right (x + y) >==
    zro                        ==< inv (negative-right x) >==
    x - x                      ==< pmap (x +) (inv (zro-left (negative x))) >==
    x + (zro - x)              ==< pmap (\lam t => x + (t - x)) (inv (negative-right y)) >==
    x + ((y - y) - x)          ==< pmap (x +) (+-assoc y (negative y) (negative x)) >==
    x + (y + (negative y - x)) ==< inv (+-assoc x y (negative y - x)) >==
    (x + y) + (negative y - x) `qed
  )

  \lemma negative_zro : negative zro = zro
    => inv (zro-right (negative zro)) *> negative-left zro

  \lemma minus_zro (x : E) : x - zro = x
    => pmap (x +) negative_zro *> zro-right x

  \lemma fromZero (x y : E) (x-y=0 : x - y = zro) : x = y =>
    x                    ==< inv (zro-right x) >==
    x + zro              ==< pmap (\lam t => x + t) (inv (negative-left y)) >==
    x + (negative y + y) ==< inv (+-assoc x (negative y) y) >==
    x - y + y            ==< pmap (\lam t => t + y) x-y=0 >==
    zro + y              ==< zro-left y >==
    y                    `qed

  \lemma toZero (x y : E) (x=y : x = y) : x - y = zro => transport (\lam t => x - t = zro) x=y (negative-right x)
} \where {
    \use \coerce fromGroup (G : Group) => \new AddGroup G.E G.ide (G.*) G.ide-left G.ide-right G.*-assoc G.inverse G.inverse-left G.inverse-right
    \use \coerce toGroup (G : AddGroup) => \new Group G.E G.zro (G.+) G.zro-left G.zro-right G.+-assoc G.negative G.negative-left G.negative-right

    \func equals (A B : AddGroup) (p : A = {\Set} B) (q : \let f x => coe (\lam i => p @ i) x right \in \Pi (x y : A) -> f (x + y) = f x + f y) : A = B
      => pmap {Group} {AddGroup} AddGroup.fromGroup (Group.equals A B (Monoid.equals {AddGroup.toGroup A} {AddGroup.toGroup B} p q))

  -- | An additive group with a tight apartness relation.
  \class With# \extends AddGroup, Set# {
    | \fix 8 #0 : E -> \Prop
    | #0-zro : Not (zro `#0)
    | #0-negative (x : E) : x `#0 -> negative x `#0
    | #0-+ (x y : E) : (x + y) `#0 -> x `#0 || y `#0
    | #0-tight (x : E) : Not (x `#0) -> x = zro

    | # x y => (x - y) `#0
    | #-irreflexive x x-x#0 => #0-zro (transport #0 (negative-right x) x-x#0)
    | #-symmetric x y x-y#0 => transport #0 (negative_+ x (negative y) *> pmap (\lam t => t + negative x) (negative-isInv y)) (#0-negative (x - y) x-y#0)
    | #-comparison x y z x-z#0 =>
        \let s : (x - y) + (y - z) = x - z
               => +-assoc x (negative y) (y - z) *> pmap (x +) (inv (+-assoc (negative y) y (negative z)) *> pmap (\lam t => t - z) (negative-left y) *> zro-left (negative z))
        \in #0-+ (x - y) (y - z) (transport #0 (inv s) x-z#0)
    | tightness x y x-y/#0 => fromZero x y (#0-tight (x - y) x-y/#0)
  }

  -- | An additive group with decidable equality.
  \class Dec \extends With#, DecSet
    | nonEqualApart (x : E) (x/=0 : Not (x = zro)) : x `#0
    | #0-negative x x#0 => nonEqualApart (negative x) (\lam -x=0 => #0-zro (transport #0 (inv (negative-isInv x) *> pmap negative -x=0 *> negative_zro) x#0))
    | #0-+ x y x+y#0 => \case decideEq y zro \with {
      | yes y=0 => byLeft (transport #0 (pmap (x +) y=0 *> zro-right x) x+y#0)
      | no y/=0 => byRight (nonEqualApart y y/=0)
    }
    | #0-tight x x/#0 => \case decideEq x zro \with {
      | yes x=0 => x=0
      | no x/=0 => absurd (x/#0 (nonEqualApart x x/=0))
    }
    \where
      \class Impl \extends Dec
        | #0 x => Not (x = zro)
        | #0-zro zro/=0 => zro/=0 idp
        | nonEqualApart x x#0 => x#0
}

\func \infixl 6 - {G : AddGroup} (x y : G) => x + negative y

\class CGroup \extends Group, CancelCMonoid
  | inverse-right x => *-comm x (inverse x) *> inverse-left x

\class AbGroup \extends AddGroup, AbMonoid
  | negative-right x => +-comm x (negative x) *> negative-left x
  \where {
    \use \coerce fromCGroup (G : CGroup) => \new AbGroup G.E G.ide (G.*) G.ide-left G.*-assoc G.inverse G.inverse-left G.*-comm
    \use \coerce toCGroup (G : AbGroup) => \new CGroup G.E G.zro (G.+) G.zro-left G.+-assoc G.negative G.negative-left G.+-comm

    \func equals (A B : AbGroup) (p : A = {AddGroup} B) : A = B
      => path (\lam i => \new AbGroup {
        | AddGroup => p @ i
        | +-comm => pathInProp (\lam j => \Pi (x y : p @ j) -> x + y = y + x) A.+-comm B.+-comm @ i
      })
  }
