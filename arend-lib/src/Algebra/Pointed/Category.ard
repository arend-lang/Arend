\import Algebra.Pointed
\import Category
\import Paths
\import Set.Category

\record PointedHom \extends SetHom {
  \override Dom : Pointed
  \override Cod : Pointed
  | func-ide : func ide = ide
} \where
    \func equals {X Y : Pointed} {f g : PointedHom X Y} (p : \Pi (x : X) -> f x = g x) : f = g
      => path (\lam i => \new PointedHom X Y (p __ @ i) (pathInProp (p ide @ __ = ide) f.func-ide g.func-ide @ i))

\instance PointedSetCat : Cat Pointed
  | Hom X Y => PointedHom X Y
  | id => id
  | o {X Y Z : Pointed} (g : PointedHom Y Z) (f : PointedHom X Y) => \new PointedHom {
    | func x => g (f x)
    | func-ide => pmap g f.func-ide *> g.func-ide
  }
  | id-left _ => idp
  | id-right _ => idp
  | o-assoc _ _ _ => idp
  | univalence {X Y : Pointed} (f : PointedHom X Y) (g : PointedHom Y X) p q =>
    \let X=Y => Pointed.equls (path (iso f g (\lam x => path (\lam i => func {p @ i} x)) (\lam y => path (\lam i => func {q @ i} y)))) f.func-ide
    \in (X=Y, PointedHom.equals (\lam x => Jl {Pointed} (\lam Z X=Z => func {transport (PointedHom X __) X=Z (id X)} x = coe (X=Z @ __) x right) idp X=Y))
  \where
    \func id (X : Pointed) : PointedHom X X \cowith
      | func x => x
      | func-ide => idp
