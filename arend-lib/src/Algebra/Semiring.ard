\import Algebra.Monoid
\import Paths

\class Semiring \extends AbMonoid {
  | mulMonoid : Monoid E
  | ldistr (x y z : E) : x mulMonoid.* (y + z) = x mulMonoid.* y + x mulMonoid.* z
  | rdistr (x y z : E) : (x + y) mulMonoid.* z = x mulMonoid.* z + y mulMonoid.* z
  | addId_*-left (x : E) : addId mulMonoid.* x = addId
  | addId_*-right (x : E) : x mulMonoid.* addId = addId
}

\class CSemiring \extends Semiring {
  | mulCMonoid : CMonoid E
  | mulMonoid => mulCMonoid
  | rdistr x y z => mulCMonoid.*-comm (x + y) z *> ldistr z x y *> pmap2 (+) (mulCMonoid.*-comm z x) (mulCMonoid.*-comm z y)
  | addId_*-right x => mulCMonoid.*-comm x addId *> addId_*-left x
}
