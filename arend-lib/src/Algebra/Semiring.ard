\import Algebra.Monoid
\import Paths

\class Semiring \extends AbMonoid, Monoid {
  | ldistr {x y z : E} : x * (y + z) = x * y + x * z
  | rdistr {x y z : E} : (x + y) * z = x * z + y * z
  | zro_*-left {x : E} : zro * x = zro
  | zro_*-right {x : E} : x * zro = zro

  | natCoef : Nat -> E
  \default natCoef \as natCoefImpl n \with {
    | 0 => zro
    | suc n => natCoefImpl n + ide
  }
  | natCoefZero : natCoef 0 = zro
  \default natCoefZero \as natCoefZeroImpl : natCoefImpl 0 = zro => idp
  | natCoefSuc (n : Nat) : natCoef (suc n) = natCoef n + ide
  \default natCoefSuc \as natCoefSucImpl n : natCoefImpl (suc n) = natCoefImpl n + ide => idp
} \where {
    \func op (R : Semiring) : Semiring \cowith
      | AbMonoid => R
      | Monoid => Monoid.op R
      | ldistr {_} {_} {_} => R.rdistr
      | rdistr {_} {_} {_} => R.ldistr
      | zro_*-left => zro_*-right
      | zro_*-right => zro_*-left
  }

\class CSemiring \extends Semiring, CMonoid
  | rdistr {_} {_} {_} => *-comm *> ldistr *> pmap2 (+) *-comm *-comm
  | zro_*-right {_} => *-comm *> zro_*-left
