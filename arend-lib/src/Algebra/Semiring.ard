\import Algebra.Monoid
\import Paths

\class Semiring \extends AbMonoid, Monoid
  | ldistr (x y z : E) : x * (y + z) = x * y + x * z
  | rdistr (x y z : E) : (x + y) * z = x * z + y * z
  | addId_*-left (x : E) : addId * x = addId
  | addId_*-right (x : E) : x * addId = addId

\class CSemiring \extends Semiring, CMonoid
  | rdistr x y z => *-comm (x + y) z *> ldistr z x y *> pmap2 (+) (*-comm z x) (*-comm z y)
  | addId_*-right x => *-comm x addId *> addId_*-left x
