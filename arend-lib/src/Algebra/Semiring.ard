\import Algebra.Monoid
\import Paths

\class Semiring \extends AbMonoid, Monoid
  | ldistr (x y z : E) : x * (y + z) = x * y + x * z
  | rdistr (x y z : E) : (x + y) * z = x * z + y * z
  | zro_*-left (x : E) : zro * x = zro
  | zro_*-right (x : E) : x * zro = zro
  \where {
    \func op (R : Semiring) : Semiring \cowith
      | AbMonoid => R
      | Monoid => Monoid.op R
      | ldistr x y z => R.rdistr y z x
      | rdistr x y z => R.ldistr z x y
      | zro_*-left => zro_*-right
      | zro_*-right => zro_*-left
  }

\class CSemiring \extends Semiring, CMonoid
  | rdistr x y z => *-comm (x + y) z *> ldistr z x y *> pmap2 (+) (*-comm z x) (*-comm z y)
  | zro_*-right x => *-comm x zro *> zro_*-left x
