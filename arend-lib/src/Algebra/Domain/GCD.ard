\import Algebra.Domain
\import Algebra.Domain.IntegrallyClosed
\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Monoid.Prime
\import Algebra.Monoid.Sub
\import Algebra.Ring
\import Algebra.Ring.Localization
\import Algebra.Ring.Poly
\import Algebra.Semiring
\import Arith.Nat
\import Data.Or
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\open Monoid(LDiv,Inv)

\class GCDDomain \extends IntegralDomain {
  | isGCDDomain (x y : E) : x `#0 -> y `#0 -> TruncP (GCD x y)

  \func nonZeroMonoid : GCDMonoid \cowith
    | CancelCMonoid => IntegralDomain.nonZeroMonoid
    | isGCD x y =>
      \have | (inP (g : GCD x.1 y.1)) => isGCDDomain x.1 y.1 x.2 y.2
            | g*x#0 => transport #0 (inv g.gcd|val1.inv-right) x.2
            | g#0 => #0-*-left g*x#0
      \in inP (\new GCD {
                 | gcd => (g.gcd, g#0)
                 | gcd|val1 => \new LDiv {
                   | inv => (g.gcd|val1.inv, #0-*-right g*x#0)
                   | inv-right => ext g.gcd|val1.inv-right
                 }
                 | gcd|val2 => \new LDiv {
                   | inv => (g.gcd|val2.inv, #0-*-right (transport #0 (inv g.gcd|val2.inv-right) y.2))
                   | inv-right => ext g.gcd|val2.inv-right
                 }
                 | gcd-univ h (h|x : LDiv h x) (h|y : LDiv h y) =>
                   \have h|g : LDiv h.1 g.gcd => g.gcd-univ h.1 (\new LDiv h.1 x.1 h|x.inv.1 (pmap __.1 h|x.inv-right))
                                                                (\new LDiv h.1 y.1 h|y.inv.1 (pmap __.1 h|y.inv-right))
                   \in \new LDiv {
                     | inv => (h|g.inv, #0-*-right (transport #0 (inv h|g.inv-right) g#0))
                     | inv-right => ext h|g.inv-right
                   }
               })

  \func gcd_0 (x : E) : GCD x 0 x \cowith
    | gcd|val1 => \new LDiv {
      | inv => 1
      | inv-right => ide-right
    }
    | gcd|val2 => \new LDiv {
      | inv => 0
      | inv-right => zro_*-right
    }
    | gcd-univ g g|a _ => g|a

  \func gcd_sum (d : E) (g : GCD {\this}) : GCD (g.val1 + g.val2 * d) g.val2 g.gcd \cowith
    | gcd|val1 => \new LDiv {
      | inv => g.gcd|val1.inv + g.gcd|val2.inv * d
      | inv-right => ldistr *> pmap2 (+) g.gcd|val1.inv-right (inv *-assoc *> pmap (`* d) g.gcd|val2.inv-right)
    }
    | gcd|val2 => g.gcd|val2
    | gcd-univ g' (g'|a+bd : LDiv) (g'|b : LDiv) => g.gcd-univ g' (\new LDiv {
      | inv => g'|a+bd.inv - g'|b.inv * d
      | inv-right => ldistr *> pmap2 (+) g'|a+bd.inv-right (Ring.negative_*-right *> pmap negative (inv *-assoc *> pmap (`* d) g'|b.inv-right)) *> simplify
    }) g'|b
} \where {
  \class Dec \extends GCDDomain, IntegralDomain.Dec, IntegrallyClosedDomain {
    | isIntegrallyClosedDomain x xi => \case Dec.coprime-repr-aux x, \elim xi \with {
      | inP c, inP d => \case loc_poly (\lam s p => nonZero-cancel-right (apartNonZero s) p) d.1 d.2 (rewriteF c.5 d.3) \with {
        | inP e => rewrite c.5 \case decide#0 c.1 \with {
          | inl q => inP (0, LocRing.equals1 _ equation)
          | inr c1#0 => inP (_, inv $ div_loc $ nonZero_ldiv $ gcd_pow_div {nonZeroMonoid} {c.2,c.3} {c.1,c1#0} {e.1}
                          (transport (LDiv _) (ext $ inv subMonoid.embed.func-pow) $ ldiv_nonZero {_} {_} {_} {_} {pow_#0 c1#0} e.2) $ \new GCD {
                            | gcd|val1 => LDiv.ide-div
                            | gcd|val2 => LDiv.ide-div
                            | gcd-univ g g|c2 g|c1 => ldiv_nonZero $ GCD.gcd-univ {c.4} g.1 (nonZero_ldiv g|c1) (nonZero_ldiv g|c2)
                          })
        }
      }
    }

    \lemma coprime-repr (x : LocRing subMonoid) => coprime-repr-aux x

    \func gcd_*_div {a b c : E} (a|bc : LDiv a (b * c)) (a_b : GCD a b 1) : LDiv a c
      => \case decideEq a 0, decideEq b 0, decideEq c 0 \with {
           | yes a=0, no b/=0, _ =>
             \have t : c = 0 => Domain.nonZero-left b/=0 (inv a|bc.inv-right *> pmap (`* _) a=0 *> zro_*-left)
             \in transportInv (LDiv a __) t Semiring.zero-div
           | _, yes b=0, _ => LDiv.trans (a_b.gcd-univ a LDiv.id-div (transportInv (LDiv a __) b=0 Semiring.zero-div)) LDiv.ide-div
           | _, _, yes c=0 => \new LDiv {
             | inv => 0
             | inv-right => zro_*-right *> inv c=0
           }
           | no a/=0, no b/=0, no c/=0 => Domain.nonZero_ldiv (Algebra.Monoid.GCD.gcd_*_div {nonZeroMonoid} {a, nonZeroApart a/=0} {b, nonZeroApart b/=0} {c, nonZeroApart c/=0} (Domain.ldiv_nonZero a|bc) (IntegralDomain.gcd_nonZero _ _ a_b))
      }

    \lemma gcd (a b : E) : TruncP (GCD a b)
      => \case decideEq a 0, decideEq b 0 \with {
           | yes a=0, _ => inP (GCD.swap {transportInv (GCD b __) a=0 (gcd_0 b)})
           | _, yes b=0 => inP (transportInv (GCD a __) b=0 (gcd_0 a))
           | no a/=0, no b/=0 => isGCDDomain a b (nonZeroApart a/=0) (nonZeroApart b/=0)
         }

    \lemma irr-isPrime (p : Irr {\this}) : Prime p p.notInv \cowith
      | isCancelable-left => p.isCancelable-left
      | isPrime {x} {y} (p|x*y : LDiv) => \case decideEq x 0, decideEq y 0 \with {
        | yes x=0, _ => byLeft (\new LDiv p x 0 (zro_*-right *> inv x=0))
        | _, yes y=0 => byRight (\new LDiv p y 0 (zro_*-right *> inv y=0))
        | no x/=0, no y/=0 =>
          \let | elem : nonZeroMonoid => (p, #0-*-left (transportInv #0 p|x*y.inv-right (#0-* (nonZeroApart x/=0) (nonZeroApart y/=0))))
               | irr => \new Irr {nonZeroMonoid} elem {
                          | notInv => \lam i => p.notInv (Domain.nonZero_inv elem.2 i)
                          | isIrr {a} {b} p=a*b => \case p.isIrr (pmap __.1 p=a*b) \with {
                            | byLeft t => byLeft (Domain.inv_nonZero a.2 t)
                            | byRight t => byRight (Domain.inv_nonZero b.2 t)
                          }
                          | isCancelable-left {a} {b} p*a=p*b => ext (p.isCancelable-left (pmap __.1 p*a=p*b))
                        }
          \in \case Prime.isPrime {Algebra.Monoid.Prime.irr-isPrime irr} {x, nonZeroApart x/=0} {y, nonZeroApart y/=0} (\new LDiv {
            | inv => (p|x*y.inv, #0-*-right (transportInv #0 p|x*y.inv-right (#0-* (nonZeroApart x/=0) (nonZeroApart y/=0))))
            | inv-right => ext p|x*y.inv-right
          }) \with {
                  | byLeft (p|x : LDiv) => byLeft (\new LDiv p x p|x.inv.1 (pmap __.1 p|x.inv-right))
                  | byRight (p|y : LDiv) => byRight (\new LDiv p y p|y.inv.1 (pmap __.1 p|y.inv-right))
                }
      }
  } \where {
    \lemma coprime-repr-aux {D : GCDDomain} {dec : IntegralDomain.Dec { | IntegralDomain => D }} (x : LocRing D.subMonoid)
      : ∃ (a b : E) (b#0 : #0 b) (GCD a b 1) (x = inl~ (a, b, b#0))
      | in~ (x,y,y#0) => \case decideEq x 0 \with {
        | yes x=0 => inP (0, 1, zro#ide, div_gcd LDiv.ide-div, LocRing.equals1 _ equation)
        | no x/=0 => TruncP.map (isGCDDomain x y (nonZeroApart x/=0) y#0) \lam (gcd : GCD x y) =>
            (gcd.gcd|val1.inv, gcd.gcd|val2.inv, #0-*-right $ transportInv #0 gcd.gcd|val2.inv-right y#0,
             gcd.reduce $ \lam {x} {y} => nonZero-cancel-left $ \lam gcd=0 => x/=0 $ inv gcd.gcd|val1.inv-right *> equation,
             LocRing.equals1 _ $ equation {usingOnly (gcd.gcd|val1.inv-right, gcd.gcd|val2.inv-right)})
      }

    \lemma loc_poly {R : CRing} {S : SubMonoid R} (nt : \Pi {a : R} -> S a -> \Pi {x y : R} -> x * a = y * a -> x = y)
                    (p : Poly R) (m : isMonic p) {a b : R} {Sb : S b} (e : polyEval (polyMap locMap p) (inl~ (a,b,Sb)) = 0)
      : ∃ (n : Nat) (LDiv b (pow a n)) \elim m
      | inP (n, d, m) => inP (n, \new LDiv {
        | inv => negative $ R.BigSum $ \new Array R n $ \lam j => polyCoef p j * pow a j * pow b (n -' suc j)
        | inv-right => \have | s i q : locMap (polyCoef p i * pow a i * pow b (n -' i)) = polyCoef (polyMap locMap p) i * pow (inl~ (a,b,Sb)) i * pow (locMap b) n
                                 => locMap.func-* *> pmap (locMap _ *) locMap.func-pow *> pmap (`* _) (locMap.func-* *> pmap2 (*) (inv (polyCoef_polyMap {locMap})) locMap.func-pow) *> *-assoc *> pmap (_ *) (later $ rewriteI {2} (<=_exists q) $ rewrite pow_+ $ pmap (`* _) (pmap (pow __ i) (LocRing.equals1 _ simplify) *> pow_*-comm) *> *-assoc) *> inv *-assoc
                             | t => inv (BigSum_suc {_} {n} {\lam j => polyCoef p j * pow a j * pow b (n -' j)}) *> locMap-inj nt (locMap.func-BigSum {\new Array R (suc n) $ \lam j => polyCoef p j * pow a j * pow b (n -' j)} *> path (\lam i => BigSum (\new Array (LocRing S) (suc n) $ \lam j => s j (<_suc_<= $ fin_< j) i)) *> inv (BigSum-rdistr {_} {\new Array (LocRing S) (suc n) $ \lam j => polyCoef (polyMap locMap p) j * pow (inl~ (a,b,Sb)) j}) *> pmap (`* pow (locMap b) n) (inv (polyEval_polyCoef $ degree<=_degree< $ degree<=_polyMap d) *> e) *> zro_*-left)
                             | q (j : Fin n) => *-comm *> pmap (pow b) {suc (n -' suc j)} (NatSemiring.cancel-left j $ <=_exists (suc_<_<= $ fin_< j) *> inv (<=_exists $ LinearOrder.<_<= $ fin_< j))
                       \in negative-unique _ (pmap (`+ _) (negative_*-right *> pmap negative (BigSum-ldistr *> pmap BigSum (exts \lam j => equation {usingOnly (q j)}))) *> negative-left) (pmap (_ +) (later (rewrite (m,-'id) simplify) *> inv (pmap (\lam x => polyCoef p x * pow a x * pow b (n -' x)) (mod_< id<suc))) *> t)
      })
  }
}
