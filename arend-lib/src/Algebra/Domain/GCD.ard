\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Logic
\import Paths
\open Monoid(LDiv,Inv)

\class GCDDomain \extends IntegralDomain {
  | isGCD (x y : \Sigma (x : E) (x # zro)) : TruncP (GCD {IntegralDomain.nonZeroMonoid} x y)

  \func nonZeroMonoid : GCDMonoid \cowith
    | CancelCMonoid => IntegralDomain.nonZeroMonoid
    | isGCD => isGCD

  \func fromField (K : Field) : GCDDomain \cowith
    | IntegralDomain => IntegralDomain.fromField K
    | isGCD x y => inP (\new GCD {
      | gcd => ide {IntegralDomain.nonZeroMonoid {IntegralDomain.fromField K}}
      | gcd|val1 => \new LDiv { | inv => x | inv-right => SigmaPropExt (\lam t => Inv {K} (t - K.zro)) _ _ (K.ide-left x.1)}
      | gcd|val2 => \new LDiv { | inv => y | inv-right => SigmaPropExt (\lam t => Inv {K} (t - K.zro)) _ _ (K.ide-left y.1)}
      | gcd-univ g g|x g|y =>
        \let | j => (LDiv.inv {g|x}).1 K.* LDiv.inv {x.2}
             | j-inv =>
               g.1 K.* j                                       ==< inv (K.*-assoc _ _ _) >==
               (g.1 K.* (LDiv.inv {g|x}).1) K.* LDiv.inv {x.2} ==< pmap (\lam t => t.1 K.* LDiv.inv {x.2}) (LDiv.inv-right {g|x}) >==
               x.1 K.* LDiv.inv {x.2}                          ==< pmap (\lam t => t K.* LDiv.inv {x.2}) (inv (AddGroup.minus_zro {K} x.1)) >==
               (x.1 - K.zro) K.* LDiv.inv {x.2}                ==< LDiv.inv-right {x.2} >==
               K.ide                                           `qed
        \in \new LDiv {
          | inv => (j, transport (\lam t => Inv {K} t) (inv (AddGroup.minus_zro {K} j)) (Inv.lmake {K} g.1 j-inv))
          | inv-right => SigmaPropExt (\lam t => t # {IntegralDomain.fromField K} K.zro) _ _ j-inv
        }
    })
}
