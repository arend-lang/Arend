\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Logic
\import Paths
\open Monoid(LDiv,Inv)

\class GCDDomain \extends IntegralDomain {
  | isGCD (x y : E) : x # zro -> y # zro -> TruncP (GCD x y)

  \func nonZeroMonoid : GCDMonoid \cowith
    | CancelCMonoid => IntegralDomain.nonZeroMonoid
    | isGCD x y => \case isGCD x.1 y.1 x.2 y.2 \with {
      | inP (g : GCD x.1 y.1) =>
        \let | g*x#0 => transport (\lam t => t # zro) (inv g.gcd|val1.inv-right) x.2
             | g#0 => Domain.apart-product-left g.gcd g.gcd|val1.inv g*x#0
        \in inP (\new GCD {
                   | gcd => (g.gcd, g#0)
                   | gcd|val1 => \new LDiv {
                     | inv => (g.gcd|val1.inv, Domain.apart-product-right g.gcd g.gcd|val1.inv g*x#0)
                     | inv-right => SigmaPropExt (\lam t => t # zro) _ x g.gcd|val1.inv-right
                   }
                   | gcd|val2 => \new LDiv {
                     | inv => (g.gcd|val2.inv, Domain.apart-product-right g.gcd g.gcd|val2.inv (transport (\lam t => t # zro) (inv g.gcd|val2.inv-right) y.2))
                     | inv-right => SigmaPropExt (\lam t => t # zro) _ y g.gcd|val2.inv-right
                   }
                   | gcd-univ h (h|x : LDiv h x) (h|y : LDiv h y) =>
                     \let h|g : LDiv h.1 g.gcd => g.gcd-univ h.1 (\new LDiv h.1 x.1 h|x.inv.1 (pmap (\lam t => t.1) h|x.inv-right))
                                                                 (\new LDiv h.1 y.1 h|y.inv.1 (pmap (\lam t => t.1) h|y.inv-right))
                     \in \new LDiv {
                       | inv => (h|g.inv, Domain.apart-product-right h.1 h|g.inv (transport (\lam t => t # zro) (inv h|g.inv-right) g#0))
                       | inv-right => SigmaPropExt (\lam t => t # zro) _ (g.gcd, g#0) h|g.inv-right
                     }
                 })
    }
} \where {
  \func fromField (K : Field) : GCDDomain \cowith
    | IntegralDomain => IntegralDomain.fromField K
    | isGCD x y (x#0 : Inv (x - zro)) (y#0 : Inv (y - zro)) => inP (\new GCD {
      | gcd => ide
      | gcd|val1 => \new LDiv { | inv => x | inv-right => K.ide-left x }
      | gcd|val2 => \new LDiv { | inv => y | inv-right => K.ide-left y }
      | gcd-univ g (g|x : LDiv g x) (g|y : LDiv g y) => \new LDiv {
        | inv => g|x.inv K.* x#0.inv
        | inv-right =>
          g K.* (g|x.inv K.* x#0.inv) ==< inv (K.*-assoc g g|x.inv x#0.inv) >==
          (g K.* g|x.inv) K.* x#0.inv ==< pmap (\lam t => t K.* x#0.inv) g|x.inv-right >==
          x K.* x#0.inv               ==< pmap (\lam t => t K.* x#0.inv) (inv (AddGroup.minus_zro {K} x)) >==
          (x - K.zro) K.* x#0.inv     ==< x#0.inv-right >==
          K.ide                       `qed
      }
    })
}
