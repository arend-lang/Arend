\import Algebra.Domain
\import Algebra.Monoid
\import Algebra.Pointed
\import Arith.Nat
\import Data.Or
\import Logic
\import Order.StrictOrder
\import Relation.Apartness
\open IntegralDomain(nonZeroMonoid)
\open Monoid(LDiv)
\open NatLE(<=)

\func DedekindHasse (D : IntegralDomain) => \Sigma (f : nonZeroMonoid {D} -> Nat) (is f)
  \where
    \func is {D : IntegralDomain} (f : nonZeroMonoid {D} -> Nat) =>
      \Pi (a b : nonZeroMonoid) -> LDiv a.1 b.1 `Or` (\Sigma (q q' : D) (p : q * a.1 + q' * b.1 # zro) (f (q * a.1 + q' * b.1, p) < f a))

\func euclideanAlgorithm {D : IntegralDomain} (a b : nonZeroMonoid {D}) (f : DedekindHasse D) (n : Nat) (p : f.1 a <= n)
  : \Sigma (s t : D) (LDiv (s * a.1 + t * b.1) a.1) (LDiv (s * a.1 + t * b.1) b.1)
  => {?}

\class DedekindHasseDomain \extends IntegralDomain
  | dedekindHasse : TruncP (DedekindHasse \this)
