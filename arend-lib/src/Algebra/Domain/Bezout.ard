\import Algebra.Domain
\import Algebra.Domain.GCD(GCDDomain)
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Logic
\import Paths
\open Monoid(LDiv)

\class BezoutDomain \extends GCDDomain
  | isBezout (a b : E) : a `#0 -> b `#0 -> TruncP (\Sigma (s t : E) (LDiv (s * a + t * b) a) (LDiv (s * a + t * b) b))
  | isGCD x y x#0 y#0 => TruncP.map (isBezout x y x#0 y#0) (\lam p => \new GCD x y {
    | gcd => p.1 * x + p.2 * y
    | gcd|val1 => p.3
    | gcd|val2 => p.4
    | gcd-univ g (g|x : LDiv g x) (g|y : LDiv g y) => \new LDiv {
      | inv => p.1 * g|x.inv + p.2 * g|y.inv
      | inv-right =>
        g * (p.1 * g|x.inv + p.2 * g|y.inv)       ==< ldistr g (p.1 * g|x.inv) (p.2 * g|y.inv) >==
        g * (p.1 * g|x.inv) + g * (p.2 * g|y.inv) ==< inv (pmap2 (+) (*-assoc g p.1 g|x.inv) (*-assoc g p.2 g|y.inv)) >==
        (g * p.1) * g|x.inv + (g * p.2) * g|y.inv ==< pmap2 (__ * g|x.inv + __ * g|y.inv) (*-comm g p.1) (*-comm g p.2) >==
        (p.1 * g) * g|x.inv + (p.2 * g) * g|y.inv ==< pmap2 (+) (*-assoc p.1 g g|x.inv) (*-assoc p.2 g g|y.inv) >==
        p.1 * (g * g|x.inv) + p.2 * (g * g|y.inv) ==< pmap2 (p.1 * __ + p.2 * __) g|x.inv-right g|y.inv-right >==
        p.1 * x + p.2 * y                         `qed
    }
  })
