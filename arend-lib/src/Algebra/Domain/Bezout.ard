\import Algebra.Domain.GCD(GCDDomain)
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.GCD
\import Algebra.Ring
\import Algebra.Ring.Reduced
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\open Monoid(LDiv)

\class BezoutRing \extends CRing {
  | isBezout : IsBezout

  \lemma gcd_bezout {a b c : E} (gcd : GCD a b c) : âˆƒ (s t : E) (s * a + t * b = c)
    => TruncP.map (isBezout a b) \lam (s,t,d1,d2) =>
        \let (w,q) => gcd.gcd-univ (s * a + t * b) d1 d2
        \in (w * s, w * t, equation)
}

\class BezoutDomain \extends GCDDomain, BezoutRing {
  | isGCDDomain x y _ _ => TruncP.map (isBezout x y) (\lam p => bezoutGCD p.3 p.4)
} \where {
  \class Dec \extends StrictBezoutDomain, GCDDomain.Dec
    | isStrictBezout => PPRing.bezout->strictBezout isBezout
}

\class StrictBezoutDomain \extends BezoutDomain {
  | isStrictBezout : IsStrictBezout
  \default isBezout a b => TruncP.map (isStrictBezout a b) \lam (s,t,u,v,p,q) => (t, s, \new LDiv {
    | inv => v
    | inv-right => equation
  }, \new LDiv {
    | inv => u
    | inv-right => equation
  })
}