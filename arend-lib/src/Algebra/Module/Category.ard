\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Linear.Matrix
\import Algebra.Meta
\import Algebra.Module
\import Algebra.Monoid
\import Algebra.Ring
\import Arith.Fin
\import Arith.Nat
\import Category
\import Category.Meta
\import Data.Array
\import Data.Fin (nat_fin_=)
\import Data.Or
\import Equiv (Equiv)
\import Function \hiding (id, o)
\import Function.Meta
\import HLevel
\import Logic
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\open AddMonoid

\record LinearMap {R : Ring} \extends AddGroupHom {
  \override Dom : LModule { | R => R }
  \override Cod : LModule { | R => R }
  | func-*c {r : R} {x : Dom} : func (r *c x) = r *c func x

  \lemma linearComb {c : Array R} {l : Array Dom c.len} : func (BigSum (\lam j => c j *c l j)) = BigSum (\lam j => c j *c func (l j)) \elim c, l
    | nil, nil => func-zro
    | b :: c, a :: l => unfold BigSum $ func-+ *> pmap2 (+) func-*c linearComb
} \where {
  \lemma extend-unique {R : Ring} {U V : LModule' R} {l : Array U} (lb : U.IsBasis l) (lv : Array V l.len) : isProp (\Sigma (f : LinearMap' U V) (\Pi (j : Fin l.len) -> f (l j) = lv j))
    => \lam t s => ext $ exts \lam u => rewrite (U.basis-split-char {_} {lb}) $ func-BigSum *> pmap BigSum (exts \lam j => func-*c *> pmap (_ *c) (t.2 j *> inv (s.2 j)) *> inv func-*c) *> inv func-BigSum

  \func extend {R : Ring} {U V : LModule' R} {l : Array U} (lb : U.IsBasis l) (lv : Array V l.len) : LinearMap' U V \cowith
    | func x => BigSum (\lam j => U.basis-split lb x j *c lv j)
    | func-+ {x} {y} => pmap BigSum (exts \lam j => pmap (`*c _) (U.independent-split-unique lb.1 {_} {\lam j => U.basis-split lb x j + U.basis-split lb y j} (inv U.basis-split-char *> pmap2 (+) U.basis-split-char (U.basis-split-char {_} {lb}) *> inv (U.BigSum_+ {_} {\lam j => U.basis-split lb x j *c l j}) *> pmap BigSum (exts \lam j => inv U.*c-rdistr)) j) *> *c-rdistr) *> V.BigSum_+ {_} {\lam j => U.basis-split lb x j *c lv j}
    | func-*c {r} {x} => pmap BigSum (exts \lam j => pmap (`*c _) (U.independent-split-unique lb.1 {_} {\lam j => r * U.basis-split lb x j} (inv U.basis-split-char *> pmap (r *c) (U.basis-split-char {_} {lb}) *> U.*c_BigSum-ldistr *> pmap BigSum (exts \lam j => inv *c-assoc)) j) *> *c-assoc) *> inv V.*c_BigSum-ldistr

  \lemma extend-char {R : Ring} {U V : LModule' R} {l : Array U} (lb : U.IsBasis l) (lv : Array V l.len) (j : Fin l.len) : extend lb lv (l j) = lv j
    => V.BigSum-unique {\lam k => U.basis-split lb (l j) k *c lv k} j (\lam k j/=k => pmap (`*c _) (U.basis_split_/= j/=k) *> V.*c_zro-left) *> pmap (`*c _) U.basis_split_= *> ide_*c

  \lemma basis-ext {R : Ring} {U V : LModule' R} (f g : LinearMap' U V) {l : Array U} (lb : U.IsGenerated l) (p : \Pi (j : Fin l.len) -> f (l j) = g (l j)) (u : U) : f u = g u
    => \case lb u \with {
         | inP (c,q) => rewrite q $ f.func-BigSum *> pmap BigSum (exts \lam j => f.func-*c *> pmap (c j *c) (p j) *> inv g.func-*c) *> inv g.func-BigSum
       }

  \func toMatrix {R : Ring} {U V : LModule' R} (f : LinearMap' U V) {lu : Array U} {lv : Array V} (bu : U.IsBasis lu) (bv : V.IsBasis lv) : Matrix R lu.len lv.len
    => mkMatrix \lam i => V.basis-split bv $ f (lu i)

  \lemma toMatrix_ide {R : Ring} {U : LModule' R} {l : Array U} (lb : U.IsBasis l) : toMatrix (id {LModuleCat R} U) lb lb = 1
    => matrixExt \lam i j => U.basis_split_basis

  \lemma toMatrix_* {R : Ring} {U V W : LModule' R} (f : LinearMap' U V) (g : LinearMap' V W) {lu : Array U} {lv : Array V} {lw : Array W} (bu : U.IsBasis lu) (bv : V.IsBasis lv) (bw : W.IsBasis lw)
    : toMatrix (g ∘ {LModuleCat R} f) bu bw = toMatrix f bu bv MatrixRing.product toMatrix g bv bw
    => matrixExt \lam i j =>
        \let h j : Array R lv.len => \lam k => V.basis-split bv (f (lu i)) k R.* W.basis-split bw (g (lv k)) j
        \in W.independent-split-unique bw.1 {_} {\lam j => BigSum (h j)} (inv W.basis-split-char *> pmap g (V.basis-split-char {lv} {bv}) *> g.linearComb *>
              pmap BigSum (exts \lam j => pmap (_ *c) (W.basis-split-char {lw} {bw}) *> W.*c_BigSum-ldistr *> pmap BigSum (exts \lam k => inv *c-assoc)) *> W.BigSum-transpose _ *> inv (path (\lam i' => BigSum (\new Array W lw.len \lam j => W.*c_BigSum-rdistr {\new Array R lv.len (h j)} {lw j} i')))) j
}

\meta LinearMap' A B => LinearMap { | R => _ | Dom => A | Cod => B }

\lemma linearMap_zro {R : Ring} {A B : LModule' R} : LinearMap' A B { | func a => 0 } \cowith
  | func-+ => inv zro-left
  | func-*c => inv B.*c_zro-right

\lemma linearMap_+ {R : Ring} {A B : LModule' R} (f g : LinearMap' A B) : LinearMap' A B { | func a => f a + g a } \cowith
  | func-+ => pmap2 (+) f.func-+ g.func-+ *> equation
  | func-*c => pmap2 (+) f.func-*c g.func-*c *> inv *c-ldistr

\lemma linearMap_negative {R : Ring} {A B : LModule' R} (f : LinearMap' A B) : LinearMap' A B { | func a => negative (f a) } \cowith
  | func-+ => pmap negative f.func-+ *> B.negative_+ *> +-comm
  | func-*c => pmap negative f.func-*c *> inv B.*c_negative-right

\lemma linearMap_BigSum {R : Ring} {A B : LModule' R} {m : Nat} (f : Fin m -> LinearMap' A B) : LinearMap' A B { | func a => BigSum (\lam i => f i a) } \cowith
  | func-+ => cong (ext (\lam i => func-+)) *> B.BigSum_+
  | func-*c => cong (ext (\lam i => func-*c)) *> inv B.*c_BigSum-ldistr

\func arrayLinearMap {R : Ring} {V : LModule' R} (v : Array V) : LinearMap' (ArrayLModule v.len (RingLModule R)) V \cowith
  | func c => BigSum \lam j => c j *c v j
  | func-+ {x} {y} => pmap BigSum (exts \lam j => *c-rdistr) *> V.BigSum_+ {_} {\lam j => x j *c v j}
  | func-*c => pmap BigSum (exts \lam j => *c-assoc) *> inv V.*c_BigSum-ldistr
  \where {
    \lemma surj-char {v : Array V} : isSurj (arrayLinearMap v) <-> V.IsGenerated v
      => (\lam s x => TruncP.map (s x) \lam t => (t.1, inv t.2), \lam g x => TruncP.map (g x) \lam t => (t.1, inv t.2))

    \lemma inj-char {v : Array V} : isInj (arrayLinearMap v) <-> V.IsIndependent v
      => (\lam inj c p j => path (\lam i => inj {c} {\lam _ => 0} (p *> inv (BigSum_zro \lam j => V.*c_zro-left)) i j),
          \lam ind {l} {l'} p => unfold at p $ exts \lam j => R.fromZero $ ind (\lam j => l j - l' j) (later (pmap BigSum (exts \lam j => V.*c-rdistr *> pmap (_ +) V.*c_negative-left) *> V.BigSum_+ {_} {\lam j => l j *c v j}) *> pmap (_ +) (inv V.BigSum_negative) *> V.toZero p) j )

    \lemma equiv-char {v : Array V} : Equiv (arrayLinearMap v) <-> V.IsBasis v
      => (\lam e => (inj-char.1 (Equiv.isInj {e}), surj-char.1 (Equiv.isSurj {e})), \lam b => Equiv.fromInjSurj _ (inj-char.2 b.1) (surj-char.2 b.2))
  }

\record BilinearMap {R : Ring} (A B C : LModule' R) (\coerce func : A -> B -> C)
  | linear-left {b : B} : LinearMap' A C { | func => func __ b }
  | linear-right {a : A} : LinearMap' B C { | func => func a }

\func isMultiLinear {R : Ring} {n : Nat} {A B : LModule' R} (f : Array A n -> B) : \Prop \elim n
  | 0 => \Sigma
  | suc n => \Pi (l : Array A n) (j : Fin (suc n)) -> LinearMap' A B { | func x => f (insert x l j) }
  \where {
    \lemma reduce {n : Nat} (f : Array A (suc n) -> B) (fl : isMultiLinear f) {a : A} : isMultiLinear (\lam l => f (a :: l)) \elim n
      | 0 => ()
      | suc n => \lam l j => fl (a :: l) (suc j)

    \lemma fromReplace {n : Nat} {f : Array A n -> B} (p : \Pi (l : Array A n) (j : Fin n) -> LinearMap' A B { | func x => f (replace l j x) }) : isMultiLinear f \elim n
      | 0 => ()
      | suc n => \lam l j => \new LinearMap {
        | func-+ => inv (pmap f (replace_insert {_} {l} {j} {A.zro})) *> func-+ {p _ j} *> pmap2 (+) (pmap f replace_insert) (pmap f replace_insert)
        | func-*c => inv (pmap f (replace_insert {_} {l} {j} {A.zro})) *> func-*c {p _ j} *> pmap (_ *c) (pmap f replace_insert)
      }

    \lemma toReplace {n : Nat} {f : Array A n -> B} (fl : isMultiLinear f) (l : Array A n) (j : Fin n) : LinearMap' A B { | func x => f (replace l j x) } \elim n
      | 0 => \case j
      | suc n => \new LinearMap {
        | func-+ => inv (pmap f insert_skip) *> func-+ {fl _ j} *> pmap2 (f __ + f __) insert_skip insert_skip
        | func-*c => inv (pmap f insert_skip) *> func-*c {fl _ j} *> pmap (_ *c f __) insert_skip
      }
  }

\lemma isMultilinear_zro {R : Ring} {n : Nat} {A B : LModule' R} : isMultiLinear {R} {n} {A} {B} (\lam x => 0) \elim n
  | 0 => ()
  | suc n => \lam l j => linearMap_zro

\lemma isMultilinear_+ {R : Ring} {n : Nat} {A B : LModule' R} {f g : Array A n -> B} (fl : isMultiLinear f) (gl : isMultiLinear g) : isMultiLinear (\lam x => f x + g x) \elim n
  | 0 => ()
  | suc n => \lam l j => linearMap_+ (fl l j) (gl l j)

\lemma isMultilinear_negative {R : Ring} {n : Nat} {A B : LModule' R} {f : Array A n -> B} (fl : isMultiLinear f) : isMultiLinear (\lam x => negative (f x)) \elim n
  | 0 => ()
  | suc n => \lam l j => linearMap_negative (fl l j)

\lemma isMultilinear_BigSum {R : Ring} {n : Nat} {A B : LModule' R} {m : Nat} (f : Fin m -> Array A n -> B) (fl : \Pi (j : Fin m) -> isMultiLinear (f j)) : isMultiLinear (\lam x => B.BigSum (\lam i => f i x)) \elim n
  | 0 => ()
  | suc n => \lam l j => linearMap_BigSum (fl __ l j)

\lemma isMultilinear_linear-left {R : Ring} {n : Nat} {A B C : LModule' R} (f : LinearMap' A B) {g : Array B n -> C} (gl : isMultiLinear g) : isMultiLinear (\lam l => g (map f l)) \elim n
  | 0 => ()
  | suc n => \lam l j => transport (\lam z => LinearMap' A C { | func => z }) (ext $ \lam a => pmap g (inv (map_insert f))) (gl (map f l) j ∘ {LModuleCat R} f)

\lemma isMultilinear_linear-right {R : Ring} {n : Nat} {A B C : LModule' R} {f : Array A n -> B} (fl : isMultiLinear f) (g : LinearMap' B C) : isMultiLinear (\lam l => g (f l)) \elim n
  | 0 => ()
  | suc n => \lam l j => g ∘ {LModuleCat R} fl l j

\func isAlternating {R : Ring} {n : Nat} {A B : LModule' R} (f : Array A n -> B) : \Prop
  => \Sigma (isMultiLinear f) (\Pi (l : Array A n) -> (\Sigma (i j : Fin n) (i < j) (l i = l j)) -> f l = 0)
  \where {
    \open NatSemiring(<,zero<suc,suc<suc)

    \lemma to/= {f : Array A n -> B} (fa : isAlternating f) (l : Array A n) (t : \Sigma (i j : Fin n) (i /= j) (l i = l j)) : f l = 0
      => fa.2 l $ \case NatSemiring.trichotomy t.1 t.2 \with {
        | less e => (t.1, t.2, e, t.4)
        | equals e => absurd $ t.3 (nat_fin_= e)
        | greater e => (t.2, t.1, e, inv t.4)
      }

    \lemma reduce {n : Nat} (f : Array A (suc n) -> B) (fa : isAlternating f) {a : A} : isAlternating (\lam l => f (a :: l))
      => (isMultiLinear.reduce f fa.1, \lam l s => fa.2 (a :: l) (suc s.1, suc s.2, suc<suc s.3, s.4))

    \lemma substract1from0 {n : Nat} {f : Array A (suc (suc n)) -> B} (fa : isAlternating f) {a a' : A} {l : Array A n} : f (a :: a' :: l) = f (a - a' :: a' :: l)
      => inv $ func-+ {fa.1 (a' :: l) 0} *> pmap (_ +) (AddGroupHom.func-negative {fa.1 (a' :: l) 0} *> pmap negative (fa.2 _ (0, 1, zero<suc, idp)) *> B.negative_zro) *> zro-right

    \lemma add0to1 {n : Nat} {f : Array A (suc (suc n)) -> B} (fa : isAlternating f) {a a' : A} {l : Array A n} : f (a :: a' :: l) = f (a :: a + a' :: l)
      => inv $ inv (path (\lam i => f (a :: insert_zro i))) *> func-+ {fa.1 (a :: l) 1} *> pmap2 (+) (fa.2 _ (0, 1, zero<suc, inv (path (\lam i => insert_zro i 0)))) (path (\lam i => f (a :: insert_zro i))) *> zro-left

    \lemma alternating_perm {n : Nat} {f : Array A n -> B} (fa : isAlternating f) {l l' : Array A n} (p : Perm l l') : f l = Perm.sign p *c f l' \elim n, l, l', p
      | 0, nil, nil, perm-nil => inv ide_*c
      | suc n, x :: l, _ :: l', perm-:: idp p => alternating_perm (reduce (\lam l => f l) fa) p *> pmap (R.pow -1 __ `*c _) (inv Perm.inversions_perm-::)
      | suc (suc n), x :: x' :: l, _ :: _ :: _, perm-swap idp idp idp =>
          f (x :: x' :: l)            ==< substract1from0 fa >==
          f (x - x' :: x' :: l)       ==< add0to1 fa *> simplify >==
          f (x - x' :: x :: l)        ==< substract1from0 fa *> simplify >==
          f (negative x' :: x :: l)   ==< pmap (\lam y => f (y :: x :: l)) (inv A.neg_ide_*c) *> func-*c {fa.1 (x :: l) 0} *> inv (pmap (`*c _) ide-left) >==
          1 * -1 *c f (x' :: x :: l)  `qed
      | n, l1, l2, perm-trans p1 p2 => alternating_perm fa p1 *> pmap (_ *c) (alternating_perm fa p2) *> inv (pmap (`*c _) (pmap (R.pow -1) Perm.inversions_perm-trans *> R.pow_+) *> *c-assoc)
  }

\lemma isAlternating_zro {R : Ring} {n : Nat} {A B : LModule' R} : isAlternating {R} {n} {A} {B} (\lam x => 0)
  => (isMultilinear_zro, \lam _ _ => idp)

\lemma isAlternating_+ {R : Ring} {n : Nat} {A B : LModule' R} {f g : Array A n -> B} (fa : isAlternating f) (ga : isAlternating g) : isAlternating (\lam x => f x + g x)
  => (isMultilinear_+ fa.1 ga.1, \lam l c => pmap2 (+) (fa.2 l c) (ga.2 l c) *> zro-left)

\lemma isAlternating_negative {R : Ring} {n : Nat} {A B : LModule' R} {f : Array A n -> B} (fa : isAlternating f) : isAlternating (\lam x => negative (f x))
  => (isMultilinear_negative fa.1, \lam l c => pmap negative (fa.2 l c) *> B.negative_zro)

\lemma isAlternating_linear-left {R : Ring} {n : Nat} {A B C : LModule' R} (f : LinearMap' A B) {g : Array B n -> C} (ga : isAlternating g) : isAlternating (\lam l => g (map f l))
  => (isMultilinear_linear-left f ga.1, \lam l t => ga.2 (map f l) (t.1, t.2, t.3, pmap f t.4))

\lemma isAlternating_linear-right {R : Ring} {n : Nat} {A B C : LModule' R} {f : Array A n -> B} (fa : isAlternating f) (g : LinearMap' B C) : isAlternating (\lam l => g (f l))
  => (isMultilinear_linear-right fa.1 g, \lam l t => pmap g (fa.2 l t) *> g.func-zro)

\lemma alternating-unique {R : Ring} {n : Nat} {A B : LModule' R} {f g : Array A n -> B} (fa : isAlternating f) (ga : isAlternating g)
                          {l : Array A n} (Ag : A.IsGenerated l) (fl=gl : f l = g l) (a : Array A n) : f a = g a
  => B.fromZero $ alternating-unique_zro (\lam x => f x - g x) (isAlternating_+ fa (isAlternating_negative ga)) l Ag (B.toZero fl=gl) a
  \where {
    \open FinLinearOrder (FinLinearOrderInst)
    \open Perm

    \lemma alternating-unique_zro (f : Array A n -> B) (fa : isAlternating f)
                                  (l : Array A n) (Ag : A.IsGenerated l) (fl=0 : f l = 0) (a : Array A n) : f a = 0
      => aux f fa.1 l Ag a $ \lam c => \case repeats-dec c \with {
        | inl e => isAlternating.to/= fa (map l c) (e.1, e.2, e.3, pmap l e.4)
        | inr inj => isAlternating.alternating_perm fa {map l c} {l} (perm-map l (perm-fin c inj)) *> rewrite fl=0 B.*c_zro-right
      }

    \lemma aux {n : Nat} (f : Array A n -> B) (fl : isMultiLinear f) (l : Array A) (Ag : A.IsGenerated l)
               (a : Array A n) (p : \Pi (c : Array (Fin l.len) n) -> f (map l c) = 0) : f a = 0 \elim n, a
      | 0, a => p nil
      | suc n, a0 :: a => \case Ag a0 \with {
        | inP a0g => rewrite a0g.2 $ inv (pmap f insert_zro) *> LinearMap.linearComb {fl a 0} *>
                      BigSum_zro (\lam j => pmap (_ *c) (later $ pmap f insert_zro *> aux (\lam r => f (l j :: r)) (isMultiLinear.reduce f fl) l Ag a (\lam c => p (j :: c))) *> B.*c_zro-right)
      }
  }

\instance LModuleCat (R : Ring) : Cat (LModule' R)
  | Hom A B => LinearMap' A B
  | id A => \new LinearMap {
    | func a => a
    | func-+ => idp
    | func-*c => idp
  }
  | o g f => \new LinearMap {
    | func a => g (f a)
    | func-+ => pmap g func-+ *> func-+
    | func-*c => pmap g func-*c *> func-*c
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam (f : LinearMap) g => exts (f.func-zro, \lam x x' => f.func-+, \lam x => f.func-negative, \lam e x => f.func-*c))
