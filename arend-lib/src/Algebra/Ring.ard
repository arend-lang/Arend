\import Algebra.Group
\import Algebra.Semiring
\import Paths

\class Ring \extends Semiring, AbGroup
  | addId_*-left x => Group.cancelLeft {AddGroup.toGroup (_ : AddGroup)} (addId * x) (addId * x) addId (
    addId * x + addId * x ==< inv (rdistr addId addId x) >==
    (addId + addId) * x   ==< pmap (\lam t => t * x) (addId-left addId) >==
    addId * x             ==< inv (addId-right (addId * x)) >==
    addId * x + addId     `qed
  )
  | addId_*-right x => Group.cancelLeft {AddGroup.toGroup (_ : AddGroup)} (x * addId) (x * addId) addId (
    x * addId + x * addId ==< inv (ldistr x addId addId) >==
    x * (addId + addId)   ==< pmap (\lam t => x * t) (addId-left addId) >==
    x * addId             ==< inv (addId-right (x * addId)) >==
    x * addId + addId     `qed
  )

\class CRing \extends Ring, CSemiring