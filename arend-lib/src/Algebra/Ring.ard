\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.Category
\import Algebra.Ring.Local
\import Algebra.Ring.Poly
\import Algebra.Semiring
\import Arith.Nat
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set
\import Set.Fin

\class Ring \extends Semiring, AbGroup {
  | zro_*-left {x} => AddGroup.cancel-left (zro * x) (
    zro * x + zro * x ==< inv rdistr >==
    (zro + zro) * x   ==< pmap (`* x) zro-left >==
    zro * x           ==< inv zro-right >==
    zro * x + zro     `qed
  )
  | zro_*-right {x} => AddGroup.cancel-left (x * zro) (
    x * zro + x * zro ==< inv ldistr >==
    x * (zro + zro)   ==< pmap (x *) zro-left >==
    x * zro           ==< inv zro-right >==
    x * zro + zro     `qed
  )

  \func intCoef (x : Int) : E
    | pos n => natCoef n
    | neg (suc _ \as n) => negative (natCoef n)

  \lemma intCoef_neg (n : Nat) : intCoef (neg n) = negative (natCoef n)
    | 0 => natCoefZero *> inv (pmap negative natCoefZero *> AddGroup.negative_zro)
    | suc n => idp

  \lemma negative_*-left {x y : E} : negative x * y = negative (x * y)
    => negative-unique (x * y) (inv rdistr *> pmap (`* y) negative-left *> zro_*-left) negative-right

  \lemma negative_*-right {x y : E} : x * negative y = negative (x * y)
    => negative_*-left {op \this}

  \lemma negative_ide-left {x : E} : negative ide * x = negative x
    => negative_*-left *> pmap negative ide-left

  \lemma negative_ide-right {x : E} : x * negative ide = negative x
    => negative_*-right *> pmap negative ide-right

  \lemma negative_* {x y : E}  : negative x * negative y = x * y =>
    negative x * negative y     ==< negative_*-left >==
    negative (x * negative y)   ==< pmap negative negative_*-right >==
    negative (negative (x * y)) ==< negative-isInv >==
    x * y                       `qed

  \lemma negative_inv (j : Monoid.Inv {(\this : Ring)}) : Monoid.Inv (negative j)
    => \new Monoid.Inv {
      | inv => negative j.inv
      | inv-left => negative_* *> j.inv-left
      | inv-right => negative_* *> j.inv-right
    }

  \func isNilpotent (x : E) => ∃ (n : Nat) (pow x n = 0)

  \lemma pow_-1_+2 {n : Nat} : pow -1 (n Nat.+ 2) = pow -1 n
    => pow_+ {_} { -1} {n} {2} *> pmap (_ *) (*-assoc *> ide-left *> negative_* *> ide-left) *> ide-right

  \lemma pow_-1_even {n : Nat} : pow -1 (n Nat.* 2) = 1 \elim n
    | 0 => idp
    | suc n => negative_ide-right *> pmap negative negative_ide-right *> negative-isInv *> pow_-1_even

  \lemma pow_-1_mod2 {n : Nat} : pow -1 n = pow -1 (n Nat.mod 2)
    => pmap (pow -1) (inv (Nat.divModProp n 2)) *> pow_+ *> pmap (`* _) (pow_* *> pmap (pow __ _) (*-assoc *> ide-left *> negative_* *> ide-left) *> pow_ide) *> ide-left

  \type isZeroDimensional => \Pi (a : E) -> ∃ (b : E) (n : Nat) (pow a n = pow a (suc n) * b)

  \lemma finite-zeroDimensional (c : FinSet E) : isZeroDimensional
    => \lam a => TruncP.map (c.pigeonhole< (pow a)) \lam s => (pow a (s.2 -' suc s.1), s.1, s.4 *> pmap (pow a) (inv $ <=_exists $ suc_<_<= s.3) *> pow_+ {_} {_} {suc s.1})

  \type isConnected => \Pi (a : E) -> a * a = a -> (a = 0) || (a = 1)
} \where {
  \func op (R : Ring) : Ring \cowith
    | AbGroup => R
    | Semiring => Semiring.op R

  -- | A ring with a tight apartness relation.
  \class With# \extends Ring, AddGroup.With#
    | #0-*-left {x y : E} : (x * y) `#0 -> x `#0
    | #0-*-right {x y : E} : (x * y) `#0 -> y `#0
    | #0-negative {x} x#0 => #0-*-left (transport #0 (inv (negative_* *> ide-right)) x#0)

  -- | A ring with decidable equality.
  \class Dec \extends AddGroup.Dec, With#
    | #0-*-left {x} {y} x*y#0 => \case decideEq x zro \with {
      | yes x=0 => absurd (#0-zro (transport #0 (pmap (`* y) x=0 *> zro_*-left) x*y#0))
      | no x/=0 => nonZeroApart x/=0
    }
    | #0-*-right {x} {y} x*y#0 => \case decideEq y zro \with {
      | yes y=0 => absurd (#0-zro (transport #0 (pmap (x *) y=0 *> zro_*-right) x*y#0))
      | no y/=0 => nonZeroApart y/=0
    }
}

\class CRing \extends Ring, CSemiring {
  \lemma isZeroDimensional-char : isZeroDimensional <-> (\Pi (a : E) -> ∃ (b : E) (k : Nat) (k /= 0) (b * b = b) (LDiv (pow a k) b) (LDiv b (pow a k)))
    => (\lam c a => \case c a \with {
      | inP (b,n,p) => cases (n arg addPath) \with {
        | 0, q => inP (1, 1, (\case __), ide-left, \new LDiv {
          | inv => b
          | inv-right => inv (rewriteF q p)
        }, LDiv.ide-div)
        | suc n', q => \have t => rewriteF pow_*-comm $ aux n (p *> *-assoc)
                       \in inP (pow a n * pow b n, n, rewrite q (\case __), equation,
                                \new LDiv { | inv => pow b n | inv-right => idp }, \new LDiv { | inv => pow a n | inv-right => equation })
      }
    }, \lam c a => TruncP.map (c a) \lam s =>
          (LDiv.inv {s.5} * pow a (pred s.2), s.2, inv (LDiv.idempt s.6 s.4) *> *-comm *>
           pmap (_ *) (inv (LDiv.inv-right {s.5}) *> *-comm *> pmap (_ * pow a __) (inv $ suc_pred s.3) *> inv *-assoc *> *-comm) *> inv *-assoc))
    \where
      \lemma aux {x c : E} (n : Nat) (p : x = x * c) : x = x * pow c n \elim n
        | 0 => inv ide-right
        | suc n => aux n p *> pmap (`* _) p *> *-assoc *> pmap (x *) *-comm

  \lemma zeroDimensional_local-char : TFAE (
    \Sigma isZeroDimensional (\Pi (a : E) -> Inv a || Inv (a + 1)),
    \Sigma isZeroDimensional isConnected,
    \Pi (a : E) -> Inv a || (\Sigma (n : Nat) (pow a n = 0)))
    => TFAE.cycle $ later (
        \lam s => (s.1, LocalRing.local=>connected s.2),
        \lam s a => \case isZeroDimensional-char.1 s.1 a \with {
          | inP r => \case s.2 r.1 r.4 \with {
            | byLeft r1=0 => byRight (r.2, inv (LDiv.inv-right {r.6}) *> pmap (`* _) r1=0 *> zro_*-left)
            | byRight r1=1 => byLeft $ Inv.cfactor-right $ rewriteF (inv $ suc_pred r.3) $ Inv.lmake (LDiv.inv {r.5}) $ *-comm *> LDiv.inv-right {r.5} *> r1=1
          }
        }, \lam s => (\lam a => \case s a \with {
              | byLeft (r : Inv) => inP (r.inv, 0, inv $ simplify r.inv-right)
              | byRight r => inP (1, r.1, rewrite r.2 simplify)
            }, \lam a => \case s (a + 1) \with {
              | byLeft r => byRight r
              | byRight r => byLeft
                \let | p => pow {PolyRing \this} (padd 1 1) r.1
                     | t : polyEval p a = 0 => MonoidHom.func-pow {polyEvalRingHom a} *> pmap (pow __ r.1) equation *> r.2
                \in Inv.ldiv $ transport (LDiv a) (lastCoef_pow *> pow_ide) (poly-root-div t)
        }))
} \where {
    \open Monoid(LDiv,Inv)

    -- | A commutative ring with a tight apartness relation.
    \class With# \extends CRing, Ring.With#
      | #0-*-right x*y#0 => #0-*-left (transport #0 *-comm x*y#0)

    -- | A commutative ring with decidable equality.
    \class Dec \extends Ring.Dec, With#
  }
