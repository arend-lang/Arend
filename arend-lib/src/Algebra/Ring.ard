\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Semiring
\import Logic
\import Paths
\import Set

\class Ring \extends Semiring, AbGroup {
  | zro_*-left x => AddGroup.cancel-left (zro * x) (zro * x) zro (
    zro * x + zro * x ==< inv (rdistr zro zro x) >==
    (zro + zro) * x   ==< pmap (`* x) (zro-left zro) >==
    zro * x           ==< inv (zro-right (zro * x)) >==
    zro * x + zro     `qed
  )
  | zro_*-right x => AddGroup.cancel-left (x * zro) (x * zro) zro (
    x * zro + x * zro ==< inv (ldistr x zro zro) >==
    x * (zro + zro)   ==< pmap (x *) (zro-left zro) >==
    x * zro           ==< inv (zro-right (x * zro)) >==
    x * zro + zro     `qed
  )

  \lemma negative_*-left (x y : E) : negative x * y = negative (x * y) =>
    pmap (\lam (t : Inv {AbGroup.toCGroup (\this : Ring)} (x * y)) => t.inv)
         (Inv.levelProp {AbGroup.toCGroup (\this : Ring)}
                     (Inv.lmake {AbGroup.toCGroup (\this : Ring)} (negative x * y) (inv (rdistr (negative x) x y) *> pmap (`* y) (negative-left x) *> zro_*-left y))
                     (Inv.lmake {AbGroup.toCGroup (\this : Ring)} (negative (x * y)) (negative-left (x * y))))
    \where \open Monoid(Inv)

  \lemma negative_*-right (x y : E) : x * negative y = negative (x * y) => negative_*-left {op \this} y x

  \lemma negative_* (x y : E) : negative x * negative y = x * y =>
    negative x * negative y     ==< negative_*-left x (negative y) >==
    negative (x * negative y)   ==< pmap negative (negative_*-right x y) >==
    negative (negative (x * y)) ==< AddGroup.negative-isInv (x * y) >==
    x * y                       `qed

  \lemma negative_inv (j : Monoid.Inv {(\this : Ring)}) : Monoid.Inv (negative j.val)
    => \new Monoid.Inv {
      | inv => negative j.inv
      | inv-left => negative_* j.inv j.val *> j.inv-left
      | inv-right => negative_* j.val j.inv *> j.inv-right
    }
} \where {
  \func op (R : Ring) : Ring \cowith
    | AbGroup => R
    | Semiring => Semiring.op R

  \func equals {R S : Ring} (p : R = {\Set} S) (q : \let f x => coe (p @) x right \in \Sigma (\Pi (x y : R) -> f (x + y) = f x + f y) (\Pi (x y : R) -> f (x * y) = f x * f y)) : R = S
    => \let | gr => AbGroup.equals R S (AddGroup.equals R S p q.1)
            | mon => Monoid.equals p q.2
       \in path (\lam i => \new Ring {
          | AbGroup => gr @ i
          | Monoid => mon @ i
          | ldistr => pathInProp (\lam j => \Pi (x y z : p @ j) -> x * {mon @ j} (y + {gr @ j} z) = x * {mon @ j} y + {gr @ j} x * {mon @ j} z) R.ldistr S.ldistr @ i
          | rdistr => pathInProp (\lam j => \Pi (x y z : p @ j) -> (x + {gr @ j} y) * {mon @ j} z = x * {mon @ j} z + {gr @ j} y * {mon @ j} z) R.rdistr S.rdistr @ i
       })

  -- | A ring with a tight apartness relation.
  \class With# \extends Ring, AddGroup.With#
    | #0-*-left (x y : E) : (x * y) `#0 -> x `#0
    | #0-*-right (x y : E) : (x * y) `#0 -> y `#0
    | #0-negative x x#0 => #0-*-left (negative x) (negative ide) (transport #0 (inv (negative_* x ide *> ide-right x)) x#0)

  -- | A ring with decidable equality.
  \class Dec \extends AddGroup.Dec, With#
    | #0-*-left x y x*y#0 => \case decideEq x zro \with {
      | yes x=0 => absurd (#0-zro (transport #0 (pmap (`* y) x=0 *> zro_*-left y) x*y#0))
      | no x/=0 => nonEqualApart x x/=0
    }
    | #0-*-right x y x*y#0 => \case decideEq y zro \with {
      | yes y=0 => absurd (#0-zro (transport #0 (pmap (x *) y=0 *> zro_*-right x) x*y#0))
      | no y/=0 => nonEqualApart y y/=0
    }
    \where
      \class Impl \extends Dec, AddGroup.Dec.Impl
}

\class CRing \extends Ring, CSemiring
  \where {
    -- | A commutative ring with a tight apartness relation.
    \class With# \extends CRing, Ring.With#
      | #0-*-right x y x*y#0 => #0-*-left y x (transport #0 (*-comm x y) x*y#0)

    -- | A commutative ring with decidable equality.
    \class Dec \extends Ring.Dec, With#
      \where
        \class Impl \extends Dec, Ring.Dec.Impl
  }
