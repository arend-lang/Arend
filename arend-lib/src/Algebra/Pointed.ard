\import Paths
\import Set

\class Pointed \extends BaseSet
  | ide : E
  \where {
    \func equls {X Y : Pointed} (p : X = {\Set} Y) (q : coe (\lam i => p @ i) ide right = ide) : X = Y
      => path (\lam i => \new Pointed (p @ i) (pathOver {\lam j => p @ j} q @ i))
  }

\class AddPointed \extends BaseSet
  | zro : E
  \where {
    \use \coerce fromPointed (P : Pointed) => \new AddPointed P.E P.ide
    \use \coerce toPointed (P : AddPointed) => \new Pointed P.E P.zro
  }