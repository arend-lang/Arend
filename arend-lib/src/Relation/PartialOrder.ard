\import Algebra.Pointed
\import Logic

\class Preorder (E : \Set) {
  | \infix 4 <= : E -> E -> \Prop
  | reflexive (x : E) : x <= x
  | <=-transitive (x y z : E) : x <= y -> y <= z -> x <= z
}

\class Poset \extends Preorder {
  | antisymmetric (x y : E) : x <= y -> y <= x -> x = y
}

-- | Strict partial orders are also known as quasiorders
\class StrictPoset (E : \Set) {
  | \infix 4 < : E -> E -> \Prop
  | irreflexive (x : E) : x < x -> Empty
  | <-transitive (x y z : E) : x < y -> y < z -> x < z
}

\func \infix 4 > {P : StrictPoset} (x y : P) => y < x

\func \infix 4 >= {P : Preorder} (x y : P) => y <= x

-- | isPositive x is true if and only if x > 0
\class isPositive {E : \Set} {Z : AddPointed E} {P : StrictPoset E} (x : E) (p : x > {P} Z.addId)

-- | Positive E is the type of elements of E which are greather than 0.
\func Positive (E : \Set) {Z : AddPointed E} {P : StrictPoset E} => isPositive {E} {Z} {P}
