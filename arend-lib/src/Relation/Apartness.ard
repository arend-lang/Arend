\import Algebra.Pointed
\import Logic
\import Paths
\import Set

\class Apartness \extends BaseSet {
  | \infix 4 # : E -> E -> \Prop
  | #-irreflexive (x : E) : Not (x # x)
  | #-symmetric (x y : E) : x # y -> y # x
  | #-comparison (x y z : E) : x # z -> x # y || y # z

  \lemma apartNotEqual (x y : E) (x#y : x # y) : Not (x = y) =>
    \lam x=y => #-irreflexive x (transport (x #) (inv x=y) x#y)
}

\class TightApartness \extends Apartness, SeparatedSet {
  | tightness (x y : E) : Not (x # y) -> x = y
  | separatedEq {x} {y} ~~x=y => tightness x y (\lam x#y => ~~x=y (Apartness.apartNotEqual x y x#y))
}
