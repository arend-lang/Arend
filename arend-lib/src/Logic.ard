\import HLevel
\import Paths

\data Empty

\func absurd {A : \Type} (x : Empty) : A

\func Not (A : \Type) => A -> Empty

\data TruncP (A : \Type)
  | inP A
  | truncP (a a' : TruncP A) (i : I) \elim i {
    | left  => a
    | right => a'
  }
  \where {
    \use \level levelProp {A : \Type} (a a' : TruncP A) : a = a' => path (truncP a a')

    \sfunc remove {A : \Type} (p : isProp A) (t : TruncP A) : A \elim t
      | inP a => a
      | truncP t t' i => p (remove p t) (remove p t') @ i

    \sfunc rec {A B : \Type} (p : isProp B) (t : TruncP A) (f : A -> B) : B \elim t
      | inP a => f a
      | truncP t t' i => p (rec p t f) (rec p t' f) @ i

    \func map {A B : \Type} (t : TruncP A) (f : A -> B) : TruncP B \elim t
      | inP a => inP (f a)
  }

\data ToProp (A : \Type) (p : isProp A)
  | toProp A
  \where {
    \sfunc fromProp {A : \Type} {p : isProp A} (t : ToProp A p) : A \elim t
      | toProp a => a

    \use \level levelProp {A : \Type} {p : isProp A} (t1 t2 : ToProp A p) : t1 = t2 \elim t1, t2
      | toProp a1, toProp a2 => path (\lam i => toProp (p a1 a2 @ i))
  }

\truncated \data \infixr 2 || (A B : \Type) : \Prop
  | byLeft A
  | byRight B
  \where {
    \sfunc rec {A B C : \Type} (p : isProp C) (f : A -> C) (g : B -> C) (t : A || B) : \level C p \elim t
      | byLeft a => f a
      | byRight b => g b

    \func map {A B C D : \Type} (f : A -> C) (g : B -> D) (t : A || B) : C || D \elim t
      | byLeft a => byLeft (f a)
      | byRight b => byRight (g b)
  }

\lemma propExt {A B : \Prop} (f : A -> B) (g : B -> A) : A = B =>
  path (iso f g idpe idpe)
  \where {
    \lemma dir {A B : \Prop} (p : A = B) (a : A) : B => transport (\lam X => X) p a

    \lemma conv {A B : \Prop} (p : A = B) (b : B) : A => dir (inv p) b
  }
