\import HLevel

\class Unit

\func unit => \new Unit

\data Empty

\func absurd {A : \Type} (x : Empty) : A

\func Not (A : \Type) => A -> Empty

\data TrP (A : \Type)
  | inP A
  | truncP (a a' : TrP A) (i : I) \elim i {
    | left  => a
    | right => a'
  }
  \where {
    \use \level isProp {A : \Type} (a a' : TrP A) : a = a' => path (truncP a a')

    \func remove {A : \Type} (p : HLevel.isProp A) (t : TrP A) : A \elim t
      | inP a => a
      | truncP t t' i => p (remove p t) (remove p t') @ i

    \func rec {A B : \Type} (p : HLevel.isProp B) (f : A -> B) (t : TrP A) : B \elim t
      | inP a => f a
      | truncP t t' i => p (rec p f t) (rec p f t') @ i
  }

\data ToProp (A : \Type) (p : HLevel.isProp A)
  | toProp A
  \where {
    \func fromProp {A : \Type} {p : HLevel.isProp A} (t : ToProp A p) : A \elim t
      | toProp a => a

    \use \level isProp {A : \Type} {p : HLevel.isProp A} (t1 t2 : ToProp A p) : t1 = t2 \elim t1, t2
      | toProp a1, toProp a2 => path (\lam i => toProp (p a1 a2 @ i))
  }

\truncated \data \infixr 2 || (A B : \Type) : \Prop
  | byLeft A
  | byRight B
  \where {
    \func rec {A B C : \Type} (p : isProp C) (f : A -> C) (g : B -> C) (t : A || B) =>
      ToProp.fromProp (\case t \return ToProp C p \with {
        | byLeft a => toProp (f a)
        | byRight b => toProp (g b)
      })
  }