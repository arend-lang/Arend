\import HLevel

\class Unit

\func unit => \new Unit

\data Empty

\func absurd {A : \Type} (x : Empty) : A

\func Not (A : \Type) => A -> Empty

\func removeTrP {A : \Type} (p : isProp A) (t : TrP A) : A \elim t
  | inP a => a
  | truncP t t' i => p (removeTrP p t) (removeTrP p t') @ i

\data ToProp (A : \Type) (p : HLevel.isProp A)
  | toProp A
  \where {
    \func fromProp {A : \Type} {p : HLevel.isProp A} (t : ToProp A p) : A \elim t
      | toProp a => a

    \use \level isProp {A : \Type} {p : HLevel.isProp A} (t1 t2 : ToProp A p) : t1 = t2 \elim t1, t2
      | toProp a1, toProp a2 => path (\lam i => toProp (p a1 a2 @ i))
  }

\truncated \data \infixr 2 || (A B : \Type) : \Prop
  | byLeft A
  | byRight B
