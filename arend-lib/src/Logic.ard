\import HLevel
\import Paths

\class Unit

\func unit : Unit \cowith

\data Empty

\func absurd {A : \Type} (x : Empty) : A

\func Not (A : \Type) => A -> Empty

\data TruncP (A : \Type)
  | inP A
  | truncP (a a' : TruncP A) (i : I) \elim i {
    | left  => a
    | right => a'
  }
  \where {
    \use \level isProp {A : \Type} (a a' : TruncP A) : a = a' => path (truncP a a')

    \func remove {A : \Type} (p : HLevel.isProp A) (t : TruncP A) : A \elim t
      | inP a => a
      | truncP t t' i => p (remove p t) (remove p t') @ i

    \func rec {A B : \Type} (p : HLevel.isProp B) (t : TruncP A) (f : A -> B) : B \elim t
      | inP a => f a
      | truncP t t' i => p (rec p t f) (rec p t' f) @ i

    \func map {A B : \Type} (t : TruncP A) (f : A -> B) : TruncP B \elim t
      | inP a => inP (f a)
  }

\data ToProp (A : \Type) (p : HLevel.isProp A)
  | toProp A
  \where {
    \func fromProp {A : \Type} {p : HLevel.isProp A} (t : ToProp A p) : A \elim t
      | toProp a => a

    \use \level isProp {A : \Type} {p : HLevel.isProp A} (t1 t2 : ToProp A p) : t1 = t2 \elim t1, t2
      | toProp a1, toProp a2 => path (\lam i => toProp (p a1 a2 @ i))
  }

\truncated \data \infixr 2 || (A B : \Type) : \Prop
  | byLeft A
  | byRight B
  \where {
    \func rec {A B C : \Type} (p : isProp C) (f : A -> C) (g : B -> C) (t : A || B) : \level C p \elim t
      | byLeft a => f a
      | byRight b => g b

    \func map {A B C D : \Type} (f : A -> C) (g : B -> D) (t : A || B) : C || D \elim t
      | byLeft a => byLeft (f a)
      | byRight b => byRight (g b)
  }

\data Xor (A B : \Prop) (p : A -> B -> Empty)
  | onlyLeft A
  | onlyRight B
  \where {
    \use \level isProp {A B : \Prop} {p : A -> B -> Empty} (x1 x2 : Xor A B p) : x1 = x2 \elim x1, x2
      | onlyLeft a1, onlyLeft a2 => pmap onlyLeft (Path.inProp a1 a2)
      | onlyLeft a1, onlyRight b2 => absurd (p a1 b2)
      | onlyRight b1, onlyLeft a2 => absurd (p a2 b1)
      | onlyRight b1, onlyRight b2 => pmap onlyRight (Path.inProp b1 b2)
  }

\lemma propExt {A B : \Prop} (f : A -> B) (g : B -> A) : A = {\Prop} B =>
  path (iso f g (\lam _ => Path.inProp _ _) (\lam _ => Path.inProp _ _))