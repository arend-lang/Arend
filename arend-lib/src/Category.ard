\import Equiv(Embedding, Equiv, Retraction)
\import Equiv.Fiber
\import Equiv.Path
\import Equiv.Sigma
\import Equiv.Univalence
\import HLevel
\import Paths \using (inv \as pinv)
\import Paths.Meta
\import Set.Category

\class Precat (Ob : \hType (\suc \lp)) {
  | Hom : Ob -> Ob -> \Set
  | id (X : Ob) : Hom X X
  | \fixr 8 o \alias \infixr 8 ∘ {X Y Z : Ob} : Hom Y Z -> Hom X Y -> Hom X Z
  | id-left {X Y : Ob} (f : Hom X Y) : id Y ∘ f = f
  | id-right {X Y : Ob} (f : Hom X Y) : f ∘ id X = f
  | o-assoc {X Y Z W : Ob} (h : Hom Z W) (g : Hom Y Z) (f : Hom X Y) : (h ∘ g) ∘ f = h ∘ (g ∘ f)

  \func \infixl 8 >> {x y z : Ob} (f : Hom x y) (g : Hom y z) => g ∘ f
}

\class SmallPrecat \extends Precat {
  \override Ob : \hType
}

\open Precat (>>)

\func opP (C : Precat) : Precat \cowith
  | Ob => C.Ob
  | Hom x y => C.Hom y x
  | id x => C.id x
  | o g f => C.o f g
  | id-left f => C.id-right f
  | id-right f => C.id-left f
  | o-assoc f g h => pinv (C.o-assoc h g f)

\record Map {C : Precat} {dom cod : C} (\coerce f : Hom dom cod)

\record Mono \extends Map
  | isMono {x : C} (g h : Hom x dom) : g >> f = h >> f -> g = h

\func isEpi {C : Precat} {x y : C} (f : Hom x y) => \Pi {z : C} (g h : Hom y z) -> f >> g = f >> h -> g = h

\record SplitMono (inv : Hom cod dom) (inv_f : inv ∘ f = id dom) \extends Mono
  | isMono g h gf=hf =>
    g               ==< pinv (id-left g) >==
    g >> id dom     ==< pmap (g >>) (pinv inv_f) >==
    g >> (f >> inv) ==< o-assoc inv f g >==
    (g >> f) >> inv ==< pmap (o inv) gf=hf >==
    (h >> f) >> inv ==< pinv (o-assoc inv f h) >==
    h >> (f >> inv) ==< pmap (h >>) inv_f >==
    h >> id dom     ==< id-left h >==
    h               `qed

\record Iso (f_inv : f ∘ inv = id cod) \extends SplitMono
  \where {
    \func equals {C : Precat} {x y : C} (e e' : Iso {C} {x} {y}) (p : e.f = e'.f) : e = e'
      => ext (p, isMono {e} e.inv e'.inv (e.f_inv *> pinv e'.f_inv *> pinv (pmap (e'.inv >>) p)))

    \use \level levelProp {C : Precat} {x y : C} (f : Hom x y) (e e' : Iso f) => equals e e' idp
  }

\func idIso {C : Precat} {x : C} : Iso (id x) \cowith
  | inv => id x
  | f_inv => id-left (id x)
  | inv_f => id-right (id x)

\class Cat \extends Precat {
  | univalence : \Pi (e : Iso) -> \Sigma (p : e.dom = e.cod) (transport (Hom e.dom) p (id e.dom) = e)
    \level uni-isProp {\this}

  \func iso-to-= (e : Iso {\this}) : e.dom = e.cod
    => (univalence e).1

  \lemma transport_iso (e : Iso {\this}) {z : Ob} {f : Hom e.dom e.cod} (h : e.f = f) : transport (Hom e.dom) (iso-to-= e) (id e.dom) = f
    => (univalence e).2 *> h


  \lemma transport_Hom {x1 y1 x2 y2 : Ob} (p1 : x1 = y1) (p2 : x2 = y2) {g : Hom x1 x2} {f : Hom y1 y2}
                       (h : g >> transport (Hom x2) p2 (id x2) = transport (Hom x1) p1 (id x1) >> f)
    : coe (\lam i => Hom (p1 @ i) (p2 @ i)) g right = f \elim p1, p2
    | idp, idp => pinv (id-left g) *> h *> id-right f

  \lemma transport_Hom-left {x y z : Ob} (p : x = y) {g : Hom x z} {f : Hom y z} (h : g = transport (Hom x) p (id x) >> f) : transport (`Hom z) p g = f \elim p
    | idp => h *> id-right f

  \lemma transport_Hom-right {x y z : Ob} (p : x = y) {g : Hom z x} {f : Hom z y} (h : g >> transport (Hom x) p (id x) = f) : transport (Hom z) p g = f \elim p
    | idp => pinv (id-left g) *> h


  \lemma transport_Hom_iso (e1 e2 : Iso {\this}) {g : Hom e1.dom e2.dom} {f : Hom e1.cod e2.cod}
                           (h : g >> e2.f = e1.f >> f)
    : coe (\lam i => Hom (iso-to-= e1 @ i) (iso-to-= e2 @ i)) g right = f
    => transport_Hom (iso-to-= e1) (iso-to-= e2) (pmap (g >>) (univalence e2).2 *> h *> pmap (`>> f) (pinv (univalence e1).2))

  \lemma transport_Hom_iso-left (e : Iso {\this}) {z : Ob} (g : Hom e.dom z) {f : Hom e.cod z} (h : g = e.f >> f) : transport (`Hom z) (iso-to-= e) g = f
    => transport_Hom-left (iso-to-= e) (h *> pmap (`>> f) (pinv (univalence e).2))

  \lemma transport_Hom_iso-right (e : Iso {\this}) {z : Ob} (g : Hom z e.dom) {f : Hom z e.cod} (h : g >> e.f = f) : transport (Hom z) (iso-to-= e) g = f
    => transport_Hom-right (iso-to-= e) (pmap (g >>) (univalence e).2 *> h)
} \where
    \func uni-isProp {C : Precat} (F G : \Pi (f : Iso {C}) -> \Sigma (p : f.dom = f.cod) (transport (Hom f.dom) p (id f.dom) = f)) : F = G
      => \let | T {x y : C} (p : x = y) => transport (Iso {C} {x} {__}) p idIso
              | Emb {x : C} => \new Embedding (\lam (e : Iso {C} {x} {x}) => e.f) (\lam (e e' : Iso {C} {x} {x}) => \new Retraction {
                | sec => Iso.equals e e'
                | f_sec => idpe
              })
              | Eq {x y : C} (e : Iso {C} {x} {y}) (p : x = y)
                  => Jl (\lam y' p' => \Pi (e' : Iso {C} {x} {y'}) -> Equiv {transport (Iso {C} {x} {__}) p' idIso = {Iso {C} {x} {y'}} e'} {transport (Hom x) p' (id x) = e'.f})
                        (\lam e' => Embedding.pmap-isEquiv {Emb {x}} {idIso} {e'})
                        p e
              | T-equiv {x y : C} : Equiv (T {x} {y}) => pathEquiv (Iso {C} {__} {__}) (\lam {x} {y} => \new Retraction {
                | f => T {x} {y}
                | sec (e : Iso) => (F e).1
                | f_sec (e : Iso) => Equiv.ret {Eq e (F e).1} (F e).2
              }) {x} {y}
              | Fib-equiv {x y : C} (e : Iso {C} {x} {y}) => transport isProp (Equiv-to-= (sigma-right (\lam p => transport (Iso {C} {x} {__}) p idIso = {Iso {C} {x} {y}} e) (\lam p => transport (Hom x) p (id x) = e.f) (Eq e))) (isContr=>isProp (Equiv=>contrFibers (T-equiv {x} {y}) e))
         \in path (\lam i f => Fib-equiv f (F f) (G f) @ i)

\func op (C : Cat) : Cat => \new Cat {
  | Precat => opP C
  | univalence (f : Iso) =>
    \case f.cod \as cod, f.f \as ff : Hom cod f.dom, f.inv \as inv : Hom f.dom cod, f.inv_f \as f_inv : inv >> ff = id f.dom, f.f_inv \as inv_f : ff >> inv = id cod,
          C.univalence (\new Iso inv ff f_inv inv_f) \return \Sigma (p : f.dom = cod) (transport (Hom {opP C} f.dom) p (id f.dom) = ff) \with {
      | cod, ff, inv, f_inv, inv_f, (idp,idp) => (idp, pinv f_inv *> id-right ff)
    }
}

\sfunc SIP (C : Cat) (Str : C -> \hType (\suc \lp)) (isHom : \Pi {x y : C} -> Str x -> Str y -> Hom x y -> \hType (\suc \lp))
           (st : \Pi {X : C} {S1 S2 : Str X} -> isHom S1 S2 (id X) -> isHom S2 S1 (id X) -> S1 = S2)
           {X Y : C} (e : Iso {C} {X} {Y}) (S1 : Str X) (S2 : Str Y) (p : isHom S1 S2 e) (q : isHom S2 S1 e.inv)
  : \Sigma (p : X = Y) (Path (\lam i => Str (p @ i)) S1 S2) (transport (Hom X) p (id X) = e)
  => \case \elim Y, \elim e, \elim S2, p, q, univalence e \with {
    | Y, e : Iso, S2, p, q, (idp,s) => (idp, st (transportInv (isHom S1 S2) s p) (transport (isHom S2 S1) (pinv (id-right e.inv) *> pmap (∘ e.inv) s *> e.inv_f) q), s)
  }

\sfunc SIP_Set (Str : \Set -> \hType (\suc \lp)) (isHom : \Pi {x y : \Set} -> Str x -> Str y -> (x -> y) -> \hType (\suc \lp))
               (st : \Pi {X : \Set} {S1 S2 : Str X} -> isHom S1 S2 (\lam x => x) -> isHom S2 S1 (\lam x => x) -> S1 = S2)
               {X Y : \Set} (e : Iso {SetCat} {X} {Y}) (S1 : Str X) (S2 : Str Y) (p : isHom S1 S2 e.f) (q : isHom S2 S1 e.inv)
  : \Sigma (p : X = Y) (Path (\lam i => Str (p @ i)) S1 S2) (\Pi (x : X) -> transport (\lam Z => Z) p x = e.f x)
  => \have (p,q,s) => SIP SetCat Str isHom st e S1 S2 p q
     \in (p, q, \lam x => pinv (transport_pi (\lam _ => X) (\lam Z => Z) p (\lam z => z) x) *> path (\lam i => (s @ i) x))
