\import Category
\import Equiv \hiding (Map)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta

\class Functor (C D : Precat) (\classifying F : C -> D) {
  | Func {X Y : C} : Hom X Y -> Hom (F X) (F Y)
  | Func-id {X : C} : Func (id X) = id (F X)
  | Func-o {X Y Z : C} (g : Hom Y Z) (f : Hom X Y) : Func (g ∘ f) = Func g ∘ Func f

  \func op : Functor (opP C) (opP D) F \cowith
    | Func f => Func f
    | Func-id => Func-id
    | Func-o g f => Func-o f g
}

\func Id {C : Precat} : Functor C C \cowith
  | F X => X
  | Func h => h
  | Func-id => idp
  | Func-o g f => idp

\func Comp {C D E : Precat} (G : Functor D E) (F : Functor C D) : Functor C E \cowith
  | F X => G (F X)
  | Func f => G.Func (F.Func f)
  | Func-id => pmap G.Func F.Func-id *> G.Func-id
  | Func-o g f => pmap G.Func (F.Func-o g f) *> G.Func-o (F.Func g) (F.Func f)

\record NatTrans {C D : Precat} (F G : Functor C D)
  | \coerce trans (X : C) : Hom (F X) (G X)
  | natural {X Y : C} (f : Hom X Y) : trans Y ∘ F.Func f = G.Func f ∘ trans X

\instance FunctorPrecat {C D : Precat} : Precat (Functor C D)
  | Hom => NatTrans
  | id F => \new NatTrans {
    | trans X => id (F X)
    | natural f => id-left *> inv id-right
  }
  | o b a => \new NatTrans {
    | trans X => b X ∘ a X
    | natural f => run {
      rewrite o-assoc,
      rewrite (natural {a} f),
      rewriteI o-assoc,
      rewrite (natural {b} f),
      o-assoc
    }
  }
  | id-left => exts (\lam X => id-left)
  | id-right => exts (\lam X => id-right)
  | o-assoc => exts (\lam X => o-assoc)

\instance FunctorCat {C : Precat} {D : Cat} : Cat (Functor C D)
  | Precat => FunctorPrecat
  | univalence e =>
    (exts (\lam X => (D.univalence (mapIso e X)).1, \lam {X} {Y} h => Cat.transport_Hom_iso (mapIso e X) (mapIso e Y) (natural h)),
     simp_coe (simp_coe (\lam X => (univalence (mapIso e X)).2)))
  \where {
    \func mapIso {C D : Precat} (e : Iso {FunctorPrecat {C} {D}}) (X : C) : Iso {D} \cowith
      | dom => e.dom X
      | cod => e.cod X
      | f => e.f X
      | inv => e.inv X
      | inv_f => path (\lam i => trans {e.inv_f @ i} X)
      | f_inv => path (\lam i => trans {e.f_inv @ i} X)
  }

\class FaithfulFunctor \extends Functor {
  | isFaithful {X Y : C} {f g : Hom X Y} : Func f = Func g -> f = g

  \func op : FaithfulFunctor \cowith
    | Functor => Functor.op
    | isFaithful p => isFaithful p
}

\class FullFunctor \extends Functor {
  | isFull {X Y : C} (f : Hom (F X) (F Y)) : ∃ (g : Hom X Y) (Func g = f)

  \func op : FullFunctor \cowith
    | Functor => Functor.op
    | isFull f => isFull f
}

\class FullyFaithfulFunctor \extends FullFunctor, FaithfulFunctor {
  | isFullyFaithful {X Y : C} : Equiv (Func {_} {X} {Y})
  | isFull f => Surjection.isSurj {ESEquiv.fromEquiv isFullyFaithful} f
  | isFaithful p => isFullyFaithful.isInj p

  \func op : FullyFaithfulFunctor \cowith
    | Functor => Functor.op
    | isFullyFaithful => isFullyFaithful

  \func inverse {X Y : C} (f : Hom (F X) (F Y)) : Hom X Y
    => isFullyFaithful.ret f

  \lemma inverse-left {X Y : C} (f : Hom X Y) : inverse (Func f) = f
    => isFullyFaithful.ret_f f

  \lemma inverse-right {X Y : C} (f : Hom (F X) (F Y)) : Func (inverse f) = f
    => isFullyFaithful.f_ret f
}