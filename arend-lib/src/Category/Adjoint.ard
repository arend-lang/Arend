\import Category
\import Category.Functor
\import Equiv (Equiv, QEquiv)
\import Function.Meta
\import Meta
\import Paths.Meta

\class RightAdjoint \extends Functor
  | leftAdjoint : Functor D C
  | eta : NatTrans {D} {D} Id (Comp \this leftAdjoint)
  | isAdjoint {X : D} {Y : C} : Equiv {Hom (leftAdjoint X) Y} {Hom X (F Y)} (Func __ âˆ˜ eta X)
  \where {
    \func rightFactor {C D E : Precat} (G1 : FullyFaithfulFunctor D E) (G2 : Functor E D) (adj : RightAdjoint { | Functor => Comp G1 G2 }) : RightAdjoint \cowith
      | Functor => G2
      | leftAdjoint => Comp adj.leftAdjoint G1
      | eta {
        | trans Y => G1.inverse (adj.eta (G1 Y))
        | natural h => run {
            G1.isFullyFaithful.isInj,
            repeat {2} (rewrite G1.Func-o),
            repeat {2} (rewrite G1.inverse-right),
            adj.eta.natural (G1.Func h)
          }
      }
      | isAdjoint {Y} {Z} => \new QEquiv {
        | ret h => adj.isAdjoint.ret (G1.Func h)
        | ret_f h => run {
            rewrite G1.Func-o,
            rewrite G1.inverse-right,
            adj.isAdjoint.ret_f _
          }
        | f_sec h => run {
            G1.isFullyFaithful.isInj,
            rewrite G1.Func-o,
            rewrite G1.inverse-right,
            adj.isAdjoint.f_ret _
          }
      }
  }