\import Category
\import Category.Functor
\import Equiv (Equiv)
\import Paths
\open Precat

\class Cone {J : Precat} (F : Functor J) (apex : F.D)
  | coneMap (j : J) : Hom apex (F j)
  | coneCoh {j j' : J} (h : Hom j j') : coneMap j >> F.Func h = coneMap j'

\func conePullback {J : Precat} {F : Functor J} (C : Cone F) (z : F.D) (f : Hom z C.apex) : Cone F z \cowith
  | coneMap j => f >> coneMap j
  | coneCoh h => inv (o-assoc _ _ _) *> pmap (f >>) (coneCoh h)

\record Limit \extends Cone
  | isLimit (z : F.D) : Equiv (conePullback \this z)

\record SmallCone \extends Cone {
  \override J : SmallPrecat
}

\func test {J : SmallPrecat} (F : Functor J) (X : F.D) : \hType \lp => SmallCone \lp F X

\class CompletePrecat \extends Precat
  | limit (J : SmallPrecat) (F : Functor J \this) : Limit F

\class CompleteCat \extends CompletePrecat, Cat

\class CocompletePrecat \extends Precat
  | colimit (J : SmallPrecat) (F : Functor J (opP \this)) : Limit F

\class CocompleteCat \extends CocompletePrecat, Cat

