\import Paths
\import Equiv
\import Equiv.Path

\func =-to-Equiv {A B : \Type} (p : A = B) : Equiv {A} {B} => transport (\lam X => Equiv {A} {X}) p idEquiv

\func QEquiv-to-= {A B : \Type} (e : QEquiv {A} {B}) : A = B => path (iso e.f e.ret e.ret_f e.f_sec)

\func Equiv-to-= {A B : \Type} (e : Equiv {A} {B}) : A = B => QEquiv-to-= e

\func univalence {X Y : \Type} : QEquiv {X = Y} {Equiv {X} {Y}}
  => pathEquiv (\lam X Y => Equiv {X} {Y}) (\lam {A} {B} =>
      \new Retraction {
        | f => =-to-Equiv
        | sec => Equiv-to-=
        | f_sec e => Equiv.equals (Jl (\lam _ p => Equiv.f {=-to-Equiv p} = (\lam a => coe (\lam i => p @ i) a right)) idp (Equiv-to-= e))
      })

