\import Equiv
\import HLevel
\import Paths

\func lsigma {A : \Type} (a0 : A) : Contr (\Sigma (x : A) (a0 = x)) \cowith
  | center => (a0,idp)
  | contraction p => Jl (\lam x q => (a0,idp) = {\Sigma (y : A) (a0 = y)} (x,q)) idp p.2

\func rsigma {A : \Type} (a0 : A) : Contr (\Sigma (x : A) (x = a0)) \cowith
  | center => (a0,idp)
  | contraction p => Jl (\lam x q => (a0,idp) = {\Sigma (y : A) (y = a0)} (x, inv q)) idp (inv p.2) *> path (\lam i => (p.1, inv_inv p.2 @ i))

\func equiv= (e : QEquiv) : e.A = e.B => path (iso e.f e.ret e.ret_f e.f_sec)

\func contr-left {A : \Type} (c : Contr A) (B : A -> \Type) : QEquiv {\Sigma (x : A) (B x)} {B c.center} \cowith
  | f p => transport B (inv (c.contraction p.1)) p.2
  | ret b => (c.center, b)
  | ret_f p => inv (SigmaExt B p _ (inv (c.contraction p.1)) idp)
  | f_sec b => transport (\lam p => transport B (inv p) b = b) (isProp=>isSet A (isContr=>isProp c) c.center c.center idp (c.contraction c.center)) idp

\func contr-right {A : \Type} (C : A -> Contr) : QEquiv {\Sigma (x : A) (C x)} {A} \cowith
  | f p => p.1
  | ret a => (a, Contr.center {C a})
  | ret_f p => path (\lam i => (p.1, Contr.contraction {C p.1} p.2 @ i))
  | f_sec a => idp

\lemma sigma-left {A A' : \Type} (B' : A' -> \Type) (p : A = A')
  : Equiv {\Sigma (x : A) (B' (coe (\lam i => p @ i) x right))}
          {\Sigma (x' : A') (B' x')}
          (\lam q => (coe (\lam i => p @ i) q.1 right, q.2))
  => Jl (\lam A'' p' => \Pi (B'' : A'' -> \Type) ->
            Equiv {\Sigma (x : A) (B'' (coe (\lam i => p' @ i) x right))}
                  {\Sigma (x' : A'') (B'' x')}
                  (\lam q => (coe (\lam i => p' @ i) q.1 right, q.2)))
        (\lam _ => idEquiv) p B'
  \where {
    \func path-func {A A' : \Type} (B' : A' -> \Type) (p : A = A') : (\Sigma (x : A) (B' (coe (\lam i => p @ i) x right))) = (\Sigma (x' : A') (B' x')) =>
      path (\lam i => \Sigma (x : p @ i) (B' (coe2 (\lam j => p @ j) i x right)))
  }

\func sigma-right {A : \Type} (B B' : A -> \Type) (q : \Pi (a : A) -> Equiv {B a} {B' a})
  : Equiv {\Sigma (a : A) (B a)} {\Sigma (a : A) (B' a)} \cowith
  | f p => (p.1, Equiv.f {q p.1} p.2)
  | ret p' => (p'.1, Equiv.ret {q p'.1} p'.2)
  | sec p' => (p'.1, Equiv.sec {q p'.1} p'.2)
  | ret_f p => path (\lam i => (p.1, Equiv.ret_f {q p.1} p.2 @ i))
  | f_sec p' => path (\lam i => (p'.1, Equiv.f_sec {q p'.1} p'.2 @ i))

\func unit-func (A : \Type) : QEquiv {\Sigma -> A} {A} \cowith
  | f g => g ()
  | ret a _ => a
  | ret_f g => idp
  | f_sec a => idp
