\import Paths
\import HLevel
\import Equiv
\import Equiv.Path
\import Equiv.HalfAdjoint

\record Fib {A B : \Type} (f : A -> B) (base : B) (over : A) (basePath : f over = base)
  \where {
    \func ext {A B : \Type} (f : A -> B) (b0 : B) (x x' : Fib f b0) (p : x.over = x'.over) (q : pmap f p *> x'.basePath = x.basePath) : x = x' =>
      -- First, prove that q' : transport (\lam y => f y = b0) p x.p = x'.p.
      \let q' => Jl (\lam _ p' => transport (\lam y => f y = b0) p' x.basePath = inv (pmap f p') *> x.basePath) (inv (idp_*> x.basePath)) p *> rotatePathLeft (inv q)
      -- Then use the usual Sigma extensionality.
      \in path (\lam i => \new Fib f b0 (p @ i) (pathOver q' @ i))

    \func =Sigma {A B : \Type} (f : A -> B) (base : B) : QEquiv {Fib f base} {\Sigma (over : A) (f over = base)} \cowith
      | f (x : Fib f base) => (x.over, x.basePath)
      | ret p => \new Fib f base p.1 p.2
      | ret_f x => idp
      | f_sec p => idp

    \func equiv {A B : \Type} (f : A -> B) (b0 : B) (x x' : Fib f b0) : QEquiv {x = x'} {\Sigma (p : x.over = x'.over) (pmap f p *> x'.basePath = x.basePath)} =>
      \let S (x x' : Fib f b0) => \Sigma (p : x.over = x'.over) (pmap f p *> x'.basePath = x.basePath)
      \in pathEquiv S (\lam {x x' : Fib f b0} =>
        \new Retraction {
          | f q => transport (S x) q (idp, idp_*> x.basePath)
          | sec s => ext f b0 x x' s.1 s.2
          | f_sec s => Jl (\lam x1 s1 => \Pi (bp : f x1 = b0) (s2 : pmap f s1 *> bp = x.basePath) ->
                                           transport (S x) (ext f b0 x (\new Fib f b0 x1 bp) s1 s2) (idp, idp_*> x.basePath) = (s1,s2))
                          (\lam bp s2 => Jl (\lam bp0 s2' => transport (S (\new Fib f b0 x.over bp0))
                                                                       (ext f b0 (\new Fib f b0 x.over bp0) (\new Fib f b0 x.over bp) idp s2')
                                                                       (idp, idp_*> bp0)
                                                             = (idp,s2'))
                                            (Jl (\lam b0' bp' => transport (\lam (x' : Fib f b0') => \Sigma (p : x.over = x'.over) (pmap f p *> x'.basePath = idp *> bp'))
                                                                           (ext f b0' (\new Fib f b0' x.over (idp *> bp')) (\new Fib f b0' x.over bp') idp idp)
                                                                           (idp, idp_*> (idp *> bp'))
                                                                 = (idp, idp))
                                                idp
                                                bp)
                                            s2)
                          s.1 x'.basePath s.2
        })
  }

\func hasContrFibers {A B : \Type} (f : A -> B) => \Pi (b0 : B) -> Contr (Fib f b0)
  \where
    \lemma isProp {A B : \Type} {f : A -> B} : \level (HLevel.isProp (hasContrFibers f)) (HLevel.isProp.isProp (hasContrFibers f))
      => HLevels-pi {B} (\lam b0 => Contr (Fib f b0)) {0} (\lam b0 => Contr.isProp (Fib f b0))

\func contrFibers=>Equiv {A B : \Type} (f : A -> B) (p : hasContrFibers f) : QEquiv f =>
  \let sec y => Contr.center {p y}
  \in \new QEquiv {
    | ret y => Fib.over {sec y}
    | ret_f x => pmap (\lam (r : Fib f (f x)) => r.over) (Contr.contraction {p (f x)} (\new Fib f (f x) x idp))
    | f_sec y => Fib.basePath {sec y}
  }

\lemma Equiv=>contrFibers {A B : \Type} (f : A -> B) (p : HAEquiv f) : hasContrFibers f => \lam b0 =>
  \let | x0 => \new Fib f b0 (p.ret b0) (p.f_sec b0)
  \in Contr.make x0 (\lam (x : Fib f b0) =>
    \let -- p0 proves that the first components are equal: x0.over = x.over.
         | p0 => pmap p.ret (inv x.basePath) *> p.ret_f x.over
         -- q0 proves that the second compontents are equal: pmap f p0 *> x.basePath = x0.basePath.
         | q0 =>
            pmap f p0 *> x.basePath                                                         ==< pmap (\lam r => r *> x.basePath) (pmap_*>-comm f _ _) >==
            (pmap f (pmap p.ret (inv x.basePath)) *> pmap f (p.ret_f x.over)) *> x.basePath ==< pmap (\lam r => (pmap f (pmap p.ret (inv x.basePath)) *> r) *> x.basePath) (p.f_ret_f=f_sec_f x.over) >==
            (pmap f (pmap p.ret (inv x.basePath)) *> p.f_sec (f x.over)) *> x.basePath      ==< pmap (\lam r => r *> x.basePath) (homotopy-isNatural (\lam x => f (p.ret x)) (\lam x => x) p.f_sec (inv x.basePath)) >==
            (p.f_sec b0 *> inv x.basePath) *> x.basePath                                    ==< *>-assoc _ _ _ >==
            p.f_sec b0 *> (inv x.basePath *> x.basePath)                                    ==< pmap (\lam r => p.f_sec b0 *> r) (inv_*> x.basePath) >==
            p.f_sec b0                                                                      `qed
    \in Fib.ext f b0 x0 x p0 q0)
