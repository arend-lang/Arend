\import Equiv
\import Equiv.Path
\import Equiv.Univalence
\import Logic
\import HLevel
\import Paths

\data Dec (E : \Type)
  | yes E
  | no (Not E)

\class Decide (E : \Type)
  | decide : Dec E

\func DecEq (A : \Type) => \Pi {a a' : A} -> Dec (a = a')

\class DecideEq (E : \Type)
  | decideEq : DecEq E

\func Hedberg {A : \Type} (d : DecEq A) : isSet A => \lam x x' =>
  \let | R {a a' : A} (p : Dec (a = a')) : \Prop => \case p \with { | yes _ => Unit | no _ => Empty }
       | R' (a a' : A) => R {a} {a'} (d {a} {a'})
       | refl {a : A} (p : Dec (a = a)) => \case p \as p' \return R p' \with { | yes _ => unit | no q => q idp }
       | equiv : Equiv {x = x'} {R' x x'} => propPathEquiv R' (\lam a => refl (d {a} {a})) (\lam {a} {a'} s => \case d {a} {a'} \as p, s : R p \with {
         | yes p, _ => p
         | no _, s' => absurd s'
       }) {x} {x'}
  \in transport isProp (inv (univalence.ret equiv)) Path.inProp
  \where
    \func propPathEquiv {A : \Type} (R : A -> A -> \Prop) (refl : \Pi (a : A) -> R a a) (p : \Pi {a a' : A} -> R a a' -> a = a') {a a' : A} : QEquiv {a = a'} {R a a'}
      => pathEquiv R (\lam {a} {a'} => \new Retraction (\lam q => transport (R a) q (refl a)) p (\lam _ => Path.inProp _ _))