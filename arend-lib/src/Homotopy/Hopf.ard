\import Equiv
\import Homotopy.Cube
\import Homotopy.Pointed
\import Homotopy.Sphere.Circle
\import Homotopy.Suspension
\import Logic
\import Paths

\class HSpace \extends Pointed
  | \infixl 7 * : E -> E -> E
  | base-left (x : E) : base * x = x
  | base-right (x : E) : x * base = x

\lemma HSpace-conn (A : HSpace) (c : \Pi (x y : A) -> TruncP (x = y)) (x : A) : Equiv (x *) =>
  \case c base x \with {
    | inP base=x => transport (\lam f => Equiv f)
                              (path (\lam i y => (inv (base-left y) *> pmap (\lam z => z * y) base=x) @ i))
                              idEquiv
  }

\func Sphere1_conn (x y : Sphere1) : TruncP (x = y)
  | base1, base1 => inP idp

\instance Sphere1_HSpace : HSpace Sphere1
  | base => base1
  | * => mult
  | base-left _ => idp
  | base-right => mult-right
  \where {
    \open Sphere1(ploop)

    \func circle-loop (y : Sphere1) : y = y
      | base1 => path loop
      | loop i => Cube2.map ploop ploop ploop ploop (inv (<*_idp ploop) *> pmap (ploop <*) (inv (*>_inv ploop))) @ i

    \func mult (x y : Sphere1) : Sphere1 \elim x
      | base1 => y
      | loop i => circle-loop y @ i

    \func mult-right (x : Sphere1) : mult x base1 = x
      | base1 => idp
      | loop i => idp
  }
