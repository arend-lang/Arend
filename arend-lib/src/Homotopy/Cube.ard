\import Paths

-- | The type of squares with a specified boundary
\func Cube2 {A : \Type} {a00 a01 a10 a11 : A} (p_0 : a00 = a10) (p_1 : a01 = a11) (p0_ : a00 = a01) (p1_ : a10 = a11) =>
  Path (\lam j => p0_ @ j = p1_ @ j) p_0 p_1
  \where {
    {- | The type of cubes in A is equivalent to a certain 2-path in A.
     -   This function satisfies the following equality:
     -   ```equality p q idp idp r == idpe \Type (p = q)```
     -}
    \func equality {A : \Type} {a00 a01 a10 a11 : A} (p_0 : a00 = a10) (p_1 : a01 = a11) (p0_ : a00 = a01) (p1_ : a10 = a11)
      : (p_0 = p0_ <* p_1 *> inv p1_) = Cube2 p_0 p_1 p0_ p1_
      => path (\lam i => Path (\lam j => p0_ @ squeeze i j = p1_ @ squeeze i j) p_0 (path (\lam j => p0_ @ squeezeR i j) <* p_1 *> inv (path (\lam j => p1_ @ squeezeR i j))))

    {- | This function satisfies the following equality:
     -   ```map p q idp idp r == r```
     -}
    \func map {A : \Type} {a00 a01 a10 a11 : A} (p_0 : a00 = a10) (p_1 : a01 = a11) (p0_ : a00 = a01) (p1_ : a10 = a11) (r : p_0 = p0_ <* p_1 *> inv p1_) : Cube2 p_0 p_1 p0_ p1_
      => coe (\lam i => equality p_0 p_1 p0_ p1_ @ i) r right
    \where
      \func functorial {A B : \Type} (f : A -> B) {a00 a01 a10 a11 : A} (p_0 : a00 = a10) (p_1 : a01 = a11) (p0_ : a00 = a01) (p1_ : a10 = a11) (r : p_0 = p0_ <* p_1 *> inv p1_)
        : path (\lam i => path (\lam j => f (map p_0 p_1 p0_ p1_ r @ i @ j))) = {Cube2 (pmap f p_0) (pmap f p_1) (pmap f p0_) (pmap f p1_)}
          map (pmap f p_0) (pmap f p_1) (pmap f p0_) (pmap f p1_)
              (pmap (pmap f) r *> pmap_<*-comm f p0_ (p_1 *> inv p1_) *> pmap (pmap f p0_ <*) (pmap_*>-comm f p_1 (inv p1_) *> pmap (pmap f p_1 *>) (pmap_inv-comm f p1_)))
        => Jl (\lam a01' p0_' => \Pi (p_1' : a01' = a11) (r : p_0 = p0_' <* p_1' *> inv p1_) -> path (\lam i => path (\lam j => f (map p_0 p_1' p0_' p1_ r @ i @ j))) = {Cube2 (pmap f p_0) (pmap f p_1') (pmap f p0_') (pmap f p1_)} map (pmap f p_0) (pmap f p_1') (pmap f p0_') (pmap f p1_) (pmap (pmap f) r *> pmap_<*-comm f p0_' (p_1' *> inv p1_) *> pmap (pmap f p0_' <*) (pmap_*>-comm f p_1' (inv p1_) *> pmap (pmap f p_1' *>) (pmap_inv-comm f p1_))))
              (Jl (\lam a11' p1_' => \Pi (p_1' : a00 = a11') (r' : p_0 = p_1' *> inv p1_') -> path (\lam i => path (\lam j => f (map p_0 p_1' idp p1_' r' @ i @ j))) = {Cube2 (pmap f p_0) (pmap f p_1') idp (pmap f p1_')} map (pmap f p_0) (pmap f p_1') idp (pmap f p1_') (pmap (pmap f) r' *> idp *> pmap_*>-comm f p_1' (inv p1_') *> pmap (pmap f p_1' *>) (pmap_inv-comm f p1_'))) (\lam _ _ => idp) p1_) p0_ p_1 r
  }

\func Cube3 {A : \Type} {v000 v001 v010 v011 v100 v101 v110 v111 : A}
            {e00_ : v000 = v100} {e10_ : v001 = v101} {e01_ : v010 = v110} {e11_ : v011 = v111}
            {e0_0 : v000 = v010} {e1_0 : v001 = v011} {e0_1 : v100 = v110} {e1_1 : v101 = v111}
            {e_00 : v000 = v001} {e_10 : v010 = v011} {e_01 : v100 = v101} {e_11 : v110 = v111}
            (f__0 : Cube2 e_00 e_10 e0_0 e1_0) -- back face
            (f__1 : Cube2 e_01 e_11 e0_1 e1_1) -- front face
            (f_0_ : Cube2 e_00 e_01 e00_ e10_) -- top face
            (f_1_ : Cube2 e_10 e_11 e01_ e11_) -- bottom face
            (f0__ : Cube2 e0_0 e0_1 e00_ e01_) -- left face
            (f1__ : Cube2 e1_0 e1_1 e10_ e11_) -- right face
            => Path (\lam k => Path (\lam j => f0__ @ k @ j = f1__ @ k @ j) (f_0_ @ k) (f_1_ @ k)) f__0 f__1
