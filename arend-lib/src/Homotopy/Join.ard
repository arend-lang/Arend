\import Equiv
\import Homotopy.Cube
\import Homotopy.Pushout
\import Homotopy.Sphere
\import Homotopy.Suspension
\import Paths
\open Sphere(Sphere0,north0,south0)

\func Join (A B : \Type) => PushoutData {\Sigma A B} (\lam p => p.1) (\lam p => p.2)
  \where {
    \func jinl {A B : \Type} (a : A) : Join A B => pinl a

    \func jinr {A B : \Type} (b : B) : Join A B => pinr b

    \func jglue {A B : \Type} (a : A) (b : B) : jinl a = jinr b => path (pglue (a,b))
  }

\open Join

\func JoinSphere0 (A : \Type) : QEquiv {Join Sphere0 A} {Susp A} \cowith
  | f => joinToSphere0
  | ret => sphere0ToJoin
  | ret_f => joinShere0Join
  | f_sec => sphere0JoinSphere0
  \where {
    \func joinToSphere0 {A : \Type} (j : Join Sphere0 A) : Susp A
      | pinl north0 => north
      | pinl south0 => south
      | pinr _ => south
      | pglue (north0,a) i => merid a i
      | pglue (south0,_) _ => south

    \func sphere0ToJoin {A : \Type} (s : Susp A) : Join Sphere0 A
      | north => jinl north0
      | south => jinl south0
      | merid a i => (jglue north0 a *> inv (jglue south0 a)) @ i

    \func joinShere0Join {A : \Type} (j : Join Sphere0 A) : sphere0ToJoin (joinToSphere0 j) = j
      | pinl north0 => idp
      | pinl south0 => idp
      | pinr a => jglue south0 a
      | pglue (north0,a) j => path (\lam i => Cube2.map
          (jglue north0 a *> inv (jglue south0 a))  -- top edge
          (jglue north0 a)                          -- bottom edge
          (idpe (jinl north0))                      -- left edge
          (jglue south0 a)                          -- right edge
          idp @ i @ j)
      | pglue (south0,a) j => path (\lam i => pglue (south0,a) (squeeze i j))

    \func sphere0JoinSphere0 {A : \Type} (s : Susp A) : joinToSphere0 (sphere0ToJoin s) = s
      | north => idp
      | south => idp
      | merid a i =>
        \let t =>
          pmap joinToSphere0 (jglue north0 a *> inv (jglue south0 a)) ==< pmap_*>-comm joinToSphere0 (jglue north0 a) (inv (jglue south0 a)) >==
          path (merid a) *> pmap joinToSphere0 (inv (jglue south0 a)) ==< pmap (path (merid a) *>) (pmap_inv-comm joinToSphere0 (jglue south0 a)) >==
          path (merid a)                                              `qed
        \in path (\lam j => t @ j @ i)
  }

\func Join-assoc (A B C : \Type) : QEquiv {Join (Join A B) C} {Join A (Join B C)} \cowith
  | f => leftToRight
  | ret => rightToLeft
  | ret_f => leftRightLeft
  | f_sec => rightLeftRight
  \where {
    \func leftToRight {A B C : \Type} (j : Join (Join A B) C) : Join A (Join B C)
      | pinl (pinl a) => jinl a
      | pinl (pinr b) => jinr (jinl b)
      | pinl (pglue (a,b) j) => pglue (a, jinl b) j
      | pinr c => jinr (jinr c)
      | pglue (pinl a, c) i => pglue (a, jinr c) i
      | pglue (pinr b, c) i => jinr (pglue (b,c) i)
      | pglue (pglue (a,b) j, c) i => Cube2.map
          (jglue a (jinr c))      -- top edge
          (pmap jinr (jglue b c)) -- bottom edge
          (jglue a (jinl b))      -- left edge
          (idpe (jinr (jinr c)))  -- right edge
          (Jl (\lam x p => jglue a x = jglue a (jinl b) <* pmap jinr p) (inv (<*_idp _)) (jglue b c))
          @ j @ i

    \func rightToLeft {A B C : \Type} (j : Join A (Join B C)) : Join (Join A B) C
      | pinl a => jinl (jinl a)
      | pinr (pinl b) => jinl (jinr b)
      | pinr (pinr c) => jinr c
      | pinr (pglue (b,c) j) => pglue (jinr b, c) j
      | pglue (a, pinl b) i => jinl (pglue (a,b) i)
      | pglue (a, pinr c) i => pglue (jinl a, c) i
      | pglue (a, pglue (b,c) j) i => Cube2.map
          (pmap jinl (jglue a b)) -- top edge
          (jglue (jinl a) c)      -- bottom edge
          (idpe (jinl (jinl a)))  -- left edge
          (jglue (jinr b) c)      -- right edge
          (Jl (\lam x p => pmap jinl p = jglue (jinl a) c *> inv (jglue x c)) (inv (*>_inv _)) (jglue a b))
          @ j @ i

    \func leftRightLeft {A B C : \Type} (j : Join (Join A B) C) : rightToLeft (leftToRight j) = j
      | pinl (pinl a) => idp
      | pinl (pinr b) => idp
      | pinl (pglue (a,b) j) => idp
      | pinr c => idp
      | pglue (pinl a, c) i => idp
      | pglue (pinr b, c) i => idp
      | pglue (pglue (a,b) j, c) i =>
        \let | r => Jl (\lam x p => jglue a x = jglue a (jinl b) <* pmap jinr p) (inv (<*_idp _)) (jglue b c)
             | p_0 => jglue a (jinr c)
             | p_1 => pmap jinr (jglue b c)
             | p0_ => jglue a (jinl b)
             | p1_ => idpe (jinr (jinr c))
             | C => Cube2 (jglue (jinl a) c) (jglue (jinr b) c) (pmap jinl (jglue a b)) (idpe (jinr c))
             | s1 : C => Cube2.map (jglue (jinl a) c) (jglue (jinr b) c) (pmap jinl (jglue a b)) (idpe (jinr c))
                                   (pmap (pmap rightToLeft) r *> pmap_<*-comm rightToLeft p0_ (p_1 *> inv p1_) *> pmap (pmap rightToLeft p0_ <*) (pmap_*>-comm rightToLeft p_1 (inv p1_) *> pmap (pmap rightToLeft p_1 *>) (pmap_inv-comm rightToLeft p1_)))
             | s2 : C => path (\lam j => path (\lam i => pglue (pglue (a,b) j, c) i))
             | q : s1 = s2 => {?}
        \in path (\lam k => (Cube2.map.functorial rightToLeft p_0 p_1 p0_ p1_ r *> q) @ k @ j @ i)

    \func rightLeftRight {A B C : \Type} (j : Join A (Join B C)) : leftToRight (rightToLeft j) = j
      | pinl a => idp
      | pinr (pinl b) => idp
      | pinr (pinr c) => idp
      | pinr (pglue (b,c) j) => idp
      | pglue (a, pinl b) i => idp
      | pglue (a, pinr c) i => idp
      | pglue (a, pglue (b,c) j) i => {?}
  }