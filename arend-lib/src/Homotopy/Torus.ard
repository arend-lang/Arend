\import Equiv
\import Equiv.Univalence
\import Homotopy.Sphere.Circle
\import Paths

\data Torus
  | point
  | line1  I \with { left => point | right => point }
  | line2  I \with { left => point | right => point }
  | face I I \with {
    | left,  i => line2 i
    | right, i => line2 i
    | i, left  => line1 i
    | i, right => line1 i
  }

\func sphereTorus (_ : \Sigma Sphere1 Sphere1) : Torus
  | (base1, base1) => point
  | (base1, loop j) => line2 j
  | (loop i, base1) => line1 i
  | (loop i, loop j) => face i j

\func torusSphere (_ : Torus) : \Sigma Sphere1 Sphere1
  | point => (base1, base1)
  | line1 i => (loop i, base1)
  | line2 j => (base1, loop j)
  | face i j => (loop i, loop j)

\func torusSphereTorus (a : \Sigma Sphere1 Sphere1) : torusSphere (sphereTorus a) = a
  | (base1, base1) => idp
  | (base1, loop j) => idp
  | (loop i, base1) => idp
  | (loop i, loop j) => idp

\func sphereTorusSphere (a : Torus) : sphereTorus (torusSphere a) = a
  | point => idp
  | line1 i => idp
  | line2 j => idp
  | face i j => idp

-- | Torus = Sphere
\func Torus=Sphere => iso torusSphere sphereTorus sphereTorusSphere torusSphereTorus

-- | point = (base1, base1)
\func point-base => coe Torus=Sphere point

\func OmegaTorus => point = point

\func Loop_S1^2 : OmegaTorus = (\Sigma Int Int) =>
  \let | sigmaEta => sigmaEquiv (\lam _ => Sphere1) (base1, base1) (base1, base1)
       | loopBase => (base1, base1) = (base1, base1)
  \in OmegaTorus           ==< path (\lam i => point-base i = point-base i) >==
  loopBase                 ==< QEquiv-to-= sigmaEta >==
  (\Sigma OmegaS1 OmegaS1) ==< path (\lam i => \Sigma (Loop_S1 @ i) (Loop_S1 @ i)) >==
  (\Sigma Int Int)         `qed
