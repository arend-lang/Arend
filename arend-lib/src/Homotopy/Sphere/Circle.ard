\import Arith.Int
\import Paths

\data S1
  | base
  | loop I \with {
    | left => base
    | right => base
  }

\func code (x : S1) : \Set0
  | base => Int
  | loop i => iso isuc ipred ipred_isuc isuc_ipred i

\func encode (x : S1) (p : base = x) => transport code p 0

\func wind (x : Int) : base = base
  | pos 0 => idp
  | pos (suc n) => wind (pos n) *> path loop
  | neg (suc n) => wind (neg n) *> inv (path loop)

\func decode (x : S1) : code x -> base = x \elim x
  | base => wind
  | loop i => pathOver (path (\lam j x => decode_loop x @ j)) @ i
  \where {
    \func wind_loop (n : Int) : wind n *> path loop = wind (isuc n)
      | pos _ => idp
      | neg (suc n) => *>-assoc (wind (neg n)) (inv (path loop)) (path loop) *> pmap (\lam p => (wind (neg n)) *> p) (inv_*> (path loop))

    \func decode_loop (x : Int) =>
      transport (\lam x => code x -> base = x) (path loop) wind x                ==< transport_pi code (base =) (path loop) wind x >==
      transport (base =) (path loop) (wind (transport code (inv (path loop)) x)) ==< transport_path-right (path loop) (wind (transport code (inv (path loop)) x)) >==
      wind (transport code (inv (path loop)) x) *> path loop                     ==< pmap (\lam p => p *> path loop) (pmap wind (transport_inv_func code (path loop) ipred ipred_isuc x)) >==
      wind (ipred x) *> path loop                                                ==< wind_loop (ipred x) >==
      wind (isuc (ipred x))                                                      ==< pmap wind (isuc_ipred x) >==
      wind x                                                                     `qed
  }

\func encode_decode (x : S1) (p : base = x) : decode x (encode x p) = p =>
  Jl (\lam y q => decode y (encode y q) = q) idp p

\func encode_wind (x : Int) : encode base (wind x) = x
  | pos (suc m) =>
      encode base (wind (pos m) *> path loop)                 ==< transport_*> code (wind (pos m)) (path loop) 0 >==
      transport code (path loop) (encode base (wind (pos m))) ==< pmap (\lam x => transport code (path loop) x) (encode_wind (pos m)) >==
      pos (suc m)                                             `qed
  | pos zero => idp
  | neg (suc m) =>
      encode base (wind (neg m) *> (inv (path loop)))               ==< transport_*> code (wind (neg m)) (inv (path loop)) 0 >==
      transport code (inv (path loop)) (encode base (wind (neg m))) ==< pmap (\lam x => transport code (inv (path loop)) x) (encode_wind (neg m)) >==
      transport code (inv (path loop)) (neg m)                      ==< transport_inv_func code (path loop) ipred ipred_isuc (neg m) >==
      neg (suc m)                                                   `qed

\func decode_encode (x : S1) (c : code x) : encode x (decode x c) = c \elim x
  | base => encode_wind c

\func Loop_S1 : (base = base) = Int => path (iso (encode base) wind (encode_decode base) encode_wind)