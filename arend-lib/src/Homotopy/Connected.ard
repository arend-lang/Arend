\import Homotopy.Pointed
\import Homotopy.Pushout
\import Homotopy.Suspension
\import Logic
\import Paths

\class Connected \extends Pointed
  | isConn (x y : E) : TruncP (x = y)

\instance UnitConnected : Connected (\Sigma)
  | base => ()
  | isConn _ _ => inP idp

\instance PushoutConnected {A : Pointed} {B C : Connected} {f : A -> B} {g : A -> C} : Connected (PushoutData f g)
  | base => pinl base
  | isConn x y => \case x \as x, y \as y \return TruncP (x = y) \with {
    | pinl b, pinl b' => TruncP.map (isConn b b') (pmap pinl)
    | pinl b, pinr c => \case isConn b (f base), isConn (g base) c \with {
      | inP p, inP q => inP (pmap pinl p *> path (pglue base) *> pmap pinr q)
    }
    | pinr c, pinl b => \case isConn c (g base), isConn (f base) b \with {
      | inP p, inP q => inP (pmap pinr p *> inv (path (pglue base)) *> pmap pinl q)
    }
    | pinr c, pinr c' => TruncP.map (isConn c c') (pmap pinr)
  }
