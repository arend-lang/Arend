\import Equiv
\import Equiv.Univalence
\import Function
\import Homotopy.Pointed
\import Homotopy.Sphere
\import Homotopy.Square
\import Homotopy.Suspension
\import Logic
\import Paths

\class Pushout (square : Square)
  | pushout-univ {Z : \Type} : Equiv {square.Y -> Z} {Square { | Y => Z | U => square.U | V => square.V | X => square.X | uv => square.uv | ux => square.ux }} (Square.push square)
  \where {
    -- | Pushouts are functorial
    \func map (p : Pushout) (s : Square)
              (f : p.square.U -> s.U)
              (g : p.square.V -> s.V)
              (h : p.square.X -> s.X)
              (e1 : \Pi (u : p.square.U) -> s.uv (f u) = g (p.square.uv u))
              (e2 : \Pi (u : p.square.U) -> s.ux (f u) = h (p.square.ux u))
              : p.square.Y -> s.Y
      => p.pushout-univ.ret (\new Square {
        | vy v => s.vy (g v)
        | xy x => s.xy (h x)
        | sqcomm u => pmap s.vy (inv (e1 u)) <* s.sqcomm (f u) *> pmap s.xy (e2 u)
      })

    -- | {map} preserves identity maps
    \func map_id (p : Pushout) (y : p.square.Y) : map p p.square id id id (\lam _ => idp) (\lam _ => idp) = id
      => p.pushout-univ.ret_f (\lam x => x)
  }

\data PushoutData {A B C : \Type} (f : A -> B) (g : A -> C)
  | pinl B
  | pinr C
  | pglue (a : A) (i : I) \elim i {
    | left => pinl (f a)
    | right => pinr (g a)
  }
  \where {
    \func ppglue {A B C : \Type} {f : A -> B} {g : A -> C} (a : A) : pinl (f a) = {PushoutData f g} pinr (g a) => path (pglue a)

    \func rec {A B C : \Type} {f : A -> B} {g : A -> C} {Z : \Type} (lm : B -> Z) (rm : C -> Z) (gm : \Pi (a : A) -> lm (f a) = rm (g a)) (x : PushoutData f g) : Z \elim x
      | pinl b => lm b
      | pinr c => rm c
      | pglue a i => gm a @ i

    -- | The total space of a fibration over a pushout is equivalent to a pushout of fibers of this fibration.
    \func fibration-lemma {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type)
      : total F = (\Sigma (w : PushoutData f g) (F w))
      => QEquiv-to-= (totalPushoutLeft F) *> path (TotalPushout F) *> QEquiv-to-= (totalPushoutRight F)
      \where {
        \func total {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type)
          => PushoutData {\Sigma (x : A) (F (pinl (f x)))}
                         {\Sigma (y : B) (F (pinl y))}
                         {\Sigma (z : C) (F (pinr z))}
                         (\lam p => (f p.1, p.2))
                         (\lam p => (g p.1, transport F (ppglue p.1) p.2))

        \data TotalPushout {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type) (j : I)
          | tinl (y : B) (F (pinl y))
          | tinr (z : C) (F (pinr z))
          | tglue (x : A) (i : I) (w : F (pglue x (I.squeeze i j))) \elim i {
            | left => tinl (f x) w
            | right => tinr (g x) (coe2 (\lam i => F (pglue x i)) j w right)
          }

        \func totalPushoutLeft {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type)
          : QEquiv {total F} {TotalPushout F left} \cowith
          | f => LR F
          | ret => RL F
          | ret_f t => \case t \as t \return RL F (LR F t) = t \with {
            | pinl (y,t) => idp
            | pinr (z,t) => idp
            | pglue (x,t) i => idp
          }
          | f_sec t => \case t \as t \return LR F (RL F t) = t \with {
            | tinl y t => idp
            | tinr y t => idp
            | tglue x i t => idp
          }
          \where {
            \func LR {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type) (t : total F) : TotalPushout F left \elim t
              | pinl (y,t) => tinl y t
              | pinr (z,t) => tinr z t
              | pglue (x,t) i => tglue x i t

            \func RL {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type) (t : TotalPushout F left) : total F \elim t
              | tinl y t => pinl (y,t)
              | tinr z t => pinr (z,t)
              | tglue x i t => pglue (x,t) i
          }

        \func totalPushoutRight {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type)
          : QEquiv {TotalPushout F right} {\Sigma (w : PushoutData f g) (F w)} \cowith
          | f => LR F
          | ret => RL F
          | ret_f t => \case t \as t \return RL F (LR F t) = t \with {
            | tinl y t => idp
            | tinr z t => idp
            | tglue x i t => idp
          }
          | f_sec t => \case t \as t \return LR F (RL F t) = t \with {
            | (pinl y, t) => idp
            | (pinr z, t) => idp
            | (pglue x i, t) => idp
          }
          \where {
            \func LR {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type) (t : TotalPushout F right) : \Sigma (w : PushoutData f g) (F w) \elim t
              | tinl y t => (pinl y, t)
              | tinr z t => (pinr z, t)
              | tglue x i t => (pglue x i, t)

            \func RL {A B C : \Type} {f : A -> B} {g : A -> C} (F : PushoutData f g -> \Type) (t : \Sigma (w : PushoutData f g) (F w)) : TotalPushout F right \elim t
              | (pinl y, t) => tinl y t
              | (pinr z, t) => tinr z t
              | (pglue x i, t) => tglue x i t
          }
      }
  }

\open PushoutData

\instance PushoutPointed {A B C : \Type} {P : Pointed B} {f : A -> B} {g : A -> C} : Pointed (PushoutData f g)
  | base => pinl base

\func pushoutData {A B C : \Type} (f : A -> B) (g : A -> C) : Pushout \cowith
  | square {
    | U => A
    | V => B
    | X => C
    | Y => PushoutData f g
    | ux => g
    | vy => pinl
    | uv => f
    | xy => pinr
    | sqcomm a => path (pglue a)
  }
  | pushout-univ {Z} => \new QEquiv {
    | ret (s : Square) => rec s.vy s.xy s.sqcomm
    | ret_f h => path (\lam i p => (\case p \as p \return rec (h `o` pinl) (h `o` pinr) (\lam a => path (\lam j => h (pglue a j))) p = h p \with {
      | pinl _ => idp
      | pinr _ => idp
      | pglue _ _ => idp
    }) @ i)
    | f_sec _ => idp
  }