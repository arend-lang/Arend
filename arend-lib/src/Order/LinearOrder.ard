\import Data.Or
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set
\open JoinSemilattice
\open MeetSemilattice

\class TotalOrder \extends DistributiveLattice {
  | totality (x y : E) : x <= y || y <= x

  | ∧ x y => (tjoin (totality x y)).1
  | meet-left {x} {y} => (tjoin (totality x y)).2.1
  | meet-right {x} {y} => (tjoin (totality x y)).2.2
  | meet-univ {x} {y} {z} => (tjoin (totality x y)).2.3 z

  | ∨ x y => (tmeet (totality x y)).1
  | join-left {x} {y} => (tmeet (totality x y)).2.1
  | join-right {x} {y} => (tmeet (totality x y)).2.2
  | join-univ {x} {y} {z} => (tmeet (totality x y)).2.3 z

  | ldistr>= => rewriteI (total-distrib totality) <=-reflexive
} \where {
  \func tjoin {E : Poset} {x y : E} => ||.rec MeetSemilattice.Meet-isProp
                                              (\lam x<=y => (x, (E.<=-reflexive, x<=y, \lam z z<=x _ => z<=x)))
                                              (\lam y<=x => (y, (y<=x, E.<=-reflexive, \lam z _ z<=y => z<=y)))

  \func tmeet {E : Poset} {x y : E} => ||.rec JoinSemilattice.Join-isProp
                                              (\lam x<=y => (y, (x<=y, E.<=-reflexive, \lam z _ y<=z => y<=z)))
                                              (\lam y<=x => (x, (E.<=-reflexive, y<=x, \lam z z<=x _ => z<=x)))

  \lemma total-distrib {E : Lattice} (totality : \Pi (x y : E) -> x <= y || y <= x) {x y z : E} : x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z) =>
    \case totality y z \with {
      | byLeft y<=z => distrib-x-y totality y<=z
      | byRight z<=y => transport2 (x ∧ __ = __) join-comm join-comm (distrib-x-y totality z<=y)
    } \where {
    \lemma distrib-x-y {E : Lattice} (totality : \Pi (x y : E) -> x <= y || y <= x)
                       {x y z : E} (y<=z : y <= z) : x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z) =>
      pmap (x ∧) (join_<= y<=z) *> (\case totality (x ∧ y) (x ∧ z) \with {
        | byLeft xy<=xz => inv (join_<= xy<=xz)
        | byRight xz<=xy =>
          \have xz=xy => <=-antisymmetric xz<=xy (meet-univ meet-left (<=-transitive meet-right y<=z))
          \in rewriteI xz=xy (inv join-idemp)
      })
  }
}

-- | A linearly ordered set.
\class LinearOrder \extends StrictPoset {
  | <-comparison (x y z : E) : x < z -> x < y || y < z
  | <-connectedness {x y : E} : Not (x < y) -> Not (y < x) -> x = y
} \where {
  \class With# \extends LinearOrder, Set#
    | # x y => x < y || y < x
    | #-irreflexive x#x => \case x#x \with {
      | byLeft x<x => <-irreflexive x<x
      | byRight x<x => <-irreflexive x<x
    }
    | #-symmetric x#y => \case x#y \with {
      | byLeft x<y => byRight x<y
      | byRight y<x => byLeft y<x
    }
    | #-comparison x y z x#z => \case x#z \with {
      | byLeft x<z => \case <-comparison x y z x<z \with {
        | byLeft x<y => byLeft (byLeft x<y)
        | byRight y<z => byRight (byLeft y<z)
      }
      | byRight z<x => \case <-comparison z y x z<x \with {
        | byLeft z<y => byRight (byRight z<y)
        | byRight y<x => byLeft (byRight y<x)
      }
    }
    | tightness x/#y => <-connectedness (\lam x<y => x/#y (byLeft x<y)) (\lam y<x => x/#y (byRight y<x))

  \data Tri {A : StrictPoset} (a a' : A)
    | less (a < a')
    | equals (a = a')
    | greater (a > a')
    \where
      \use \level levelProp : \Prop

  -- | A linearly ordered set with decidable inequality.
  \class Dec \extends LinearOrder, DecSet {
    \field trichotomy (x y : E) : Tri x y

    | <-comparison x y z x<z => \case trichotomy x y \with {
      | less x<y => byLeft x<y
      | equals x=y => byRight (transport (`< z) x=y x<z)
      | greater y<x => byRight (<-transitive y<x x<z)
    }
    | <-connectedness {x} {y} x/<y y/<x => \case trichotomy x y \with {
      | less x<y => absurd (x/<y x<y)
      | equals x=y => x=y
      | greater y<x => absurd (y/<x y<x)
    }

    \default decideEq x y => \case trichotomy x y \with {
      | less x<y => no (\lam x=y => <-irreflexive (transport (`< y) x=y x<y))
      | equals x=y => yes x=y
      | greater y<x => no (\lam x=y => <-irreflexive (transport (y <) x=y y<x))
    }
  } \where {
    \func =>TotalOrder {L : Dec} : TotalOrder L \cowith
      | <= => <=
      | <=-reflexive {x} => <=-equals idp
      | <=-transitive {x} {_} {z} x<=y y<=z => \case x<=y, y<=z \with {
        | <=-equals x=y, <=-equals y=z => <=-equals (x=y *> y=z)
        | <=-equals x=y, <=-less y<z => <=-less (transport (`< z) (inv x=y) y<z)
        | <=-less x<y, <=-equals y=z => <=-less (transport (x <) y=z x<y)
        | <=-less x<y, <=-less y<z => <=-less (<-transitive x<y y<z)
      }
      | totality x y => \case trichotomy x y \with {
        | equals x=y => byLeft (<=-equals x=y)
        | less x<y => byLeft (<=-less x<y)
        | greater y<x => byRight (<=-less y<x)
      }
      | <=-antisymmetric x<=y y<=x => \case x<=y, y<=x \with {
        | <=-equals x=y, _ => x=y
        | _, <=-equals y=x => inv y=x
        | <=-less x<y, <=-less y<x => absurd (<-irreflexive (<-transitive x<y y<x))
      }
  }

  \data \infix 4 <= {A : StrictPoset} (a a' : A)
    | <=-equals (a = a')
    | <=-less (a < a')
    \where \use \level levelProp : \Prop

  \lemma <=_< {A : StrictPoset} {a1 a2 a3 : A} (p : a1 <= a2) (q : a2 < a3) : a1 < a3 \elim p
    | <=-equals idp => q
    | <=-less p => <-transitive p q

  \lemma <_<= {A : StrictPoset} {a1 a2 a3 : A} (p : a1 < a2) (q : a2 <= a3) : a1 < a3 \elim q
    | <=-equals idp => p
    | <=-less q => <-transitive p q

  \func dec<_<= {A : Dec} (a a' : A) : (a < a') `Or` (a' <= a) => \case trichotomy a a' \with {
    | less a<a' => inl a<a'
    | equals a=a' => inr (<=-equals (inv a=a'))
    | greater a>a' => inr (<=-less a>a')
  }

  \lemma dec<_reduce {A : Dec} {a a' : A} (p : a < a') : dec<_<= a a' = inl p
    => unfold dec<_<= (mcases contradiction \with {
      | less a<a' => pmap inl (Path.inProp a<a' p)
    })

  \lemma dec<=_reduce {A : Dec} {a a' : A} (p : a' <= a) : dec<_<= a a' = inr p
    => unfold dec<_<= (mcases (pmap inr (Path.inProp _ _)) \with {
      | less a<a' => contradiction
    })
}
