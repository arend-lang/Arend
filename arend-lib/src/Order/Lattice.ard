\import HLevel
\import Paths
\import Order.PartialOrder
\import Order.Lattice

\class JoinSemilattice \extends Poset {
  | join : E -> E -> E
  | join-left (x y : E) : join x y <= x
  | join-right (x y : E) : join x y <= y
  | join-univ (x y z : E) : z <= x -> z <= y -> z <= join x y
} \where {
  -- | {@ Join x y} is the type of elements which are joins of {@x} and {@y}.
  \func Join {E : Poset} (x y : E) => \Sigma (j : E) (\Sigma (j <= x) (j <= y) (\Pi (z : E) -> z <= x -> z <= y -> z <= j))
  \func Join-isProp {E : Poset} (x y : E) : isProp (Join x y) => \lam p1 p2 =>
      SigmaExt (\lam j => \Sigma (j <= x) (j <= y) (\Pi (z : E) -> z <= x -> z <= y -> z <= j)) p1 p2
               (antisymmetric p1.1 p2.1 (p2.2.3 p1.1 p1.2.1 p1.2.2) (p1.2.3 p2.1 p2.2.1 p2.2.2))
               (Path.inProp _ _)
}

\class MeetSemilattice \extends Poset {
  | meet : E -> E -> E
  | meet-left (x y : E) : x <= meet x y
  | meet-right (x y : E) : y <= meet x y
  | meet-univ (x y z : E) : x <= z -> y <= z -> meet x y <= z
} \where {
-- | {@ Meet x y} is the type of elements which are meets of {@x} and {@y}.
  \func Meet {E : Poset} (x y : E) => \Sigma (m : E) (\Sigma (x <= m) (y <= m) (\Pi (z : E) -> x <= z -> y <= z -> m <= z))
  \func Meet-isProp {E : Poset} (x y : E) : isProp (Meet x y) => \lam p1 p2 =>
      SigmaExt (\lam m => \Sigma (x <= m) (y <= m) (\Pi (z : E) -> x <= z -> y <= z -> m <= z)) p1 p2
               (antisymmetric p1.1 p2.1 (p1.2.3 p2.1 p2.2.1 p2.2.2) (p2.2.3 p1.1 p1.2.1 p1.2.2))
               (Path.inProp _ _)
}

\class Lattice \extends JoinSemilattice, MeetSemilattice

\module Bounded \where {
  \class JoinSemilattice \extends Order.Lattice.JoinSemilattice
    | bottom : E
    | bottom-univ (x : E) : bottom <= x

  \class MeetSemilattice \extends Order.Lattice.MeetSemilattice
    | top : E
    | top-univ (x : E) : x <= top

  \class Lattice \extends Order.Lattice.Lattice, JoinSemilattice, MeetSemilattice
}