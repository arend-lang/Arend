\import Logic
\import Paths
\import Relation.Equivalence
\import Set

\class Preorder \extends BaseSet {
  | \infix 4 <= : E -> E -> \Prop
  | <=-reflexive (x : E) : x <= x
  | <=-transitive (x y z : E) : x <= y -> y <= z -> x <= z

  \func EquivRel : Equivalence E \cowith
    | ~ x y => \Sigma (x <= y) (y <= x)
    | ~-reflexive x => (<=-reflexive x, <=-reflexive x)
    | ~-symmetric x y x~y => (x~y.2, x~y.1)
    | ~-transitive x y z x~y y~z => (<=-transitive x y z x~y.1 y~z.1, <=-transitive z y x y~z.2 x~y.2)

  \func PreorderC => Quotient (EquivRel.~)

  \instance PosetC : Poset PreorderC
    | <= => <=C
    | <=-reflexive _ => <=C-reflexive
    | <=-transitive _ _ _ => <=C-transitive
    | <=-antisymmetric _ _ => <=C-antisymmetric
  \where {
    \func \infix 4 <=C (x y : PreorderC) : \Prop \elim x, y
      | in~ x, in~ y => x <= y
      | ~-equiv x x' x~x' i, in~ y => propExt (\lam x<=y => <=-transitive x' x y x~x'.2 x<=y) (\lam x'<=y => <=-transitive x x' y x~x'.1 x'<=y) @ i
      | in~ x, ~-equiv y y' y~y' i => propExt (\lam x<=y => <=-transitive x y y' x<=y y~y'.1) (\lam x<=y' => <=-transitive x y' y x<=y' y~y'.2) @ i

    \lemma <=C-reflexive {x : PreorderC} : x <=C x \elim x
      | in~ x => <=-reflexive x

    \lemma <=C-transitive {x y z : PreorderC} (x<=y : x <=C y) (y<=z : y <=C z) : x <=C z \elim x, y, z
      | in~ x, in~ y, in~ z => <=-transitive x y z x<=y y<=z

    \lemma <=C-antisymmetric {x y : PreorderC} (x<=y : x <=C y) (y<=x : y <=C x) : x = y \elim x, y
      | in~ x, in~ y => path (~-equiv x y (x<=y, y<=x))
  }
}

\class Poset \extends Preorder
  | <=-antisymmetric (x y : E) : x <= y -> y <= x -> x = y

\func \infix 4 >= {P : Preorder} (x y : P) => y <= x
