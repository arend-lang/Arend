\import Algebra.Pointed
\import Logic
\import Paths
\import Set

\class Preorder \extends BaseSet {
  | \infix 4 <= : E -> E -> \Prop
  | <=-reflexive (x : E) : x <= x
  | <=-transitive (x y z : E) : x <= y -> y <= z -> x <= z
}

\class Poset \extends Preorder {
  | <=-antisymmetric (x y : E) : x <= y -> y <= x -> x = y
}

-- | Strict partial orders are also known as quasiorders
\class StrictPoset \extends BaseSet {
  | \infix 4 < : E -> E -> \Prop
  | <-irreflexive (x : E) : Not (x < x)
  | <-transitive (x y z : E) : x < y -> y < z -> x < z
} \where {
  \module Reasoning \where {
    \func \infixr 1 >>> {P : StrictPoset} {x y z : P} => <-transitive x y z

    \func \infixr 1 >>= {P : StrictPoset} {x y z : P} (x<y : x < y) (y=z : y = z) => transport (\lam t => x < t) y=z x<y

    \func \infixr 1 >=> {P : StrictPoset} {x y z : P} (x=y : x = y) (y<z : y < z) => transport (\lam t => t < z) (inv x=y) y<z

    \func \infix 2 <<< {P : StrictPoset} (x : P) {y : P} (p : x < y) => p
  }
}

\func \infix 4 > {P : StrictPoset} (x y : P) => y < x

\func \infix 4 >= {P : Preorder} (x y : P) => y <= x

-- | isPositive x is true if and only if x > 0
\class isPositive {E : \Set} {Z : AddPointed E} {P : StrictPoset E} (x : E) (p : x > {P} Z.addId)

-- | Positive E is the type of elements of E which are greather than 0.
\func Positive (E : \Set) {Z : AddPointed E} {P : StrictPoset E} => isPositive {E} {Z} {P}
