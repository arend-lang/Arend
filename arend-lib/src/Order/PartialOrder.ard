\import Category
\import Logic
\import Relation.Equivalence
\import Set

\class Preorder \extends BaseSet, Precat {
  | \infix 4 <= : E -> E -> \Prop
  | <=-reflexive {x : E} : x <= x
  | <=-transitive {x y z : E} : x <= y -> y <= z -> x <= z

  | Ob => E
  | Hom => <=
  | id _ => <=-reflexive
  | o f g => <=-transitive g f
  | id-left => Path.inProp _ _
  | id-right => Path.inProp _ _
  | o-assoc => Path.inProp _ _

  | \infix 4 >= : E -> E -> \Prop
  | >= x y => y <= x

  \func EquivRel : Equivalence E \cowith
    | ~ x y => \Sigma (x <= y) (y <= x)
    | ~-reflexive {x} => (<=-reflexive, <=-reflexive)
    | ~-symmetric {x} {y} x~y => (x~y.2, x~y.1)
    | ~-transitive {x} {y} {z} x~y y~z => (<=-transitive x~y.1 y~z.1, <=-transitive y~z.2 x~y.2)

  \func PreorderC => Quotient (EquivRel.~)

  \instance PosetC : Poset PreorderC
    | <= => <=C
    | <=-reflexive => <=C-reflexive
    | <=-transitive => <=C-transitive
    | <=-antisymmetric => <=C-antisymmetric
  \where {
    \func \infix 4 <=C (x y : PreorderC) : \Prop \elim x, y
      | in~ x, in~ y => x <= y
      | ~-equiv x x' x~x' i, in~ y => propExt (<=-transitive x~x'.2) (<=-transitive {_} {x} {x'} {y} x~x'.1) @ i
      | in~ x, ~-equiv y y' y~y' i => propExt (<=-transitive __ y~y'.1) (<=-transitive {_} {x} __ y~y'.2) @ i

    \lemma <=C-reflexive {x : PreorderC} : x <=C x \elim x
      | in~ x => <=-reflexive

    \lemma <=C-transitive {x y z : PreorderC} (x<=y : x <=C y) (y<=z : y <=C z) : x <=C z \elim x, y, z
      | in~ x, in~ y, in~ z => <=-transitive x<=y y<=z

    \lemma <=C-antisymmetric {x y : PreorderC} (x<=y : x <=C y) (y<=x : y <=C x) : x = y \elim x, y
      | in~ x, in~ y => path (~-equiv x y (x<=y, y<=x))
  }
}

\class Poset \extends Preorder, Cat
  | <=-antisymmetric {x y : E} : x <= y -> y <= x -> x = y
  | univalence (e : Iso) => (<=-antisymmetric e.f e.inv, Path.inProp _ _)
