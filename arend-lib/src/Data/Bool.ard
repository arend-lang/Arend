\import Logic
\import Paths

\data Bool | true | false

\data So (b : Bool) \with
  | true => so
  \where
    \func absurd {A : \Type} (s : So false) : A

\func not (b : Bool) : Bool
  | true => false
  | false => true

\func if {A : \Type} (b : Bool) (then else : A) : A \elim b
  | true => then
  | false => else

\func and (x y : Bool) : Bool \elim x
  | true => y
  | false => false

\func or (x y : Bool) : Bool \elim x
  | true => true
  | false => y

\lemma true/=false (p : true = false) : Empty => So.absurd (transport So p so)