\import Algebra.Ring.Boolean
\import Arith.Real
\import Function.Meta
\import Paths
\import Topology.NormedAbGroup

\class PseudoMeasureRing \extends BooleanRing, PseudoNormedAbGroup
  | norm-positive {x : E} : 0 RealAbGroup.<= norm x
  | norm-measure {x y : E} : norm x RealAbGroup.+ norm y = norm (x ∨ y) RealAbGroup.+ norm (x ∧ y)
  | norm-mono {x y : E} : x <= y -> norm x RealAbGroup.<= norm y
  | norm-mono p => transport2 (RealAbGroup.<=) RealAbGroup.zro-left (norm-measure *> pmap2 (norm __ RealAbGroup.+ __) (pmap2 (+) (+-assoc *> pmap (_ +) (pmap (`+ _) (*-comm *> p) *> double=0) *> zro-right) diff_meet *> zro-right) (pmap norm diff_meet *> norm_zro) *> RealAbGroup.zro-right) $ RealAbGroup.<=_+ norm-positive RealAbGroup.<=-refl
  | norm_negative => pmap norm neative=id
  | norm_+ => transport (RealAbGroup.`<= _) (norm-measure *> pmap2 (norm __ RealAbGroup.+ __) (inv +_diff) (pmap norm diff_* *> norm_zro) *> RealAbGroup.zro-right) $ RealAbGroup.<=_+ (norm-mono diff<=) (norm-mono diff<=)

\class PseudoMeasureAlgebra \extends PseudoMeasureRing, BooleanAlgebra

\class PseudoProbabilityAlgebra \extends PseudoMeasureAlgebra
  | norm-prob : norm 1 = (1 : Real)

\class MeasureRing \extends PseudoMeasureRing, NormedAbGroup

\class MeasureAlgebra \extends MeasureRing, PseudoMeasureAlgebra

\class ProbabilityAlgebra \extends PseudoProbabilityAlgebra, MeasureAlgebra

\class CompleteMeasureRing \extends MeasureRing, CompleteNormedAbGroup

\class CompleteMeasureAlgebra \extends CompleteMeasureRing, MeasureAlgebra

\class CompleteProbabilityAlgebra \extends CompleteMeasureAlgebra, ProbabilityAlgebra
