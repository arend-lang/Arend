\import Algebra.Ring.Boolean
\import Data.Bool
\import Function.Meta
\import Logic
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Relation.Equivalence
\import Set
\import Set.Filter
\import Set.Subset
\open Bounded (top, bottom, top-univ)
\open JoinSemilattice (join-monotone)

\class FullSpace \extends BaseSet
  | isFull : WeaklyProperFilter E

\record Complemented (A : FullSpace)
  | cSet : Set A
  | cCompl : Set A
  | cDisjoint : cSet ∧ cCompl <= bottom
  | cUnion : isFull (cSet ∨ cCompl)

\instance ComplementedEquivalence (X : FullSpace) : Equivalence (Complemented X)
  | ~ (A B : Complemented X) => isFull (A.cSet ∧ B.cSet ∨ A.cCompl ∧ B.cCompl)
  | ~-transitive f1 f2 => filter-mono (filter-meet f1 f2) \case \elim __ \with {
    | (inP (true,(Ax,_)), inP (true,(_,Cx))) => inP (true,(Ax,Cx))
    | (inP (true,(_,Bx)), inP (false,(B-x,_))) => bottom-empty $ cDisjoint (Bx,B-x)
    | (inP (false,(_,B-x)), inP (true,(Bx,_))) => bottom-empty $ cDisjoint (Bx,B-x)
    | (inP (false,(A-x,_)), inP (false,(_,C-x))) => inP (false,(A-x,C-x))
  }
  | ~-reflexive => filter-mono cUnion $ join-monotone (meet-univ <=-refl <=-refl) (meet-univ <=-refl <=-refl)
  | ~-symmetric f => filter-mono f $ join-monotone (meet-univ meet-right meet-left) (meet-univ meet-right meet-left)

\type ComplementedQuotient (X : FullSpace) => Quotient {Complemented X} (~)

\func inc~ {X : FullSpace} (A : Complemented X) : ComplementedQuotient X => in~ A

\lemma cequiv~ {X : FullSpace} {A B : Complemented X} (e : isFull (A.cSet ∧ B.cSet ∨ A.cCompl ∧ B.cCompl)) : inc~ A = inc~ B
  => path \lam i => ~-equiv A B e i

\lemma uncequiv~ {X : FullSpace} {A B : Complemented X} (p : inc~ A = inc~ B) : isFull (A.cSet ∧ B.cSet ∨ A.cCompl ∧ B.cCompl)
  => Quotient.equalityEquiv (ComplementedEquivalence X) (path \lam i => p i)

\instance ComplementedBoolean (X : FullSpace) : BooleanRing (ComplementedQuotient X)
  | zro => inc~ \new Complemented {
    | cSet => bottom
    | cCompl => top
    | cDisjoint => meet-left
    | cUnion => filter-mono filter-top join-right
  }
  | + (A B : ComplementedQuotient X) : ComplementedQuotient X \with {
    | in~ (A : Complemented), in~ (B : Complemented) => inc~ \new Complemented {
      | cSet => A.cSet ∧ B.cCompl ∨ A.cCompl ∧ B.cSet
      | cCompl => A.cSet ∧ B.cSet ∨ A.cCompl ∧ B.cCompl
      | cDisjoint => \case \elim __ \with {
        | (inP (true,x), inP (true,y)) => B.cDisjoint (y.2,x.2)
        | (inP (true,x), inP (false,y)) => A.cDisjoint (x.1,y.1)
        | (inP (false,x), inP (true,y)) => A.cDisjoint (y.1,x.1)
        | (inP (false,x), inP (false,y)) => B.cDisjoint (x.2,y.2)
      }
      | cUnion => filter-mono (filter-meet A.cUnion B.cUnion) \case \elim __ \with {
        | (inP (true,Ax), inP (true,Bx)) => inP (false, inP (true, (Ax,Bx)))
        | (inP (true,Ax), inP (false,B-x)) => inP (true, inP (true, (Ax,B-x)))
        | (inP (false,A-x), inP (true,Bx)) => inP (true, inP (false, (A-x,Bx)))
        | (inP (false,A-x), inP (false,B-x)) => inP (false, inP (false, (A-x,B-x)))
      }
    }
    | in~ A, ~-equiv B B' r => cequiv~ $ filter-mono (filter-meet cUnion r) $ later \case \elim __ \with {
      | (inP (true,Ax), inP (true,(Bx,B'x))) => inP (false, (inP (true,(Ax,Bx)), inP (true,(Ax,B'x))))
      | (inP (true,Ax), inP (false,(B-x,B'-x))) => inP (true, (inP (true, (Ax,B-x)), inP (true, (Ax,B'-x))))
      | (inP (false,A-x), inP (true,(Bx,B'x))) => inP (true, (inP (false, (A-x,Bx)), inP (false, (A-x,B'x))))
      | (inP (false,A-x), inP (false,(B-x,B'-x))) => inP (false, (inP (false,(A-x,B-x)), inP (false,(A-x,B'-x))))
    }
    | ~-equiv A A' r, in~ B => cequiv~ $ filter-mono (filter-meet r cUnion) $ later \case \elim __ \with {
      | (inP (true,(Ax,A'x)), inP (true,Bx)) => inP (false, (inP (true,(Ax,Bx)), inP (true,(A'x,Bx))))
      | (inP (true,(Ax,A'x)), inP (false,B-x)) => inP (true, (inP (true,(Ax,B-x)), inP (true,(A'x,B-x))))
      | (inP (false,(A-x,A'-x)), inP (true,Bx)) => inP (true, (inP (false,(A-x,Bx)), inP (false,(A'-x,Bx))))
      | (inP (false,(A-x,A'-x)), inP (false,B-x)) => inP (false, (inP (false,(A-x,B-x)), inP (false,(A'-x,B-x))))
    }
  }
  | zro-left {x} => \case \elim x \with {
    | in~ A => cequiv~ $ filter-mono cUnion $ join-monotone (meet-univ (meet-univ top-univ <=-refl <=∘ join-right) <=-refl) (meet-univ (meet-univ top-univ <=-refl <=∘ join-right) <=-refl)
  }
  | +-assoc {x} {y} {z} => \case \elim x, \elim y, \elim z \with {
    | in~ A, in~ B, in~ C => cequiv~ $ filter-mono (filter-meet cUnion $ filter-meet cUnion cUnion) $ later \case \elim __ \with {
      | (inP (true,Ax), (inP (true,Bx), inP (true,Cx))) => inP (true, (inP (false, (inP (true,(Ax,Bx)), Cx)), inP (true, (Ax, inP (true,(Bx,Cx))))))
      | (inP (true,Ax), (inP (true,Bx), inP (false,C-x))) => inP (false, (inP (false, (inP (true,(Ax,Bx)), C-x)), inP (true, (Ax, inP (true,(Bx,C-x))))))
      | (inP (true,Ax), (inP (false,B-x), inP (true,Cx))) => inP (false, (inP (true, (inP (true,(Ax,B-x)), Cx)), inP (true, (Ax, inP (false,(B-x,Cx))))))
      | (inP (true,Ax), (inP (false,B-x), inP (false,C-x))) => inP (true, (inP (true, (inP (true,(Ax,B-x)), C-x)), inP (true, (Ax, inP (false,(B-x,C-x))))))
      | (inP (false,A-x), (inP (true,Bx), inP (true,Cx))) => inP (false, (inP (true, (inP (false,(A-x,Bx)), Cx)), inP (false, (A-x, inP (true,(Bx,Cx))))))
      | (inP (false,A-x), (inP (true,Bx), inP (false,C-x))) => inP (true, (inP (true, (inP (false,(A-x,Bx)), C-x)), inP (false, (A-x, inP (true,(Bx,C-x))))))
      | (inP (false,A-x), (inP (false,B-x), inP (true,Cx))) => inP (true, (inP (false, (inP (false,(A-x,B-x)), Cx)), inP (false, (A-x, inP (false,(B-x,Cx))))))
      | (inP (false,A-x), (inP (false,B-x), inP (false,C-x))) => inP (false, (inP (false, (inP (false,(A-x,B-x)), C-x)), inP (false, (A-x, inP (false,(B-x,C-x))))))
    }
  }
  | +-comm {x} {y} => \case \elim x, \elim y \with {
    | in~ A, in~ B => cequiv~ $ filter-mono (filter-meet cUnion cUnion) $ later \case \elim __ \with {
      | (inP (true,Ax), inP (true,Bx)) => inP (false, (inP (true,(Ax,Bx)), inP (true,(Bx,Ax))))
      | (inP (true,Ax), inP (false,B-x)) => inP (true, (inP (true,(Ax,B-x)), inP (false,(B-x,Ax))))
      | (inP (false,A-x), inP (true,Bx)) => inP (true, (inP (false,(A-x,Bx)), inP (true,(Bx,A-x))))
      | (inP (false,A-x), inP (false,B-x)) => inP (false, (inP (false,(A-x,B-x)), inP (false,(B-x,A-x))))
    }
  }
  | * (A B : ComplementedQuotient X) : ComplementedQuotient X \with {
    | in~ (A : Complemented), in~ (B : Complemented) => inc~ \new Complemented {
      | cSet => A.cSet ∧ B.cSet
      | cCompl => A.cSet ∧ B.cCompl ∨ A.cCompl ∧ B.cSet ∨ A.cCompl ∧ B.cCompl
      | cDisjoint => \case \elim __ \with {
        | ((_,Bx), inP (true, inP (true, (_,B-x)))) => bottom-empty $ cDisjoint (Bx,B-x)
        | ((Ax,_), inP (true, inP (false, (A-x,_)))) => bottom-empty $ cDisjoint (Ax,A-x)
        | ((Ax,_), inP (false, (A-x,_))) => bottom-empty $ cDisjoint (Ax,A-x)
      }
      | cUnion => filter-mono (filter-meet A.cUnion B.cUnion) \case \elim __ \with {
        | (inP (true,Ax), inP (true,Bx)) => inP (true,(Ax,Bx))
        | (inP (true,Ax), inP (false,B-x)) => inP (false, inP (true, inP (true,(Ax,B-x))))
        | (inP (false,A-x), inP (true,Bx)) => inP (false, inP (true, inP (false,(A-x,Bx))))
        | (inP (false,A-x), inP (false,B-x)) => inP (false, inP (false,(A-x,B-x)))
      }
    }
    | in~ A, ~-equiv B B' r => cequiv~ $ filter-mono (filter-meet cUnion r) $ later \case \elim __ \with {
      | (inP (true,Ax), inP (true,(Bx,B'x))) => inP (true, ((Ax,Bx),(Ax,B'x)))
      | (inP (true,Ax), inP (false,(B-x,B'-x))) => inP (false, (inP (true, inP (true,(Ax,B-x))), inP (true, inP (true,(Ax,B'-x)))))
      | (inP (false,A-x), inP (true,(Bx,B'x))) => inP (false, (inP (true, inP (false,(A-x,Bx))), inP (true, inP (false,(A-x,B'x)))))
      | (inP (false,A-x), inP (false,(B-x,B'-x))) => inP (false, (inP (false,(A-x,B-x)), inP (false,(A-x,B'-x))))
    }
    | ~-equiv A A' r, in~ B => cequiv~ $ filter-mono (filter-meet r cUnion) $ later \case \elim __ \with {
      | (inP (true,(Ax,A'x)), inP (true,Bx)) => inP (true, ((Ax,Bx),(A'x,Bx)))
      | (inP (true,(Ax,A'x)), inP (false,B-x)) => inP (false, (inP (true, inP (true,(Ax,B-x))), inP (true, inP (true,(A'x,B-x)))))
      | (inP (false,(A-x,A'-x)), inP (true,Bx)) => inP (false, (inP (true, inP (false,(A-x,Bx))), inP (true, inP (false,(A'-x,Bx)))))
      | (inP (false,(A-x,A'-x)), inP (false,B-x)) => inP (false, (inP (false,(A-x,B-x)), inP (false,(A'-x,B-x))))
    }
  }
  | *-assoc {x} {y} {z} => \case \elim x, \elim y, \elim z \with {
    | in~ A, in~ B, in~ C => cequiv~ $ filter-mono (filter-meet cUnion $ filter-meet cUnion cUnion) $ later \case \elim __ \with {
      | (inP (true,Ax), (inP (true,Bx), inP (true,Cx))) => inP (true, (((Ax,Bx),Cx),(Ax,(Bx,Cx))))
      | (inP (true,Ax), (inP (true,Bx), inP (false,C-x))) => inP (false, (inP (true, inP (true, ((Ax,Bx),C-x))), inP (true, inP (true, (Ax, inP (true, inP (true,(Bx,C-x))))))))
      | (inP (true,Ax), (inP (false,B-x), inP (true,Cx))) => inP (false, (inP (true, inP (false, (inP (true, inP (true,(Ax,B-x))), Cx))), inP (true, inP (true, (Ax, inP (true, inP (false,(B-x,Cx))))))))
      | (inP (true,Ax), (inP (false,B-x), inP (false,C-x))) => inP (false, (inP (false, (inP (true, inP (true,(Ax,B-x))), C-x)), inP (true, inP (true, (Ax, inP (false,(B-x,C-x)))))))
      | (inP (false,A-x), (inP (true,Bx), inP (true,Cx))) => inP (false, (inP (true, inP (false, (inP (true, inP (false,(A-x,Bx))), Cx))), inP (true, inP (false,(A-x,(Bx,Cx))))))
      | (inP (false,A-x), (inP (true,Bx), inP (false,C-x))) => inP (false, (inP (false, (inP (true, inP (false,(A-x,Bx))), C-x)), inP (false, (A-x, inP (true, inP (true,(Bx,C-x)))))))
      | (inP (false,A-x), (inP (false,B-x), inP (true,Cx))) => inP (false, (inP (true, inP (false, (inP (false,(A-x,B-x)), Cx))), inP (false, (A-x, inP (true, inP (false,(B-x,Cx)))))))
      | (inP (false,A-x), (inP (false,B-x), inP (false,C-x))) => inP (false, (inP (false, (inP (false,(A-x,B-x)), C-x)), inP (false, (A-x, inP (false,(B-x,C-x))))))
    }
  }
  | *-comm {x} {y} => \case \elim x, \elim y \with {
    | in~ A, in~ B => cequiv~ $ filter-mono (filter-meet cUnion cUnion) $ later \case \elim __ \with {
      | (inP (true,Ax), inP (true,Bx)) => inP (true,((Ax,Bx),(Bx,Ax)))
      | (inP (true,Ax), inP (false,B-x)) => inP (false, (inP (true, inP (true,(Ax,B-x))), inP (true, inP (false,(B-x,Ax)))))
      | (inP (false,A-x), inP (true,Bx)) => inP (false, (inP (true, inP (false,(A-x,Bx))), inP (true, inP (true,(Bx,A-x)))))
      | (inP (false,A-x), inP (false,B-x)) => inP (false, (inP (false,(A-x,B-x)), inP (false,(B-x,A-x))))
    }
  }
  | ldistr {x} {y} {z} => \case \elim x, \elim y, \elim z \with {
    | in~ A, in~ B, in~ C => cequiv~ $ filter-mono (filter-meet cUnion $ filter-meet cUnion cUnion) $ later \case \elim __ \with {
      | (inP (true,Ax), (inP (true,Bx), inP (true,Cx))) => inP (false, (inP (true, inP (true, (Ax, inP (true,(Bx,Cx))))), inP (true,((Ax,Bx),(Ax,Cx)))))
      | (inP (true,Ax), (inP (true,Bx), inP (false,C-x))) => inP (true, ((Ax, inP (true,(Bx,C-x))), inP (true, ((Ax,Bx), inP (true, inP (true,(Ax,C-x)))))))
      | (inP (true,Ax), (inP (false,B-x), inP (true,Cx))) => inP (true, ((Ax, inP (false,(B-x,Cx))), inP (false, (inP (true, inP (true,(Ax,B-x))), (Ax,Cx)))))
      | (inP (true,Ax), (inP (false,B-x), inP (false,C-x))) => inP (false, (inP (true, inP (true, (Ax, inP (false,(B-x,C-x))))), inP (false, (inP (true, inP (true,(Ax,B-x))), inP (true, inP (true,(Ax,C-x)))))))
      | (inP (false,A-x), (inP (true,Bx), inP (true,Cx))) => inP (false, (inP (false, (A-x, inP (true,(Bx,Cx)))), inP (false, (inP (true, inP (false,(A-x,Bx))), inP (true, inP (false,(A-x,Cx)))))))
      | (inP (false,A-x), (inP (true,Bx), inP (false,C-x))) => inP (false, (inP (true, inP (false, (A-x, inP (true,(Bx,C-x))))), inP (false, (inP (true, inP (false,(A-x,Bx))), inP (false,(A-x,C-x))))))
      | (inP (false,A-x), (inP (false,B-x), inP (true,Cx))) => inP (false, (inP (true, inP (false, (A-x, inP (false,(B-x,Cx))))), inP (false, (inP (false,(A-x,B-x)), inP (true, inP (false,(A-x,Cx)))))))
      | (inP (false,A-x), (inP (false,B-x), inP (false,C-x))) => inP (false, (inP (false, (A-x, inP (false,(B-x,C-x)))), inP (false, (inP (false,(A-x,B-x)), inP (false,(A-x,C-x))))))
    }
  }
  | negative x => x
  | negative-left {x} => \case \elim x \with {
    | in~ A => cequiv~ $ filter-mono cUnion $ meet-univ (join-monotone (meet-univ <=-refl <=-refl) (meet-univ <=-refl <=-refl)) top-univ <=∘ join-right
  }
  | isBooleanRing {x} => \case \elim x \with {
    | in~ A => cequiv~ $ filter-mono cUnion $ join-monotone (meet-univ (meet-univ <=-refl <=-refl) <=-refl) (meet-univ (meet-univ <=-refl <=-refl <=∘ join-right) <=-refl)
  }
  | ide => in~ \new Complemented {
    | cSet => top
    | cCompl => bottom
    | cDisjoint => meet-right
    | cUnion => filter-mono filter-top join-left
  }
  | ide-left {x} => \case \elim x \with {
    | in~ A => cequiv~ $ filter-mono cUnion $ join-monotone (meet-univ (meet-univ top-univ <=-refl) <=-refl) (meet-univ (meet-univ top-univ <=-refl <=∘ join-left <=∘ join-left) <=-refl)
  }

\class MeasurableSpace \extends FullSpace
  | isMeasurable : Complemented \this -> \Prop
  | measurable-closed {A B : Complemented \this} : isMeasurable A -> A ~ B -> isMeasurable B