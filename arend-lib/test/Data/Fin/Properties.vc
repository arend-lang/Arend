\open Paths
\open Combinators

\static \function
reveal {n : Nat} (x : Fin n) : \Sigma (m : Nat) (n = suc m) <= \elim n
    | suc n => (n, idp)
    | zero <= \elim x

\static \function
cast {n : Nat} (x : Fin n) : \Sigma (m : Nat) (Fin (suc m)) <= \elim n
    | suc n => (n, x)
    | zero <= \elim x

\static \function
from-to-id (n : Nat) : to-nat (from-nat n) = n <= \elim n
    | suc n => pmap suc $ from-to-id n
    | zero => idp

--\static \function
--to-from-id {n : Nat} (x : Fin n) (e : Empty) : from-nat (to-nat x) = x <= absurd e
