\import Combinators
\import Data.Empty

\data Fin (n : Nat) \with
    | suc n => fzero
    | suc n => fsuc (Fin n)

\func to-nat {n : Nat} (x : Fin n) : Nat \elim n, x
    | suc _, fzero => zero
    | suc _, fsuc x => suc $ to-nat x

\func from-nat (n : Nat) : Fin (suc n) \elim n
    | suc n' => fsuc $ from-nat n' -- from-nat не работаэ
    | zero => fzero

\import Data.Nat.Base
\import Data.Nat.Properties
\import Paths
\import Sets

\func flift {n : Nat} (m : Nat) (fn : Fin n) : Fin (n + m) \elim n, fn
    | suc n', fzero => fzero
    | suc n', fsuc fn' => fsuc (flift m fn')

\func fadd {n : Nat} (m : Nat) (fn : Fin n) : Fin (m + n) \elim m
    | zero => fn
    | suc m' => fsuc (fadd m' fn)

\func Fin0-isEmpty (x : Fin 0) : Empty

\func Fin-inj-<= {n m : Nat} (f : Fin n >-> Fin m) : n <= m \elim n, m
  | 0, m => le2-then-le1 le_z
  | suc n, 0 => absurd (Fin0-isEmpty (f.1 fzero))
  | suc n, suc m => le_suc (Fin-inj-<= (pred f))
  \where {
    \func pred {n m : Nat} (f : Fin (suc n) >-> Fin (suc m)) : Fin n >-> Fin m => {?}

    \func predAfter {n : Nat} (x : Fin (suc n)) (i : Fin (suc n)) : Fin n
      | {0},
  }

\func Fin-isInj {n m : Nat} (p : Fin n = Fin m) : n = m => <=-isAntiSym (Fin-inj-<= (=-to-inj p)) (Fin-inj-<= (=-to-inj (inv p)))
{- \elim n, m
  | 0, 0 => idp
  | 0, suc m => absurd (Fin0-isEmpty (coe (\lam i => inv p @ i) fzero right))
  | suc n, 0 => absurd (Fin0-isEmpty (coe (\lam i => p @ i) fzero right))
  | suc n, suc m => pmap suc (Fin-isInj (pred p))
  \where
    \func pred {n m : Nat} (p : Fin (suc n) = Fin (suc m)) : Fin n = Fin m => {?}
-}
