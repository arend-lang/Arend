\open Data.Nat.Base

\open Combinators
\open Data.Bool
\open Data.Either
\open Data.Empty
\open Data.Unit
\open Paths
\open Relation

\static \function
is_zero_b (x : Nat) : Bool <= \elim x
    | zero => true
    | _ => false

\static \function
is_zero : Nat -> \Prop => True `o` is_zero_b

\static \function
is_suc : Nat -> \Prop => True `o` not `o` is_zero_b

\static \function
suc_nle_zero {n : Nat} (p : suc n =< zero) : Empty <= \elim p

\static \function
le_unsuc {n m : Nat} (sn-le-sm : (suc n) =< (suc m)) : n =< m <= \elim sn-le-sm
  | le_ss p => p

\static \function
zero-ne-suc {n : Nat} (p : 0 = suc n) : Empty => transport is_zero p unit

\static \function
n-lt-n-false (n : Nat) (p : n < n) : Empty <= \elim n, p
  | suc n', le_ss p' => n-lt-n-false n' p'

\static \function
lt-ngt {n m : Nat} (p : n < m) : (~~) (n > m) <= \elim n, m, p
  | zero, n', m' => \lam q => suc_nle_zero q
  | suc n', suc m', le_ss p' => \lam q => lt-ngt p' (le_unsuc q)

\static \function
le-trans {n m k : Nat} (nm : n =< m) (mk : m =< k) : n =< k <= \elim n, m, k
  | zero, m', _ => le_z
  | suc n', zero, _ => absurd (suc_nle_zero nm)
  | suc n', suc m', zero => absurd (suc_nle_zero mk)
  | suc n', suc m', suc k' => le_ss (le-trans (le_unsuc nm) (le_unsuc mk))

\static \function
lt-then-le {n m : Nat} (nm : n < m) : n =< m <= \elim n, m
  | zero, _ => le_z
  | suc n', zero => absurd (suc_nle_zero nm)
  | suc n', suc m' => le_ss (lt-then-le $ le_unsuc nm)

\static \function
lt-trans {n m k : Nat} (nm : n < m) (mk : m < k) : n < k => le-trans nm (lt-then-le mk)

\static \function
sdec {x y : Nat} (d : Dec (x = y)) : Dec (suc x = suc y) <= \elim d
    | inl f => inl (\lam p => f $ pmap pred p)
    | inr p => inr $ pmap suc p

\static \function
plus-assoc (x y z : Nat) : (x + y) + z = x + (y + z) <= \elim x
    | zero => path (\lam _ => y + z)
    | suc x' => path (\lam i => suc (plus-assoc x' y z @ i))

\static \function
plus-comm0 (y : Nat) : y = y + zero <= \elim y
    | zero => idp
    | suc y' => pmap suc (plus-comm0 y')

\static \function
plus-comm (x y : Nat) : x + y = y + x <= \elim x, y
    | zero, _ => plus-comm0 y
    | suc x', zero => inv (plus-comm0 (suc x'))
    | suc x', suc y' => pmap suc (plus-comm x' (suc y') *> pmap suc (inv (plus-comm x' y')) *> plus-comm (suc x') y')

\static \function
mul-distr (x y z : Nat) : (x + y) * z = x * z + y * z <= \elim x
    | zero => idp
    | suc x' => pmap (\lam t => z + t) (mul-distr x' y z) *> inv (plus-assoc z (x' * z) (y * z))

\static \function
mul-assoc (x y z : Nat) : (x * y) * z = x * (y * z) => \elim x
    | zero => idp
    | suc x' => mul-distr y (x' * y) z *> pmap (\lam t => y * z + t) (mul-assoc x' y z)

\static \function
mul-comm0 (y : Nat) : zero = y * zero <= \elim y
    | zero => idp
    | suc y' => mul-comm0 y'

\static \function
mul-comm (x y : Nat) : x * y = y * x <= \elim x, y
    | zero, _ => mul-comm0 y
    | suc x', zero => inv (mul-comm0 x')
    | suc x', suc y' => pmap suc (
            y' + (x' * suc y')      ==< pmap (\lam t => y' + t) (mul-comm x' (suc y'))      >==
            y' + (x' + y' * x')     ==< inv (plus-assoc y' x' (y' * x'))                    >==
            y' + x' + y' * x'       ==< pmap (\lam t => t + y' * x') (plus-comm y' x')      >==
            x' + y' + y' * x'       ==< pmap (\lam t => x' + y' + t) (inv (mul-comm x' y')) >==
            x' + y' + x' * y'       ==< plus-assoc x' y' (x' * y')                          >==
            x' + (y' + x' * y')     ==< pmap (\lam t => x' + t) (mul-comm (suc x') y')      >==
            x' + y' * suc x'        !qed)

\static \class TODO {
  \abstract pred-assoc (x y : Nat) : pred (x - y) = (pred x) - y
}