\open Data.Unit
\open Data.Empty
\open Data.Either
\open Hlevel
\open Equiv
\open Paths

\function
True : \Prop <= Unit

\function
False : \Prop <= Empty

\function
(~~~) (P : \Prop) => P -> Empty

\function
(&&&) (P Q : \Prop) : \Prop <= \Sigma P Q

\function
(|||) (P Q : \Prop) : \Prop <= EitherProp P Q

-- \function
-- (!) (A : \Type0) : \Prop <= TrP A

\function 
DecP (P : \Prop) <= (~~~) P ||| P

\function
DNLawP (P : \Prop) => (~~~) ((~~~) P) -> P

\function
inP-inv (P : \Prop) (p : TrP P) : P <= \elim p | inP p => p

\function
inP-isequiv (P : \Prop) : (isequiv (inP {P})) 
  => qinv-to-equiv (inP {P}) (inP-inv P, \lam (p:P) => idp, \lam (p:TrP P) => path (truncP (inP (inP-inv P p)) p))

\function
truncP-isProp (A : \Type0) : (isProp (TrP A)) => \lam a a' => path (truncP a a')

\function
prop-isProp (P : \Prop) : (isProp P) => ofHlevel1-isProp P (hlevel-equiv-closed (equiv-symm (inP {P}, inP-isequiv P)) (suc zero) (isProp-ofHlevel1 (TrP P) (truncP-isProp P)))

-- \function
-- isProp (A : \Type0) : \Prop <= \Pi 


