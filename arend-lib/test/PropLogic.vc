\open ::Data::Unit
\open ::Data::Empty
\open ::Data::Either
\open ::Hlevel
\open ::Equiv
\open ::Paths
\open ::Combinators

\function
TrueP : \Prop => Unit

\function
trueP : Unit => unit

\function
False : \Prop => Empty

\function
~~~ (P : \Prop) => P -> False

\function
&&& (P Q : \Prop) : \Prop => \Sigma P Q

\function
||| (P Q : \Prop) : \Prop => TrP (Either P Q)

\function
<--> (P Q : \Prop) : \Prop => (P -> Q) &&& (Q -> P)

\function
exists {A : \Set0} (P : A -> \Prop) : \Prop => TrP (\Sigma (x : A) (P x))

\function
isInh (A : \Set0) : \Prop => TrP A

-- \function
-- (!) (A : \Type0) : \Prop => TrP A

\function 
DecP (P : \Prop) => `~~~ P ||| P

\function
DNLawP (P : \Prop) => `~~~ (`~~~ P) -> P

\function
inP-inv (P : \Prop) (p : TrP P) : P => \elim p | inP p => p

\function
inP-isequiv (P : \Prop) : isequiv (TrP P).inP
  => qinv-to-equiv (TrP P).inP (inP-inv P, \lam (p : P) => idp, \lam (p : TrP P) => path ((TrP P).truncP ((TrP P).inP (inP-inv P p)) p))

\function
TrP-isProp (A : \Type0) : (isProp (TrP A)) => \lam a a' => path (truncP a a')

\function
prop-isProp (P : \Prop) : (isProp P) => ofHlevel1-isProp P (hlevel-equiv-closed (equiv-symm ((TrP P).inP, inP-isequiv P)) (suc zero) (isProp-ofHlevel1 (TrP P) (TrP-isProp P)))

\function
prop-ext {P Q : \Prop} (eqv : P <--> Q) : (P = Q) => path (iso eqv.1 eqv.2 (\lam x => prop-isProp P (eqv.2 (eqv.1 x)) x) (\lam x => prop-isProp Q (eqv.1 (eqv.2 x)) x))

\function
prop-eq-to-equiv {P Q : \Prop} (p : P = Q) : (P <--> Q) => transport (\lam (X : \Prop) => P <--> X) p (id, id)

--(\lam p => prop-isProp P (g (f p)) p) (\lam q => prop-isProp Q (f (g q)) q))

\function
provable-is-true {P : \Prop} (p : P) : (P = TrueP) => prop-ext (\lam x => trueP, \lam y => p)

\function
prop-eq {A B : \Type} (pa : isProp A) (pb : isProp B) (f : A -> B) (g : B -> A) : A = B 
    => equiv-to-path (f, ((g, \lam _ => pa _ _), (g, \lam _ => pb _ _)))

\function
isProp-fun-isContr (A : \Type) : (A -> isContr A) = isProp A => 
    \let A1 : isProp (A -> isContr A) => \lam y y' => funExt (\lam x0 => isContr A) y y' (\lam z => ofHlevel-isProp 0 A (y z) (y' z))
    \in prop-eq A1 (isProp-isProp A) (isProp-isContr A) (\lam f a => (a, f a))

\function
ofHlevel1-eq-isProp (A : \Type) : ofHlevel 1 A = isProp A 
    => prop-eq (ofHlevel-isProp 1 A) (isProp-isProp A) (ofHlevel1-isProp A) (isProp-ofHlevel1 A)

\function
ofHlevel2-eq-isSet (A : \Type0) : ofHlevel 2 A = isSet A 
    => prop-eq (ofHlevel-isProp 2 A) (isSet-isProp A) (ofHlevel2-isSet A) (isSet-ofHlevel2 A)
