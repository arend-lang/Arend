\data List (A : \Type0)
    | nil
    | \infixr 5 (::) A (List A)

\function
singleton {A : \Type0} (a : A) => a :: nil

\function \infixr 5
(++) {A : \Type0} (xs ys : List A) : List A <= \elim xs
    | nil => ys
    | (::) x xs => x :: xs ++ ys

\open Bool

\function
null {A : \Type0} (xs : List A) : Bool <= \elim xs
    | nil => true
    | _ => false

\function
map {A B : \Type0} (f : A -> B) (xs : List A) : List B <= \elim xs
    | nil => nil
    | (::) x xs => f x :: map f xs

\function
replicate {A : \Type0} (n : Nat) (a : A) : List A <= \elim n
    | zero => nil
    | suc n => a :: replicate n a

\function
zipWith {A B C : \Type0} (f : A -> B -> C) (xs : List A) (ys : List B) : List C <= \elim xs
    | nil => nil
    | (::) x xs <= \elim ys
        | nil => nil
        | (::) y ys => f x y :: zipWith f xs ys

\function
zip {A B : \Type0} => zipWith (\lam (x : A) (y : B) => (x, y))

\function
intersperse {A : \Type0} (x : A) (xs : List A) : List A <= \elim xs
    | nil => nil
    | (::) y ys <= \elim ys
        | nil => singleton y
        | _ => y :: x :: intersperse x ys

\function
foldr {A B : \Type0} (f : A -> B -> B) (b : B) (xs : List A) : B <= \elim xs
    | nil => b
    | (::) x xs => f x (foldr f b xs)

\function
foldl {A B : \Type0} (f : A -> B -> A) (xs : List B) (a : A) : A <= \elim xs
    | nil => a
    | (::) x xs => foldl f xs (f a x)

\function
concat {A : \Type0} : List (List A) -> List A => foldr (++) nil

\function
concatMap {A B : \Type0} (f : A -> List B) (xs : List A) => concat (map f xs)

\function sum => foldr Arith.(+) 0

\function product => foldr Arith.(*) 1

\function
length {A : \Type0} => foldr (\lam (_ : A) => suc) 0

\function
reverse {A : \Type0} (xs : List A) : List A => foldl (\lam xs x => x :: xs) xs nil

\function
take {A : \Type0} (n : Nat) (xs : List A) : List A <= \elim n
    | zero => nil
    | suc n <= \elim xs
        | nil => nil
        | (::) x xs => x :: take n xs

\function
drop {A : \Type0} (n : Nat) (xs : List A) : List A <= \elim n
    | zero => xs
    | suc n <= \elim xs
        | nil => nil
        | (::) x xs => drop n xs

{-
\function
splitAt {A : \Type0} (n : Nat) (xs : List A) : \Sigma (List A) (List A) <= \elim n
    | zero => (nil, xs)
    | suc n <= \elim xs
        | nil => (nil, nil)
        | (::) x xs => \let p => splitAt n xs
                       \in (x :: p.1, p.2)

\function
takeWhile {A : \Type0} (p : A -> Bool) (xs : List A) : List A <= \elim xs
    | nil => nil
    | (::) x xs => \case p x
        | true => x :: takeWhile p xs
        | false => nil

\function
dropWhile {A : \Type0} (p : A -> Bool) (xs : List A) : List A <= \elim xs
    | nil => nil
    | (::) x xs => \case p x
        | true => dropWhile p xs
        | false => x :: xs

\function
span {A : \Type0} (p : A -> Bool) (xs : List A) : \Sigma (List A) (List A) <= \elim xs
    | nil => (nil, nil)
    | (::) x xs => \case p x
        | true => \let s => span p xs
                  \in (x :: s.1, s.2)
        | false => (nil, x :: xs)

\function
break {A : \Type0} (p : A -> Bool) => span (\lam (a : A) => not (p a))
-}

\function
inits {A : \Type0} (xs : List A) : List (List A) <= \elim xs
    | nil => nil :: nil
    | (::) x xs => nil :: map ((::) x) (inits xs)

\function
tails {A : \Type0} (xs : List A) : List (List A) <= \elim xs
    | nil => nil :: nil
    | (::) x xs => (x :: xs) :: tails xs
