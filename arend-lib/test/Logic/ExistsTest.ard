\import Data.Array
\import Logic
\import Logic.Meta
\import Meta

\lemma test1 : ∃ = (\Sigma) => idp

\lemma test2 : ∃ Nat = TruncP Nat => idp

\lemma test3 : ∃ (x : Nat) (x = 0) = TruncP (\Sigma (x : Nat) (x = 0)) => idp

\lemma test4 : ∃ {x} (x = 0) = TruncP (\Sigma (x : Nat) (x = 0)) => idp

\lemma test5 : ∃ {x y} (x = 0) = TruncP (\Sigma (x y : Nat) (x = 0)) => idp

\lemma test6 : ∃ (x y : Nat) (x = 0) (y = 0) = TruncP (\Sigma (x y : Nat) (x = 0) (y = 0)) => idp

\lemma test7 (P : Nat -> \Type) : ∃ P = TruncP (\Sigma (x : Nat) (P x)) => idp

-- \lemma test8 (P : Nat -> Nat -> \Type) : ∃ P = TruncP (\Sigma (x y : Nat) (P x y)) => idp

\lemma test9 (P : Nat -> \Type) : ∃ (x : P) (x = x) = TruncP (\Sigma (x : Nat) (P x) (x = x)) => idp

\lemma test10 (P : Nat -> \Type) : ∃ (x y : P) (x = y) (y = x) = TruncP (\Sigma (x y : Nat) (P x) (P y) (x = y) (y = x)) => idp

-- \lemma test11 (P : Nat -> Bool -> \Type) : ∃ ((x,y) (z,w) : P) (x = z) (y = w) = TruncP (\Sigma (x z : Nat) (y w : Bool) (P x y) (P z w) (x = z) (y = w)) => idp

\lemma test12 (l : Array Nat) : ∃ l = TruncP (Fin l.len) => idp

\lemma test13 {A : \Type} (y : A) (l : Array A) : ∃ (x : l) (x = y) = TruncP (\Sigma (j : Fin l.len) (l j = y)) => idp

\lemma test14 {A : \Type} (l : Array A) : ∃ (x y : l) (x = y) = TruncP (\Sigma (j j' : Fin l.len) (l j = l j')) => idp

-- \lemma test15 {A : \Type} (l : Array A) : ∃ ((j,x) : withIndex l) (x = l j) = TruncP (\Sigma (j : Fin l.len) (l j = l j)) => idp
