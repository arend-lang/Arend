\import Algebra.Meta
\import Logic
\import Meta

\module Common \where {
  \data Empty'
}

\open Common

\lemma coerce (e : Empty) : Empty'
  => contradiction

\lemma identity (e : Empty') : Empty'
  => contradiction

\lemma withoutExpectedType (e : Empty')
  => contradiction

\lemma combineArgs (P Q : \Prop) (e : Not P) (p : P) : Q
  => contradiction

\lemma explicitProof (P : \Prop) (e : Empty) : P
  => contradiction {e}

\lemma explicitProof2 (P : \Prop) (e : P -> Not P) (p : P) : Empty
  => contradiction {e}

\lemma severalArgs (P Q : \Prop) (q : Q) (e : P -> Q -> Empty') (p : P) : \Pi (Z : \Prop) -> Z
  => contradiction

\lemma dependentArgs (P : Nat -> \Prop) (z : Nat) (e : \Pi (x : Nat) -> P x -> Empty) (p : P z) : Empty
  => contradiction

\lemma dependentArgs2 (P : Nat -> \Prop) (e : \Pi {x : Nat} -> P x -> Empty) (p : P 3) : Empty
  => contradiction

\lemma dependentArgs3 (P : Nat -> \Prop) (Q : \Pi {x : Nat} -> P x -> \Prop) (e : \Pi (x : Nat) (p : P x) -> Q p -> Empty) (p : P 3) (q : Q p) : Empty
  => contradiction

\lemma usingTest (P Q : \Prop) (q : Q) (e : P -> Empty) (p : P) : Empty
  => contradiction {usingOnly (e,p)}

\lemma usingFail (P Q : \Prop) (q : Q) (e : P -> Empty) (p : P)
  => fails {Empty} contradiction {usingOnly (e,q)}
