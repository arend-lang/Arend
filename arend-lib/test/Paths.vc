\static \function
idp {A : \Type0} {a : A} => path (\lam _ => a)

\static \function
idpe {A : \Type0} (a : A) => path (\lam _ => a)

\static \function
pmap {A B : \Type0} (f : A -> B) {a a' : A} (p : a = a')
    => path (\lam i => f (p @ i))

\static \function
pmap2 {A B C : \Type0} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b')
    => path (\lam i => f (p @ i) (q @ i))

\static \function
transport {A : \Type0} (B : A -> \Type0) {a a' : A} (p : a = a') (b : B a)
    => coe (\lam i => B (p @ i)) b right

\static \function
transport2 {A B : \Type0} (C : A -> B -> \Type0) {a a' : A} {b b' : B} (p : a = a') (q : b = b') (c : C a b) : C a' b'
    => transport (\lam b => C a' b) q (transport (\lam a => C a b) p c)

\static \function
inv {A : \Type0} {a a' : A} (p : a = a')
    <= transport (\lam a'' => a'' = a) p idp

\static \function
concat {A : I -> \Type0} {a : A left} {a' a'' : A right} (p : Path A a a') (q : a' = a'')
    <= transport (Path A a) q p

\static \function \infixr 9
(*>) {A : \Type0} {a a' a'' : A} (p : a = a') (q : a' = a'')
    <= concat p q

\static \function \infixr 9
(<*) {A : \Type0} {a a' a'' : A} (p : a = a') (q : a' = a'')
    <= transport (\lam x => x = a'') (inv p) q

\static \function
squeeze1 (i j : I)
    <= coe (\lam x => left = x) (path (\lam _ => left)) j @ i

\static \function
squeeze (i j : I)
    <= coe (\lam i => Path (\lam j => left = squeeze1 i j) (path (\lam _ => left)) (path (\lam j => squeeze1 i j))) (path (\lam _ => path (\lam _ => left))) right @ i @ j

\static \function
psqueeze {A : \Type0} {a a' : A} (p : a = a') (i : I) : a = p @ i
    => path (\lam j => p @ squeeze i j)

\static \function
Jl {A : \Type0} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type0) (b : B a idp) {a' : A} (p : a = a') : B a' p
    <= coe (\lam i => B (p @ i) (psqueeze p i)) b right

\static \function
inv-inv {A : \Type0} {a a' : A} (p : a = a') : inv (inv p) = p
    <= Jl (\lam _ p => inv (inv p) = p) idp p

\static \function
inv-concat {A : \Type0} {a a' : A} (p : a = a') : inv p *> p = idp
    <= Jl (\lam _ q => inv q *> q = idp) idp p

\static \function
concat-inv {A : \Type0} {a a' : A} (p : a = a') : p *> inv p = idp
    <= Jl (\lam _ q => q *> inv q = idp) idp p

\static \function
concat-idp {A : \Type0} {a a' : A} (p : a = a') : idp *> p = p
    <= Jl (\lam _ p => idp *> p = p) idp p

\static \function
concat-assoc {A : \Type0} {a1 a2 a3 a4 : A} (p : a1 = a2) (q : a2 = a3) (r : a3 = a4) : (p *> q) *> r = p *> (q *> r)
    <= Jl (\lam _ r => (p *> q) *> r = p *> (q *> r)) idp r

\static \data QED | qed

\static \function \infix 2
(!) {A : \Type0} (a : A) (_ : QED) : a = a => idp

\static \function \infixr 1
(>==) {A : \Type0} {a a' a'' : A} (p : a = a') (q : a' = a'') <= concat p q

\static \function \infix 2
(==<) {A : \Type0} (a : A) {a' : A} (p : a = a') => p

\static \function
idpOver (A : I -> \Type0) (a : A left) => path (coe A a)

\static \function
pathOver {A : I -> \Type0} {a : A left} {a' : A right} (p : coe A a right = a') <= concat (idpOver A a) p

\static \function
coePath {A : \Type0} {a1 a2 a3 a4 : A} (p : a2 = a1) (q : a2 = a3) (r : a3 = a4)
    : coe (\lam i => p @ i = r @ i) q right = inv p *> q *> r
    <= coe (\lam j => coe (\lam i => p @ i = r @ i) q j = inv (psqueeze p j) *> q *> psqueeze r j)
           (inv (concat-idp q)) right

\static \function
rotate {A : \Type0} {a a' a'' : A} (p : a' = a) {q : a' = a''} (r : a = a'') (t : q = p *> r) : inv p *> q = r =>
    inv p *> q          ==< pmap (\lam s => inv p *> s) t >==
    inv p *> (p *> r)   ==< inv (concat-assoc (inv p) p r) >==
    (inv p *> p) *> r   ==< pmap (\lam s => s *> r) (inv-concat p) >==
    idp *> r            ==< concat-idp r >==
    r                   !qed

\static \function
homotopy-isNatural {A B : \Type0} (f g : A -> B) (h : \Pi (a : A) -> f a = g a) {a a' : A} (p : a = a') : pmap f p *> h a' = h a *> pmap g p
    <= Jl (\lam x q => pmap f q *> h x = h a *> pmap g q) (concat-idp (h a)) p

\static \function
homotopy-comm-lemma {A : \Type0} (f : A -> A) (h : \Pi (a : A) -> f a = a) (a : A) : h (f a) = pmap f (h a) =>
    h (f a)                             ==< pmap (\lam s => h (f a) *> s) (inv (concat-inv (h a))) >==
    h (f a) *> (h a *> inv (h a))       ==< inv (concat-assoc (h (f a)) (h a) (inv (h a))) >==
    (h (f a) *> h a) *> inv (h a)       ==< pmap (\lam s => s *> inv (h a)) (inv (homotopy-isNatural f (\lam a => a) h (h a))) >==
    (pmap f (h a) *> h a) *> inv (h a)  ==< concat-assoc (pmap f (h a)) (h a) (inv (h a)) >==
    pmap f (h a) *> (h a *> inv (h a))  ==< pmap (\lam s => pmap f (h a) *> s) (concat-inv (h a)) >==
    pmap f (h a)                        !qed

\static \function
pmapd {A : \Type0} (B : A -> \Type0) (f : \Pi (x : A) -> B x) {a a' : A} (p : a = a') : (transport B p (f a) = f a')
    => Jl (\lam x (q : a = x) => transport B q (f a) = f x) idp p 

\static \function
funEqToHom {A : \Type0} (B : A -> \Type0) {f g : \Pi (x : A) -> B x} (p : f = g) (x : A) : (f x = g x) => 
    (Jl (\lam g' p' => \Pi (x : A) -> f x = g' x) (\lam _ => idp) p) x

\static \function
transp-func {A : \Type0} (B : A -> \Type0) {a a' a'': A} (p : a = a') (q : a' = a'') (x : B a) : (transport B (p *> q) x = transport B q (transport B p x)) => 
    (Jl (\lam y (r : a = y) => \Pi (q' : y = a'') -> (transport B (r *> q') x = transport B q' (transport B r x))) 
       (\lam q' => (transport B (idp *> q') x ==< pmap (\lam r => transport B r x) (concat-idp q') >== 
       	     	   transport B q' x !qed)) p) q

\static \function
transp-funcfibers {A : \Type0} (B : A -> \Type0) (C : A -> \Type0) {a a' : A} (p : a = a') (f : (B a) -> (C a)) (x : B a') : ((transport (\lam y => (B y) -> (C y)) p f) x = transport C p (f (transport B (inv p) x))) => 
    (Jl (\lam z q => \Pi (x' : B z) -> (transport (\lam y => (B y) -> (C y)) q f) x' = transport C q (f (transport B (inv q) x')))
       (\lam (x' : B a) => idp) p) x

-- pmap (\lam q => transport C p (f (transport B q x))) (inv-concat p)

\static \function
transp-funcfib-paths {A : \Type0} (B : A -> \Type0) (C : A -> \Type0) {a a' : A} (p : a = a') (f : (B a) -> (C a)) (g : (B a') -> (C a')) (fg_p : transport (\lam y => (B y) -> (C y)) p f = g) (x : B a) :
		     (transport C p (f x) = g (transport B p x)) => 
    transport C p (f x) ==< idp >== transport C p (f (transport B idp x)) ==< pmap (\lam q => transport C p (f (transport B q x))) (inv (concat-inv p)) >==
    transport C p (f (transport B (p *> (inv p)) x)) ==< pmap (\lam y => transport C p (f y)) (transp-func B p (inv p) x) >==
    transport C p (f (transport B (inv p) (transport B p x))) ==< inv (transp-funcfibers B C p f (transport B p x)) >==
    (transport (\lam y => (B y) -> (C y)) p f) (transport B p x) ==< funEqToHom (\lam (_ : B a') => C a') fg_p (transport B p x) >== 
    g (transport B p x) !qed
    

\static \function
transp-pathfibers {A : \Type0} (a0 : A) {a b : A} (p : a = b) (q : a0 = a) : (transport ((=) a0) p q = q *> p) => 
	Jl (\lam x (p' : a = x) => (transport ((=) a0) p' q = q *> p')) idp p

\static \function
transp-invpath-linv {A : \Type0} (B : A -> \Type0) {a b : A} (p : a = b) (x : B a) : (transport B (inv p) (transport B p x) = x) =>
	Jl (\lam z (p' : a = z) => transport B (inv p') (transport B p' x) = x) idp p


\static \function
funExt {A : \Type0} (B : A -> \Type0) (f g : \Pi (x : A) -> (B x)) (h : \Pi (x : A) -> (f x = g x)) : (f = g) => path (\lam i a => h a @ i)


{-
\static \function
funExt {A : \Type0} (B : A -> \Type0) {f g : \Pi (x : A) -> (B x)} (h : \Pi (x : A) -> (f x = g x)) : (f = g) => funExt B f g h
-}

	   