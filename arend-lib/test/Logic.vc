\open ::Paths
\open ::Data::Unit
\open ::Data::Empty
\open ::Data::Either

\function
(&&) {lp : Lvl} {lh : CNat} (A B : \Type (lp,lh)) => \Sigma A B

\function
(||) {lp : Lvl} {lh : CNat} (A B : \Type (lp,lh)) => Either A B

\function
(!=) {lp : Lvl} {lh : CNat} {A : \Type (lp,lh)} (a b : A) <= (~) (a = b)

\function
(<->) {lp : Lvl} {lh : CNat} (A B : \Type (lp,lh)) => (A -> B) && (B -> A)

\function
contraposition {lp : Lvl} {lh : CNat} {A B : \Type (lp,lh)} (f : A -> B) (nb : (~) B) : (~) A =>
    \lam a => nb (f a)

\function
contraposition2 {lp : Lvl} {lh : CNat} {A B : \Type (lp,lh)} (f : A -> (~) B) (b : B) : (~) A =>
    \lam a => f a b

\function
Dec {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) <= A || (~) A

\function
double-neg {lp : Lvl} {lh : CNat} {A : \Type (lp,lh)} (a : A) : (~) ((~) A) =>
    \lam f => f a

\function
cancel-triple-neg {lp : Lvl} {lh : CNat} {A : \Type (lp,lh)} (nnna : (~) ((~) ((~) A))) : (~) A =>
    \lam a => nnna (double-neg a)

\function
DNLaw {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) <= (~) ((~) A) -> A

\function
dec-impl-DNLaw {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) (p : Dec A) : (DNLaw A) => \case p | inl a => \lam _ => a | inr f => \lam g => absurd (g f)
