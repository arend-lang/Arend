\open ::Paths

\function
isContr {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\function
I-isContr : isContr I => (left, \lam i => path (\lam j => squeeze i j))

\function
isProp {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) => \Pi (a a' : A) -> a = a'

\function
isSet {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) => \Pi (a a' : A) -> isProp (a = a')

\function
ofHlevel {lp : Lvl} {lh : CNat} (n : Nat) (A : \Type (lp,lh)) : \Type (lp,lh) <= \elim n
    | zero => isContr A
    | suc n => \Pi (a a' : A) -> ofHlevel n (a = a')

\function
ofHlevel1-isProp {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) (f : ofHlevel (suc zero) A) : isProp A => \lam a a' => (f a a').1

\function
isContr-isProp {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) (c : isContr A) : isProp A => \lam a a' => inv (c.2 a) *> c.2 a'

\function
isProp-ofHlevel1 {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) (f : isProp A) : ofHlevel (suc zero) A => \lam a a' => (inv (f a a) *> f a a', Jl (\lam x q => inv (f a a) *> f a x = q) (inv-concat (f a a)))

\function
isProp-isSet {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) (p : isProp A) : isSet A => \lam a a' => isContr-isProp (a = a') (isProp-ofHlevel1 A p a a')

\function
isProp-isProp {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) : isProp (isProp A) => \lam f g => path (\lam i a a' => isProp-isSet A f a a' (f a a') (g a a') @ i)

\function
SigmaExt {lp : Lvl} {lh : CNat} {A : \Type (lp,lh)} (B : A -> \Type (lp,lh)) (x y : \Sigma (a : A) (B a)) (p : x.1 = y.1) (q : transport B p x.2 = y.2) : x = y
    => path (\lam i => (p @ i, pathOver q @ i))

\function
isContrFun-isProp {lp : Lvl} {lh : CNat} (A : \Type (lp,lh)) : isProp (isContr A) =>
    \lam c1 c2 => SigmaExt (\lam a => \Pi (a' : A) -> a = a') c1 c2 (c1.2 (c2.1))
    (path (\lam i a' => isProp-isSet A (isContr-isProp A c1) (c2.1) a'
        (transport (\lam a => \Pi (a' : A) -> a = a') (c1.2 (c2.1)) (c1.2) a') (c2.2 a') @ i))

\function
ofHlevel-isProp {lp : Lvl} {lh : CNat} (n : Nat) (A : \Type (lp,lh)) : isProp (ofHlevel n A) <= \elim n
    | zero => isContrFun-isProp A
    | suc n => \lam f g => path (\lam i a a' => ofHlevel-isProp n (a = a') (f a a') (g a a') @ i)


