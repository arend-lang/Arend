\import Paths.Meta
\import Algebra.Monoid

\lemma test1 (x y : Nat) (p : x = 0) (q : 0 = y) : x = y => rewrite p q

-- \lemma test1a (x y : Nat) (p : x = 0) (q : 0 = y) : x = y => fail rewriteI p q

\lemma test2 (x y : Nat) (p : 0 = x) (q : 0 = y) : x = y => rewriteI p q

-- \lemma test2a (x y : Nat) (p : 0 = x) (q : 0 = y) = y => fail rewriteI p q

\lemma test3 (x y : Nat) (p : 0 = x) (q : 0 = y) : x = y => rewriteF p q

-- \lemma test3a (x y : Nat) (p : x = 0) (q : 0 = y) : x = y => fail rewriteF p q

\lemma test4 (x y : Nat) (p : 0 = x) (q : 0 = y) => rewriteF p q

\lemma test5 (x y : Nat) (p : 0 = x) (q : 0 = y) => rewrite p q

-- \lemma test5a (x y : Nat) (p : 0 = x) (q : 0 = y) => fail rewrite p q

\lemma test6 {A : \Set} (x : A) (f : A -> A) (h : \Pi (z : A) -> f z = z) : f (f x) = x
  => rewrite h (rewrite h idp)

\lemma test7 {A : AbMonoid} (x y : A) (f : A -> A) : f (x + y) = f (y + x)
  => rewrite +-comm idp
