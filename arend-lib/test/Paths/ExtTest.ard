\import Paths
\import Paths.Meta

\func propTest (x y : Nat) (p q : x = y) : p = q => ext

\func funExtTest {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> (B x)) (h : \Pi (x : A) -> f x = g x) : f = g
  => ext (\lam a => h a)

\func funExtTest2 {A B C : \Type} (f g : A -> B -> C) (h : \Pi (y : B) (x : A) -> f x y = g x y) : f = g
  => ext (\lam x y => h y x)

\func funExtTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Type) (f g : \Pi (x : A) (y : B x) -> C x y) (h : \Pi (x : A) (y : B x) -> f x y = g x y) : f = g
  => ext h

\func sigmaExtTest {A B : \Type} (p q : \Sigma A B) (t : p.1 = q.1) (s : p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest2 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest3 {A : \Type} (B : A -> A -> \Type) (p q : \Sigma (x y : A) (B x y)) (t : p.1 = q.1) (t' : p.2 = q.2) (s : coe (\lam i =>  B (t @ i) (t' @ i)) p.3 right = q.3) : p = q
  => ext (t,t',s)

\func sigmaExtPropTest {A : \Type} (B : A -> \Prop) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest2 {A : \Type} (B : A -> \Prop) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)
