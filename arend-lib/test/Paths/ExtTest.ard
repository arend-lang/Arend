\import Equiv
\import Paths
\import Paths.Meta

\func propTest (x y : Nat) (p q : x = y) : p = q => ext

\func funExtTest {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> (B x)) (h : \Pi (x : A) -> f x = g x) : f = g
  => ext (\lam a => h a)

\func funExtTest2 {A B C : \Type} (f g : A -> B -> C) (h : \Pi (y : B) (x : A) -> f x y = g x y) : f = g
  => ext (\lam x y => h y x)

\func funExtTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Type) (f g : \Pi (x : A) (y : B x) -> C x y) (h : \Pi (x : A) (y : B x) -> f x y = g x y) : f = g
  => ext h

\func sigmaExtTest {A B : \Type} (p q : \Sigma A B) (t : p.1 = q.1) (s : p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest2 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest3 {A : \Type} (B : A -> A -> \Type) (p q : \Sigma (x y : A) (B x y)) (t : p.1 = q.1) (t' : p.2 = q.2) (s : coe (\lam i =>  B (t @ i) (t' @ i)) p.3 right = q.3) : p = q
  => ext (t,t',s)

\func sigmaExtPropTest {A : \Type} (B : A -> \Prop) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest2 {A : \Type} (B : A -> \Prop) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtPropTest4 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : Nat -> p.1 = q.1) (s : transport B (t 0) p.2 = q.2) : p = q
  => ext (t 0, s)

\func propUniverseTest (P Q : \Prop) (f : P -> Q) (g : Q -> P) : P = Q
  => ext (f,g)

\func propUniverseTest2 (P Q : \Prop) (t : \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext t

\func propUniverseTest3 (P Q : \Prop) (t : Nat -> \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext (t 0)

\func univalenceTest (P Q : \Set) (e : Equiv {P} {Q}) : P = Q
  => ext e

\func univalenceTest2 (P Q : \Type) (e : QEquiv {P} {Q}) : P = Q
  => ext e

\func sigmaPiExtTest {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (A -> B x)) (t : p.1 = q.1) (s : \Pi (x : A) -> transport B t (p.2 x) = q.2 x) : p = q
  => ext (t,s)

\func sigmaPiExtTest2 {A : \Type} (B1 B2 : A -> \Type) (p q : \Sigma (x : A) (B1 x -> B2 x)) (t : p.1 = q.1) (s : \Pi (y : B1 p.1) -> transport B2 t (p.2 y) = q.2 (transport B1 t y)) : p = q
  => ext (t,s)

\func sigmaPiExtTest3 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x -> Nat)) (t : p.1 = q.1) (s : \Pi (y : B p.1) -> p.2 y = q.2 (transport B t y)) : p = q
  => ext (t,s)

\func sigmaPiExtTest4 {A : \Type} (B1 B2 B3 B4 : A -> \Type) (p q : \Sigma (x : A) ((B1 x -> B2 x) -> B3 x -> B4 x)) (t : p.1 = q.1)
                      (s : \Pi (f : B1 q.1 -> B2 p.1) (y : B3 p.1) -> transport B4 t (p.2 (\lam x => f (transport B1 t x)) y) = q.2 (\lam x => transport B2 t (f x)) (transport B3 t y)) : p = q
  => ext (t,s)

\func sigmaPiExtTest5 {A : \Type} (B1 : A -> A -> \Type) (B2 : \Type) (B3 : A -> \Type) (p q : \Sigma (x y : A) (B1 x y -> B2 -> B3 y)) (t1 : p.1 = q.1) (t2 : p.2 = q.2)
                      (s : \Pi (x : B1 p.1 p.2) (y : B2) -> transport B3 t2 (p.3 x y) = q.3 (coe (\lam i => B1 (t1 @ i) (t2 @ i)) x right) y) : p = q
  => ext (t1,t2,s)

\func sigmaPiExtTest6 {A : \Type} (B1 : A -> \Type) (B2 : \Type) (B3 : A -> \Type) (p q : \Sigma (x y : A) (B1 y -> B2 -> B3 y)) (t1 : p.1 = q.1) (t2 : p.2 = q.2)
                      (s : \Pi (x : B1 p.2) (y : B2) -> transport B3 t2 (p.3 x y) = q.3 (transport B1 t2 x) y) : p = q
  => ext (t1,t2,s)

\func sigmaDepPiExtTest {A : \Type} (B1 : A -> \Type) (B2 : \Pi (a : A) -> B1 a -> \Type) (p q : \Sigma (x : A) (\Pi (b : B1 x) -> B2 x b)) (t : p.1 = q.1) (s : transport (\lam x => \Pi (b : B1 x) -> B2 x b) t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaNonDepPiExtTest {A B : \Type} (p q : \Sigma A (A -> B)) (t : p.1 = q.1) (s : \Pi (x : A) -> p.2 x = q.2 x) : p = q
  => ext (t,s)

\func sigmaNonDepPiExtTest2 {A B : \Type} (C : \Prop) (p q : \Sigma (A -> B) C) (s : \Pi (x : A) -> p.1 x = q.1 x) : p = q
  => ext s

\func sigmaNonDepPiExtTest3 {A B : \Type} (C : (A -> B) -> \Type) (p q : \Sigma (f : A -> B) (C f)) (t : \Pi (a : A) -> p.1 a = q.1 a) (s : transport C (ext t) p.2 = q.2) : p = q
  => ext (t,s)

\func recordExtTest {A B : \Type} (p q : R A B) (t : p.a = q.a) (s : p.b = q.b) : p = q
  => ext (t,s)
  \where {
    \record R (A B : \Type) (a : A) (b : B)
  }

\func recordExtTest2 {A : \Type} (B : A -> \Type) (p q : R A B) (t : p.a = q.a) (s : transport B t p.b = q.b) : p = q
  => ext (t,s)
  \where {
    \record R (A : \Type) (B : A -> \Type) (a : A) (b : B a)
  }

\func recordExtPropTest {A : \Type} (B : A -> \Prop) (p q : R A B) (t : p.a = q.a) : p = q
  => ext t
  \where {
    \record R (A : \Type) (B : A -> \Type) (a : A) (b : B a)
  }

\func recordPiExtTest2 {A : \Type} (B1 B2 : A -> \Type) (p q : R A B1 B2) (t : p.a = q.a) (s : \Pi (y : B1 p.a) -> transport B2 t (p.f y) = q.f (transport B1 t y)) : p = q
  => ext (t,s)
  \where {
    \record R (A : \Type) (B1 B2 : A -> \Type) (a : A) (f : B1 a -> B2 a)
  }

\func recordNamedExtTest {A B : \Type} (p q : R A B) (t : p.a = q.a) (s : p.b = q.b) : p = q
  => ext R { | b => s | a => t }
  \where \open recordExtTest

\func recordNamedExtPropTest {A : \Type} (B : A -> \Prop) (p q : R A B) (t : p.a = q.a) : p = q
  => ext R { | a => t }
  \where \open recordExtPropTest
