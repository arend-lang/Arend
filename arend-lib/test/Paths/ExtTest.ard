\import Equiv
\import Paths
\import Paths.Meta

\func propTest (x y : Nat) (p q : x = y) : p = q => ext

\func funExtTest {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> (B x)) (h : \Pi (x : A) -> f x = g x) : f = g
  => ext (\lam a => h a)

\func funExtTest2 {A B C : \Type} (f g : A -> B -> C) (h : \Pi (y : B) (x : A) -> f x y = g x y) : f = g
  => ext (\lam x y => h y x)

\func funExtTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Type) (f g : \Pi (x : A) (y : B x) -> C x y) (h : \Pi (x : A) (y : B x) -> f x y = g x y) : f = g
  => ext h

\func sigmaExtTest {A B : \Type} (p q : \Sigma A B) (t : p.1 = q.1) (s : p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest2 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest3 {A : \Type} (B : A -> A -> \Type) (p q : \Sigma (x y : A) (B x y)) (t : p.1 = q.1) (t' : p.2 = q.2) (s : coe (\lam i =>  B (t @ i) (t' @ i)) p.3 right = q.3) : p = q
  => ext (t,t',s)

\func sigmaExtPropTest {A : \Type} (B : A -> \Prop) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest2 {A : \Type} (B : A -> \Prop) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtPropTest4 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : Nat -> p.1 = q.1) (s : transport B (t 0) p.2 = q.2) : p = q
  => ext (t 0, s)

\func propUniverseTest (P Q : \Prop) (f : P -> Q) (g : Q -> P) : P = Q
  => ext (f,g)

\func propUniverseTest2 (P Q : \Prop) (t : \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext t

\func propUniverseTest3 (P Q : \Prop) (t : Nat -> \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext (t 0)

\func univalenceTest (P Q : \Set) (e : Equiv {P} {Q}) : P = Q
  => ext e

\func univalenceTest2 (P Q : \Type) (e : QEquiv {P} {Q}) : P = Q
  => ext e

\func sigmaPiExtTest {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (A -> B x)) (t : p.1 = q.1) (s : \Pi (x : A) -> transport B t (p.2 x) = q.2 x) : p = q
  => -- ext (t, Jl (\lam a t' => \Pi (q2 : A -> B a) -> (\Pi (x : A) -> transport B t' (p.2 x) = q2 x) -> transport (\lam x => A -> B x) t' p.2 = q2) (\lam q2 s' => ext s') t q.2 s)
    ext (t,s)

\func sigmaPiExtTest2 {A : \Type} (B1 B2 : A -> \Type) (p q : \Sigma (x : A) (B1 x -> B2 x)) (t : p.1 = q.1) (s : \Pi (y : B1 p.1) -> transport B2 t (p.2 y) = q.2 (transport B1 t y)) : p = q
  => ext (t, Jl (\lam a t' => \Pi (q2 : B1 a -> B2 a) -> (\Pi (y : B1 p.1) -> transport B2 t' (p.2 y) = q2 (transport B1 t' y)) -> transport (\lam x => B1 x -> B2 x) t' p.2 = q2) (\lam q2 s' => ext s') t q.2 s)
    -- ext (t,s)

\func sigmaPiExtTest3 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x -> Nat)) (t : p.1 = q.1) (s : \Pi (y : B p.1) -> p.2 y = q.2 (transport B t y)) : p = q
  => ext (t, Jl (\lam a t' => \Pi (q2 : B a -> Nat) -> (\Pi (y : B p.1) -> p.2 y = q2 (transport B t' y)) -> transport (\lam x => B x -> Nat) t' p.2 = q2) (\lam q2 s' => ext s') t q.2 s)
    -- ext (t,s)

\func sigmaPiExtTest4 {A : \Type} (B1 B2 B3 B4 : A -> \Type) (p q : \Sigma (x : A) ((B1 x -> B2 x) -> B3 x -> B4 x)) (t : p.1 = q.1)
                      (s : \Pi (f : B1 q.1 -> B2 p.1) (y : B3 p.1) -> transport B4 t (p.2 (\lam x => f (transport B1 t x)) y) = q.2 (\lam x => transport B2 t (f x)) (transport B3 t y)) : p = q
  => ext (t, Jl (\lam a t' => \Pi (q2 : (B1 a -> B2 a) -> B3 a -> B4 a) -> (\Pi (f : B1 a -> B2 p.1) (y : B3 p.1) -> transport B4 t' (p.2 (\lam x => f (transport B1 t' x)) y) = q2 (\lam x => transport B2 t' (f x)) (transport B3 t' y))
                                                                        -> transport (\lam x => (B1 x -> B2 x) -> B3 x -> B4 x) t' p.2 = q2)
                (\lam q2 s' => ext s') t q.2 s)
      -- ext (t,s)

\func sigmaPiExtTest5 {A : \Type} (B1 : A -> A -> \Type) (B2 : \Type) (B3 : A -> \Type) (p q : \Sigma (x y : A) (B1 x y -> B2 -> B3 y)) (t1 : p.1 = q.1) (t2 : p.2 = q.2)
                      (s : \Pi (x : B1 p.1 p.2) (y : B2) -> transport B3 t2 (p.3 x y) = q.3 (coe (\lam i => B1 (t1 @ i) (t2 @ i)) x right) y) : p = q
  => ext (t1, t2, \case q.1 \as q1, t1 \as t1' : p.1 = q1, q.2 \as q2, t2 \as t2' : p.2 = q2, q.3 \as q3 : B1 q1 q2 -> B2 -> B3 q2, s : \Pi (x : B1 p.1 p.2) (y : B2) -> transport B3 t2' (p.3 x y) = q3 (coe (\lam i => B1 (t1' @ i) (t2' @ i)) x right) y \return coe (\lam i => B1 (t1' @ i) (t2' @ i) -> B2 -> B3 (t2' @ i)) p.3 right = q3 \with {
                    | _, idp, _, idp, _, s' => ext s'
                  })
      -- ext (t,t',s)

\func sigmaPiExtTest6 {A : \Type} (B1 : A -> \Type) (B2 : \Type) (B3 : A -> \Type) (p q : \Sigma (x y : A) (B1 y -> B2 -> B3 y)) (t1 : p.1 = q.1) (t2 : p.2 = q.2)
                      (s : \Pi (x : B1 p.2) (y : B2) -> transport B3 t2 (p.3 x y) = q.3 (transport B1 t2 x) y) : p = q
  => ext (t1, t2, \case q.2 \as q2, t2 \as t2' : p.2 = q2, q.3 \as q3 : B1 q2 -> B2 -> B3 q2, s : \Pi (x : B1 p.2) (y : B2) -> transport B3 t2' (p.3 x y) = q3 (transport B1 t2' x) y \return transport (\lam y => B1 y -> B2 -> B3 y) t2' p.3 = q3 \with {
                    | _, idp, _, s' => ext s'
                  })
  -- ext (t,t',s)
