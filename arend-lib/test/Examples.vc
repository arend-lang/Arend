\open ::Paths
\open ::Logic

\open ::Data::Unit
\open ::Data::Bool
\open ::Data::Empty
\open ::Data::Maybe
\open ::Data::Either

\open ::Combinators
\open ::Data::List::Properties

\static \function
brace_free {A B C : \Type0} (f : A -> B) (g : B -> C) (x : A) => g $ f x

\static \function
point_free {A B C : \Type0} (f : A -> B) (g : B -> C) => g `o` f

-- Interval, Sigma, Pi

\static \function
bool_to_I (b : Bool) : I <= \elim b
    | false => left
    | true  => right

\static \function
trivial_sigma : \Sigma Unit Unit => (unit, unit)

\static \function
trivial_pi_id : \Pi Unit -> Unit => \lam x => x

\static \function
trivial_pi_const : \Pi Unit -> Unit => \lam _ => unit

-- Equality

\static \function
true_and_false : and true false = false => idp

\static \function
true_and_false' (e : Empty) : and true false != true =>
  \lam p => transport (True `o` not) p unit

-- Finite sets

\open Data.Fin
\open Data.Fin.Properties

\static \function
fin11 : Fin 1 => fzero

\static \function
fin21 : Fin 2 => fzero

\static \function
fin22 : Fin 2 => fsuc fzero

\static \function
fin31 : Fin 3 => fzero

\static \function
fin32 : Fin 3 => fsuc fzero

\static \function
fin33 : Fin 3 => fsuc (fsuc fzero)

\static \function
fin99 : Fin 9 => from-nat 8

\static \function
from-nat-ok : from-nat 1 = fsuc fzero => idp

\static \function
to-nat-ok : to-nat {2} (fsuc fzero) = 1 => idp

-- Arithmetic

\open Data.Nat.Compare

\static \function
two_isnt_three : is-left (2 =? 3) => unit

\static \function
two_le_three : is-right (2 =<? 3) => unit

-- Logic

\static \function
unit_and_unit : (Unit && Unit) => (unit, unit)

