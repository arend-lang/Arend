\open Paths
\open Logic

\open Data.Fin
\open Data.Unit
\open Data.Bool
\open Data.Empty
\open Data.Maybe
\open Data.Either

\open Combinators

\static \function
brace_free {A B C : \Type0} (f : A -> B) (g : B -> C) (x : A) <= g $ f x

\static \function
point_free {A B C : \Type0} (f : A -> B) (g : B -> C) <= g ^ f

-- Interval, Sigma, Pi

\static \function
bool_to_I (b : Bool) : I <= \elim b
  | false => left
  | true  => right

\static \function
trivial_sigma : \Sigma Unit Unit <= (unit, unit)

\static \function
trivial_pi_id : \Pi Unit -> Unit <= \lam x => x

\static \function
trivial_pi_const : \Pi Unit -> Unit <= \lam _ => unit

-- Equality

\static \function
true_and_false : and true false = false <= idp

\static \function
true_and_false' (e : Empty) : and true false != true <=
  \lam p => transport (True ^ not) p unit

-- Finite sets

\static \function
fin11 : Fin 1 <= nothing

\static \function
fin22 : Fin 2 <= nothing

\static \function
fin22 : Fin 2 <= just nothing

\static \function
fin31 : Fin 3 <= nothing

\static \function
fin32 : Fin 3 <= just nothing

\static \function
fin33 : Fin 3 <= just (just nothing)

-- Logic

\static \function
unit_and_unit : (Unit && Unit) <= (unit, unit)

--EXCEPTION
--\static \function
--unit_or_unit (e : Empty) : (Unit || Unit) <= absurd e
--OR
--unit_or_unit : (Unit || Unit) <= inl'

--EXCEPTION
--\static \function
--false_and_something (e : Empty) : \Pi (b : Bool) -> ((and false b = false) -> ((b = true) || (b = false))) <= absurd e
