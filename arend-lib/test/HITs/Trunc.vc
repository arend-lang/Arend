\open ::Paths
\open ::Hlevel
\open ::HITs::Spheres
\open ::Combinators
\open ::Equiv

\data Trunc (n : Nat) (A : \Type) 
    | inT A
    | hT (r : (S n).1 -> Trunc n A)
    | spokeT (r : (S n).1 -> Trunc n A) (x : (S n).1) (i : I) => \elim i {
        | left => r x
        | right => hT r
    }

\function
ofHlevel-Trunc (n : Nat) (A : \Type) : ofHlevel (suc n) (Trunc n A) => 
    \let TA => Trunc n A
    \in transport id (inv (ofHlevel-Omega-contr TA n))
        (\lam (b : TA) => transport id (pmap isContr (SphereOmega-adj n (TA, b))) (
            \let cb : (S n).1 -> TA => \lam x => b
            \in ((cb, idp), \lam r => (
                    \let | P => \lam (f : (S n).1 -> TA) => f (S n).2 = b
                         | A1 : cb = r.1 => fun-ext (\lam (x : (S n).1) => inv (path (spokeT r.1 x) *> inv (path (spokeT r.1 (S n).2)) *> r.2))
                         | A2 : transport P A1 idp = r.2 => coePath (pmap (\lam (f : (S n).1 -> TA) => f (S n).2) A1) idp (idpe b) *>
                             inv-inv _ *> inv (concat-assoc _ _ _) *> pmap (\lam p => p *> r.2) (concat-inv (path (spokeT r.1 (S n).2))) *> concat-idp _
                    \in sigma-ext-eq P (A1, A2)))))

\function
Trunc-UP {n : Nat} {A : \Type} {P : Trunc n A -> \Type} (nT : \Pi (x : Trunc n A) -> ofHlevel (suc n) (P x))
    (g : \Pi (a : A) -> P (inT a)) (x : Trunc n A) : P x => \elim x
    | inT a => g a
    | hT r => transport P (path (spokeT r (S n).2)) (Trunc-UP {n} {A} {P} nT g (r (S n).2))
    | spokeT r x i => pathOver (ofHlevel-sphere-map-contr (nT (hT r))
        (\lam (z : (S n).1) => transport P (path (spokeT r z)) (Trunc-UP {n} {A} {P} nT g (r z))) x) @ i

\function
ext {n : Nat} {A E : \Type} (nT : ofHlevel (suc n) E) (f : A -> E) : Trunc n A -> E 
    => Trunc-UP {n} {A} {\lam _ => E} (\lam _ => nT) f

\function
uniq {n : Nat} {A E : \Type} (nT : ofHlevel (suc n) E) (f1 f2 : Trunc n A -> E) (eq : \Pi (a : A) -> f1 (inT a) = f2 (inT a)) : f1 ~ f2 
    => \lam (x : Trunc n A) => Trunc-UP {n} {A} {\lam x => f1 x = f2 x} (\lam x => ofHlevel-suc {E} {suc n} nT (f1 x) (f2 x)) eq x

\function
Trunc-UP2 {n : Nat} (A B : \Type) (nT : ofHlevel (suc n) B) : isequiv (\lam (g : Trunc n A -> B) => g `o inT) => 
    \let G => ext {n} {A} {B} nT
    \in ((G, \lam g => fun-ext (uniq nT (G (g `o inT)) g (\lam _ => idp))),
            (G, \lam f => fun-ext {A} {B} {G f `o inT} {f} (\lam _ => idp)))

