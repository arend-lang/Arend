\open ::Paths
\open ::Hlevel
\open ::HITs::Spheres
\open ::Combinators
\open ::Equiv

\data Squash (A : \Type) 
    | in A
    | eq (a a' : Squash A) (i : I) => \elim i {
        | left => a
        | right => a'
    }

\data Trunc (n : Nat) (A : \Type) 
    | inT A
    | hT (r : (S n).1 -> Trunc n A)
    | spokeT (r : (S n).1 -> Trunc n A) (x : (S n).1) (i : I) => \elim i {
        | left => r x
        | right => hT r
    }

\function
Squash-isProp {A : \Type} : isProp (Squash A) => \lam a a' => path (\lam i => eq a a' i)

\function
ofHlevel-Trunc (n : Nat) (A : \Type) : ofHlevel (suc n) (Trunc n A) => 
    \let TA => Trunc n A
    \in transport id (inv (ofHlevel-Omega-contr TA n))
        (\lam (b : TA) => transport id (pmap isContr (SphereOmega-adj n (TA, b))) (
            \let cb : (S n).1 -> TA => \lam x => b
            \in ((cb, idp), \lam r => (
                    \let | P => \lam (f : (S n).1 -> TA) => f (S n).2 = b
                         | A1 : cb = r.1 => fun-ext (\lam (x : (S n).1) => inv (path (spokeT r.1 x) *> inv (path (spokeT r.1 (S n).2)) *> r.2))
                         | A2 : transport P A1 idp = r.2 => coePath (pmap (\lam (f : (S n).1 -> TA) => f (S n).2) A1) idp (idpe b) *>
                             inv-inv _ *> inv (concat-assoc _ _ _) *> pmap (\lam p => p *> r.2) (concat-inv (path (spokeT r.1 (S n).2))) *> concat-idp _
                    \in sigma-ext-eq P (A1, A2)))))

\function
Trunc-UP {n : Nat} {A : \Type} {P : Trunc n A -> \Type} (nT : \Pi (x : Trunc n A) -> ofHlevel (suc n) (P x))
    (g : \Pi (a : A) -> P (inT a)) (x : Trunc n A) : P x => \elim x
    | inT a => g a
    | hT r => transport P (path (spokeT r (S n).2)) (Trunc-UP {n} {A} {P} nT g (r (S n).2))
    | spokeT r x i => {?}
