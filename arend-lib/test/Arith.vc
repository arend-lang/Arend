\function \infixl 6
(+) (x y : Nat) : Nat <= \elim x
    | zero => y
    | suc x' => suc (x' + y)

\function \infixl 7
(*) (x y : Nat) : Nat <= \elim x
    | zero => zero
    | suc x' => y + (x' * y)

\function
plus-assoc (x y z : Nat) : (x + y) + z = x + (y + z) <= \elim x
    | zero => path (\lam _ => y + z)
    | suc x' => path (\lam i => suc (plus-assoc x' y z @ i))

\function
plus-comm0 (y : Nat) : y = y + zero <= \elim y
    | zero => Paths.idp
    | suc y' => Paths.pmap suc (plus-comm0 y')

\function
plus-comm (x y : Nat) : x + y = y + x <= \elim x
    | zero => plus-comm0 y
    | suc x' <= \elim y
        | zero => Paths.inv (plus-comm0 (suc x'))
        | suc y' => Paths.pmap suc (plus-comm x' (suc y') `Paths.(>==)` Paths.pmap suc (Paths.inv (plus-comm x' y')) `Paths.(>==)` plus-comm (suc x') y')

\function
mul-distr (x y z : Nat) : (x + y) * z = x * z + y * z <= \elim x
    | zero => Paths.idp
    | suc x' => Paths.pmap (\lam t => z + t) (mul-distr x' y z) `Paths.(>==)` Paths.inv (plus-assoc z (x' * z) (y * z))

\function
mul-assoc (x y z : Nat) : (x * y) * z = x * (y * z) => \elim x
    | zero => Paths.idp
    | suc x' => mul-distr y (x' * y) z `Paths.(>==)` Paths.pmap (\lam t => y * z + t) (mul-assoc x' y z)

\function
mul-comm0 (y : Nat) : zero = y * zero <= \elim y
    | zero => Paths.idp
    | suc y' => mul-comm0 y'

\function
mul-comm (x y : Nat) : x * y = y * x <= \elim x
    | zero => mul-comm0 y
    | suc x' <= \elim y
        | zero => Paths.inv (mul-comm0 x')
        | suc y' => Paths.pmap suc (Paths.pmap (\lam t => y' + t) (mul-comm x' (suc y')) `Paths.(>==)` Paths.inv (plus-assoc y' x' (y' * x')) `Paths.(>==)` Paths.pmap (\lam t => t + y' * x') (plus-comm y' x') `Paths.(>==)` Paths.pmap (\lam t => x' + y' + t) (Paths.inv (mul-comm x' y')) `Paths.(>==)` plus-assoc x' y' (x' * y') `Paths.(>==)` Paths.pmap (\lam t => x' + t) (mul-comm (suc x') y'))
