\open ::Data::Bool

\class Semigroup {
  \abstract X : \Type0
  \abstract op : X -> X -> X
  \abstract assoc : \Pi (x y z : X) -> op (op x y) z = op x (op y z)
}

\function
xor-semigroup => \new Semigroup { X => Bool | op => xor | assoc => {?} }

\function
and-semigroup => \new Semigroup { X => Bool | op => and | assoc => {?} }

\static \class Monoid {
  \abstract S : Semigroup
  \abstract id : S.X
  \abstract lunit (x : S.X) : S.op id x = x
  \abstract runit (x : S.X) : S.op x id = x
}

\function
xor-monoid => \new Monoid {
  | S => xor-semigroup
  | id => false
  | lunit => {?}
  | runit => {?}
}

\function
and-monoid => \new Monoid {
  | S => and-semigroup
  | id => true
  | lunit => {?}
  | runit => {?}
}

\class Group {
  \abstract M : Monoid
  \abstract inv : M.S.X -> M.S.X
  \abstract linv (x : M.S.X) : M.S.op (inv x) x = M.id
  \abstract rinv (x : M.S.X) : M.S.op x (inv x) = M.id
}

\function
xor-group => \new Group {
  | M => xor-monoid
  | inv => {?}
  | linv => {?}
  | rinv => {?}
}

\class AbelianGroup {
  \abstract G : Group
  \abstract comm (x y : G.M.S.X) : G.M.S.op x y = G.M.S.op y x
}

\function
xor-abelian => \new AbelianGroup {
  | G => xor-group
  | comm => {?}
}

{-
\class Ring {
  \abstract A : AbelianGroup
  \abstract M : Monoid { S : Semigroup { X => A.G.M.S.X } }
  \abstract ldistr (x y z : A.G.M.S.X) : M.S.op x (A.G.M.S.op y z) = A.G.M.S.op (M.S.op x y) (M.S.op x z)
  \abstract rdistr (x y z : A.G.M.S.X) : M.S.op (A.G.M.S.op y z) x = A.G.M.S.op (M.S.op y x) (M.S.op z x)
}

\function
xor-ring => \new Ring {
  | A => xor-abelian
  | M => and-monoid
  | distr => {?}
}

\function
mul-zero (R : Ring) (x : R.A.G.M.S.X) : M.S.op x R.A.G.M.id = R.A.G.M.id
    => {?}
-}
