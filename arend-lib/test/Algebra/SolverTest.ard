\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.Solver
\import Algebra.Pointed
\import Data.List
\import Meta
\import Paths

\lemma test1 {M : Monoid} (x y z w : M)
  : (x * (ide * y)) * ((ide * z) * w) = x * ((y * (z * ide)) * w)
  => solve

\lemma test2 {M : Monoid} (x y : M) (p : ide = x * y)
  : (x * x) * (y * y) = ide
  => solve

\lemma test2a {M : Monoid} (x y : M) (p : ide = x * y)
  : (x * x) * (y * y) = ide
  => solve {inv p}

\lemma test2b {M : Monoid} (x y : M) (p : ide = x * y)
  => fail {(x * x) * (y * y) = ide} solve {()}

\lemma test2c {M : Monoid} (x y : M) (p : ide = x * y)
  => fail {(x * x) * (y * y) = ide} solve {p}

\lemma test3 {M : Monoid} (x y z : M) (p : x * z = z * x) (q : y * z = z * y)
  : (y * x) * (y * z) = (y * z) * (x * y)
  => solve

\lemma test3a {M : Monoid} (x y z : M) (p : x * z = z * x) (q : y * z = z * y)
  : (y * x) * (y * z) = (y * z) * (x * y)
  => solve {p,q}

\lemma test3b {M : Monoid} (x y z : M) (p : x * z = z * x) (q : y * z = z * y)
  : (y * x) * (y * z) = (y * z) * (x * y)
  => solve {inv p, q}

\lemma test4 {M : Monoid} (x y z : M) (p : z * x = x * z) (q : z * z = x * x)
  : z * (x * z) = x * (x * x) => solve

\lemma test4a {M : Monoid} (x y z : M) (p : z * x = x * z) (q : z * z = x * x)
  : z * (x * z) = x * (x * x)
  => solve {p,q}

\lemma test5 {M : Monoid} (x y z : M) (p : (x * y) * z = z * y) (q : y * z = z * (y * x))
  : (x * z) * (y * (x * x)) = (z * y) * x
  => solve

\lemma test6 {M : Monoid} (x : M) (p : x * x = x * x)
  => fail {x * x = x} solve {p}

\lemma test7 {M : Monoid} (x y : M) (p : x * y = x) : x * y * y = x
  => solve

\lemma test7a {M : Monoid} (x y : M) (p : x * y = x) : x = x * y * y
  => solve

\lemma test8 {M : Monoid} (x y z : M) (p : x * y = ide) (q : y * z = ide) : x = z
  => equation {inv (ide-right x) *> pmap (x *) (inv q) *> inv (*-assoc x y z)} (x * y * z)

\lemma test8a {M : Monoid} (x y z : M) (p : x * z = x) (q : z * z = y) (s : x * y = y) : x = y
  => equation (x * z * z) {*-assoc x z z *> pmap (x *) q *> s}
