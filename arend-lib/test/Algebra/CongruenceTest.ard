\import Algebra.Meta
\import Algebra.Monoid
\import Meta
\import Paths

\lemma basicTest (f g : Nat -> Nat) (a b : Nat) (p : a = b) (q : f = g) : f a = g b
  => cong

\lemma funcComp (f : Nat -> Nat) (p : f (f (f 0)) = 0) (q : f (f (f (f (f 0)))) = 0) : f 0 = 0
  => cong

\lemma funcCompArgRev (f : Nat -> Nat) (p : f (f (f 0)) = 0) (q : f (f (f (f (f 0)))) = 0) : f 0 = 0
  => cong

\lemma binaryFunc (a b c : Nat) (+ : Nat -> Nat -> Nat) (p : b = c) : a `+` b = a `+` c
  => cong

\lemma binop (a b c : Nat) (p : b = c) : a Nat.+ b Nat.+ c = a Nat.+ c Nat.+ b
  => cong

\func defcall (a b c d : Nat) (p : b = d) (q : Foo a b c = Nat) : Foo a d c = Nat
  => cong
  \where {
    \data Foo (a b c : Nat)
  }

\lemma monoid {M : Monoid} (a b c d : M) (p : b * c = d) (q : a * b = a * c) (r : c * c = b) : a * b = a * d
  => cong {using (M.*-assoc {a} {b} {c}, M.*-assoc {a} {c} {c})}

\lemma dependentFail (f : \Pi (n : Nat) -> depFunc n) {x : Nat} (p : 0 = suc x)
  => fails {f 0 = f (suc x)} cong
  \where {
    \func depFunc (n : Nat) : \Set
      | 0 => Nat
      | suc _ => Nat
  }

\lemma congTrivial (x : Nat) (p : x = 0) : x = 0
  => cong p

\lemma congCon (x y : Nat) (p : x = y) : suc x = suc y
  => cong p

\lemma congCon1 (x : Nat) (p : x = 1) : suc (suc (suc x)) = 4
  => cong p

\lemma congCon2 (x : Nat) (p : 1 = x) : 4 = suc (suc (suc x))
  => cong p

\lemma funCall (x y : Nat) (p : x = y) : f x = f y
  => cong p
  \where
    \func f (x : Nat) => x Nat.+ 2

\func dataCall (x y : Nat) (p : x = y) : D x = D y
  => cong p
  \where
    \data D (n : Nat) | con1 | con2
