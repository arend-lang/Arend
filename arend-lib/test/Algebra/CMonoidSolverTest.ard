\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Monoid.Solver
\import Algebra.Pointed
\import Arith.Nat
\import Data.List
\import Order.Lattice \hiding (MeetSemilattice)
\import Paths
\import Set

\lemma test1 {M : CMonoid} (x y z w : M)
  : (x * (1 * y)) * ((1 * z) * w) = x * ((y * (z * 1)) * w)
  => equation

\lemma test2 {M : CMonoid} (x y z w : M)
  : (y * (1 * z)) * ((1 * x) * w) = x * ((y * (z * 1)) * w)
  => equation

\lemma testOneAx {M : CMonoid} (x y z : M) (p : x = y)
  : y * z = z * x
  => equation

\lemma testTwoAx {M : CMonoid} (x y : M) (p : x * y = ide) (q : y * y = x)
  : x * x = y
  =>
    \let d => \new CData {M} (\lam (n : Nat) => (\case n \with {
      | 0 => x
      | 1 => y
      | _ => ide
    }))
    \in CData.terms-equality {d} (var 0 :* var 0) (var 1)
        ((CData.replace-consistent {d} (0 :: 0 :: nil) (0 :: nil) (1 :: 1 :: nil) (inv q) Paths.*> CData.replace-consistent {d} (1 :: 1 :: 0 :: nil) (0 :: 2 :: nil) nil p) Paths.*> CData.sort-consistent (1 :: nil))

\open Bounded(MeetSemilattice,top)

\lemma test3 {L : MeetSemilattice} (x y z : L) : (x ∧ y) ∧ ((top ∧ x) ∧ z) = z ∧ ((y ∧ x) ∧ (z ∧ y))
  => equation

\lemma addTest {M : AbMonoid} (x y z w : M)
  : (y + (0 + z)) + ((0 + x) + w) = x + ((y + (z + 0)) + w)
  => equation
