\import Logic
\import Meta

\func caseTest1 (n : Nat) (f : 0 = n -> Nat) : Nat => cases (n arg (name = x), idp : x = n) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTest2 (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg (name = x), idp arg (name = y) : n = x) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTestPath (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg addPath) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\lemma caseVarSearch (n : Nat) : (n = 0) || (\Sigma) => cases n \with {
  | 0 => byLeft idp
  | suc _ => byRight ()
}

\lemma caseSearch (f : Nat -> Nat) : (f 0 = 0) || (\Sigma) => cases (f 0) \with {
  | 0 => byLeft idp
  | suc _ => byRight ()
}

\lemma caseSearchArg (f : Nat -> Nat) (p : f 0 = 0) : f 0 = 0 => cases (f 0, p) \with {
  | _, p => p
}

\func caseDefault (n : Nat) : Nat => cases n 0

\func caseDefault2 (n m : Nat) : f n Nat.+ f m = 0 => cases (n,m) idp \with {
  | 0, suc m => idp
} \where
    \func f (n : Nat) : Nat
      | 0 => 0
      | suc n => 0

\lemma dependentTest (n : Nat) (p : n Nat.<= 0) : n = 0 => cases (n,p) idp
