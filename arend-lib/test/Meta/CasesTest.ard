\import Logic
\import Meta

\func caseTest1 (n : Nat) (f : 0 = n -> Nat) : Nat => cases (n arg (name = x), idp : x = n) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTest2 (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg (name = x), idp arg (name = y) : n = x) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTestPath (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg addPath) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\lemma caseVarSearch (n : Nat) : (n = 0) || (\Sigma) => cases n \with {
  | 0 => byLeft idp
  | suc _ => byRight ()
}
