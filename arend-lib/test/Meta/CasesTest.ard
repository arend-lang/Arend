\import Meta

\lemma test1 (n : Nat) : (\case n \with { | 0 => 1 | suc _ => 1 }) = 1
  => mcases \with {
    | 0 => idp
    | suc _ => idp
  }

\lemma test2 (n m : Nat) : (\case n \with { | 0 => 2 | suc _ => 2 }) = (\case m \with { | 0 => 2 | suc _ => 2 })
  => mcases \with {
    | 0, 0 => idp
    | 0, suc n1 => idp
    | suc n1, 0 => idp
    | suc n1, suc n2 => idp
  }

\lemma testOccurrences (n m : Nat) : \let x : Nat => \case m \with { | 0 => 0 | suc _ => 0 } \in (\case n \with { | 0 => 1 | suc _ => 1 }) = 1
  => mcases {2} \with {
    | 0 => idp
    | suc _ => idp
  }

\lemma testDef (n : Nat) : foo n = 2
  => mcases {foo} \with {
    | 0 => idp
    | suc _ => idp
  }
  \where {
    \func foo (n : Nat) : Nat
      | 0 => 2
      | suc _ => 2
  }

\open testDef

\lemma testDefOccurrences (n m : Nat) : \let x => foo m \in foo n = 2
  => mcases {foo,2} \with {
    | 0 => idp
    | suc _ => idp
  }

\lemma testCaseDefOccurrences (n m k : Nat) : \let x => foo m \in foo n = (\case k \with { | 0 => 2 | suc _ => 2 })
  => mcases {1,(foo,2)} \with {
    | 0, 0 => idp
    | 0, suc _ => idp
    | suc _, 0 => idp
    | suc _, suc _ => idp
  }

\lemma testCaseDefOccurrences2 (n m k : Nat) : \let x => foo m \in foo n = (\case k \with { | 0 => 2 | suc _ => 2 })
  => mcases {(),(foo,2)} \with {
    | 0, 0 => idp
    | 0, suc _ => idp
    | suc _, 0 => idp
    | suc _, suc _ => idp
  }

\lemma testCaseDefOccurrencesFail (n m k : Nat)
  => fails {\let x => foo m \in foo n = (\case k \with { | 0 => 2 | suc _ => 2 })}
           (mcases {foo,2} \with {
             | 0, 0 => idp
             | 0, suc _ => idp
             | suc _, 0 => idp
             | suc _, suc _ => idp
           })

\lemma testRefinedPatterns (n : Nat) : (\case n \with { | 0 => 2 | 1 => 2 | _ => 2 }) = 2
  => mcases \with {
    | 0 => idp
    | 1 => idp
    | suc (suc _) => idp
  }

\lemma testRefinedPatterns2 (k n m : Nat) : bar k n m = 3
  => mcases {bar} \with {
    | k1, 0, 0 => idp
    | k1, 0, suc n1 => idp
    | k1, suc n1, 0 => idp
    | k1, suc n1, suc n2 => idp
  }
  \where {
    \func bar (k n m : Nat) : Nat \elim n, m
      | 0, m => 3
      | n, 0 => 3
      | suc n, suc m => 3
  }

\lemma testRefinedPatterns3 (n : Nat) : (\case n \with { | 0 => 2 | 1 => 2 | _ => 2 }) = 2
  => mcases idp

\open testRefinedPatterns2

\lemma testRefinedPatterns4 (k n m : Nat) : bar k n m = 3
  => mcases {bar} idp
