\data Int
	| pos Nat
	| neg Nat
  \with
	| neg zero => pos zero

{-
\function
foo (x : Int) : Int <= \elim x
	| pos n => pos (suc n)
	| neg n => neg (suc n)
-}

\data Quot1 (A : \Set) (R : A -> A -> \Prop)
	| classEq1 A
	| quotEq1 (a a' : A) (R a a') I
	| trunc1 (a a' : Quot1 A R) (p p' : a = a') I I
  \with
	| quotEq1 a a' p left => classEq1 a
	| quotEq1 a a' p right => classEq1 a'
	| trunc1 a a' p p' i left => p @ i
	| trunc1 a a' p p' i right => p' @ i
	| trunc1 a a' p p' left _ => a
	| trunc1 a a' p p' right _ => a'

\data Quot' (A : \Set) (R : A -> A -> \Prop)
	| classEq A
	| quotEq (a a' : A) (R a a') I
  \with
	| quotEq a a' p left => classEq a
	| quotEq a a' p right => classEq a'

\function
Quot (A : \Set) (R : A -> A -> \Prop) => TrS (Quot' A R)

\data Empty

\function
foo (x : Quot' Nat (\lam _ _ => Empty)) : Nat <= \elim x
	| classEq n => n
	| quotEq a a' _! _

\function
Nat-isSet (x y : Nat) (p q : x = y) : p = q => {?}

\function
foo1 (x : Quot1 Nat (\lam _ _ => Empty)) : Nat <= \elim x
	| classEq1 n => n
	| quotEq1 a a' _! _
	| trunc1 a a' p p' i j => Nat-isSet (foo1 a) (foo1 a') (path (\lam i => foo1 (p @ i))) (path (\lam i => foo1 (p' @ i))) @ i @ j

{-
foo1 a : Nat
foo1 a' : Nat
pmap foo1 p : foo1 a = foo1 a'
pmap foo1 p' : foo1 a = foo1 a'
(? : pmap foo1 p = pmap foo1 p') @ i @ j
-}

{-
\function
bar (x : Quot Nat (\lam _ _ => Empty)) : Nat <= \elim x
	| inS (classEq n) => n
	| inS (quotEq a a' _! _)
-}
{-
quotEq : \Pi (a a' : A) -> R a a' -> I -> Quot A R
quotEq a a' p left => a
quotEq a a' p right => a'
-}

{-
a : A
a' : A
p : R a a'
------------
path (quotEq a a' p) : classEq a = classEq a'
-}
