\open ::LC::Ctx
\open ::LC::Fun
\open ::LC::RVec
\open ::LC::Term

\open ::Data::Bool
\open ::Data::Either
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Paths


\function
VarInCtx {n : Nat} (env : Ctx n) (x : Nat) => \Sigma (i : Fin n) (p : env !! i = x)


\data TermInCtx {n : Nat} (env : Ctx n) (t : NTerm)
    | TermInCtx {n} env (NVar x)     => Variable (p : VarInCtx env x)
    | TermInCtx {n} env (NApp t1 t2) => Application (p : TermInCtx env t1) (q : TermInCtx env t2)
    | TermInCtx {n} env (NLam x t)   => Abstraction (p : TermInCtx (extend env x) t)


\data AlphaEq
    {n : Nat}
    (env1 : Ctx n)
    (t1 : NTerm)
    (p1 : TermInCtx env1 t1)
    (env2 : Ctx n)
    (t2 : NTerm)
    (p2 : TermInCtx env2 t2)
        | AlphaEq env1 (NVar x) (Variable p) env2 (NVar y) (Variable q)                       => VarEq (p : p.1 = q.1)
        | AlphaEq env1 (NApp t1 s1) (Application p1 q1) env2 (NApp t2 s2) (Application p2 q2) => AppEq (p : AlphaEq env1 t1 p1 env2 t2 p2) (q : AlphaEq env1 s1 q1 env2 s2 q2)
        | AlphaEq env1 (NLam x t1) (Abstraction p1) env2 (NLam y t2) (Abstraction p2)         => LamEq (p : AlphaEq (extend env1 x) t1 p1 (extend env2 y) t2 p2)


\function
phi
    {n : Nat}
    (env : Ctx n)
    (t : NTerm)
    (proof : TermInCtx env t) : ITerm n <= \elim t, proof
        | NVar x, Variable p             => IVar p.1
        | NApp t1 t2, Application p q    => IApp (phi env t1 p) (phi env t2 q)
        | NLam x t, Abstraction p        => ILam (phi (extend env x) t p)


\function
psi'
    {n : Nat}
    (env : Ctx n)
    (t : ITerm n) : \Sigma (t' : NTerm) (p : TermInCtx env t') <= \elim t
        | IVar i        => (NVar (env !! i), Variable (i, idp))
        | IApp t1 t2    => (NApp (psi' env t1).1 (psi' env t2).1, Application (psi' env t1).2 (psi' env t2).2)
        | ILam t        => (NLam n (psi' (extend env n) t).1, Abstraction (psi' (extend env n) t).2)


\function
psi
    {n : Nat}
    (t : ITerm n) : \Sigma (env : Ctx n) (t' : NTerm) (proof : TermInCtx env t') => (gen_env n, (psi' (gen_env n) t).1, (psi' (gen_env n) t).2)


\function
phi-respects-alpha-eq
    {n : Nat}
    (env1 env2 : Ctx n)
    (t1 t2 : NTerm)
    (p1 : TermInCtx env1 t1)
    (p2 : TermInCtx env2 t2)
    (proof : AlphaEq env1 t1 p1 env2 t2 p2) : (phi env1 t1 p1) = (phi env2 t2 p2) <= \elim t1, t2, p1, p2, proof
        | NVar x, NVar y, Variable p, Variable q, VarEq r                         => pmap IVar r
        | NApp t1 s1, NApp t2 s2, Application p1 q1, Application p2 q2, AppEq p q => \let
                                                                                     | pr1 => phi-respects-alpha-eq env1 env2 t1 t2 p1 p2 p
                                                                                     | pr2 => phi-respects-alpha-eq env1 env2 s1 s2 q1 q2 q
                                                                                   \in pmap2 IApp pr1 pr2
        | NLam x t1, NLam y t2, Abstraction p1, Abstraction p2, LamEq p           => \let
                                                                                     | pr => phi-respects-alpha-eq (extend env1 x) (extend env2 y) t1 t2 p1 p2 p
                                                                                   \in pmap ILam pr


\function
phi-psi-id
    {n : Nat}
    (t : ITerm n) : phi (psi t).1 (psi t).2 (psi t).3 = t <= \elim t
        | IVar i     => idp
        | IApp t1 t2 => pmap2 IApp (phi-psi-id t1) (phi-psi-id t2)
        | ILam t     => pmap ILam (phi-psi-id t)


\function
psi-phi-id
    {n : Nat}
    (t : NTerm)
    (env : Ctx n)
    (proof : TermInCtx env t) : (AlphaEq (psi (phi env t proof)).1 (psi (phi env t proof)).2 (psi (phi env t proof)).3 env t proof) <= \elim t, proof
        | NVar x, Variable p           => VarEq idp
        | NApp t1 t2, Application p q  => AppEq (psi-phi-id t1 env p) (psi-phi-id t2 env q)
        | NLam x t, Abstraction p      => LamEq (psi-phi-id t (extend env x) p)


\function
alpha
    {n : Nat}
    (t : ITerm n) : FTerm (Fun n) <= \elim t
        | IVar i        => FVar (from-fin i)
        | IApp t1 t2    => FApp (alpha t1) (alpha t2)
        | ILam t        => FLam (alpha t)


\function
beta
    {n : Nat}
    (t : FTerm (Fun n)) : ITerm n <= \elim t
        | FVar f        => IVar (to-fin f)
        | FApp t1 t2    => IApp (beta t1) (beta t2)
        | FLam t        => ILam (beta {suc n} t)


\function
alpha-beta-id
    {n : Nat}
    (t : FTerm (Fun n)) : alpha (beta t) = t <= \elim t
        | FVar f        => pmap FVar (from-to-fin-id f)
        | FApp t1 t2    => pmap2 FApp (alpha-beta-id t1) (alpha-beta-id t2)
        | FLam t        => pmap FLam (alpha-beta-id {suc n} t)


\function
beta-alpha-id
    {n : Nat}
    (t : ITerm n) : beta (alpha t) = t <= \elim t
        | IVar i        => pmap IVar (to-from-fin-id i)
        | IApp t1 t2    => pmap2 IApp (beta-alpha-id t1) (beta-alpha-id t2)
        | ILam t        => pmap ILam (beta-alpha-id t)
