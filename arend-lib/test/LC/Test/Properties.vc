\open ::Combinators
\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths

\open ::LC::Test::Relation
\open ::LC::Test::Subst
\open ::LC::Test::Term


\function
subst-respects-alpha-eq
    (t1 t2 : Term)
    (x : Nat)
    (s : Term)
    (p : t1 `AlphaEq` t2) : subst t1 x s `AlphaEq` subst t2 x s => {?}


\function
subst-right-unit-var-helper
    (v x : Nat)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d (Var x) (Var v)) (Var v) <= \elim d
        | inr pro => VarEq (inv pro)
        | inl con => VarEq idp


\function
subst-right-unit-lam-helper
    (v x : Nat)
    (t : Term)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d  (Lam v t) (lam-helper v (Var x) (var-helper-is-free-dec v x d) (Lam (suc v) (subst' t x (Var x) (\lam z => \case (z =? v) | inr pro => suc v | inl con => z))) (Lam v (subst t x (Var x))))) (Lam v t) <= \elim d
        | inr pro => LamEq (subst-right-unit t v)
        | inl con => LamEq {?}


\function
subst-right-unit
   (t : Term)
   (x : Nat) : subst t x (Var x) `AlphaEq` t <= \elim t
        | Var v     => subst-right-unit-var-helper v x (v =? x)
        | App t1 t2 => AppEq (subst-right-unit t1 x) (subst-right-unit t2 x)
        | Lam v t   => subst-right-unit-lam-helper v x t (v =? x)
