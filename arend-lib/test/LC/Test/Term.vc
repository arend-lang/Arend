\open ::Combinators
\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths


\data Term
    | Var Nat
    | App Term Term
    | Lam Nat Term


\data
IsFree (x : Nat) (t : Term)
    | IsFree x (Var v) 	    => VarIsFree (p : x = v)
    | IsFree x (App t1 t2)  => AppLeftIsFree (p : IsFree x t1)
    | IsFree x (App t1 t2)  => AppRightIsFree (p : IsFree x t2)
    | IsFree x (App t1 t2)  => AppBothIsFree (p : IsFree x t1) (q : IsFree x t2)
    | IsFree x (Lam v t) 	=> LamIsFree (p : x != v) (q : IsFree x t)


\function
var-helper-is-free-dec
    (x v : Nat)
    (d : Dec (x = v)) : Dec (IsFree x (Var v)) <= \elim d
        | inr pro => inr (VarIsFree pro)
        | inl con => inl (\lam p => \case p | VarIsFree q => con q)


\function
app-helper-is-free-dec
    (x : Nat)
    (t1 t2 : Term)
    (d1 : Dec (IsFree x t1))
    (d2 : Dec (IsFree x t2)) : Dec (IsFree x (App t1 t2)) <= \elim d1, d2
        | inr pro1, inr pro2 => inr (AppBothIsFree pro1 pro2)
        | inr pro1, inl con2 => inr (AppLeftIsFree pro1)
        | inl con1, inr pro2 => inr (AppRightIsFree pro2)
        | inl con1, inl con2 => inl (\lam p => \case p | AppLeftIsFree q1 => con1 q1 | AppRightIsFree q2 => con2 q2 | AppBothIsFree p1 q1 => con1 p1)


\function
lam-helper-is-free-dec
    (x v : Nat)
    (t : Term)
    (dv : Dec (x = v))
    (dt : Dec (IsFree x t)) : Dec (IsFree x (Lam v t)) <= \elim dv
        | inr pro => inl (\lam p => \case p | LamIsFree p q => p pro)
        | inl con => \case dt
            | inr pro => inr (LamIsFree con pro)
            | inl con => inl (\lam p => \case p | LamIsFree p q => con q)


\function
isFreeDec
    (x : Nat)
    (t : Term) : Dec (IsFree x t) <= \elim t
        | Var v        => var-helper-is-free-dec x v (x =? v)
        | App t1 t2    => app-helper-is-free-dec x t1 t2 (isFreeDec x t1) (isFreeDec x t2)
        | Lam v t      => lam-helper-is-free-dec x v t (x =? v) (isFreeDec x t)
