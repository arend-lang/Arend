\import Combinators
\import Data.Bool
\import Data.Either
\import Data.Empty
\import Data.Fin
\import Data.Nat.Base
\import Data.Nat.Compare
\import Data.Unit
\import Logic
\import Paths

\import LC.Test.Relation
\import LC.Test.Subst
\import LC.Test.Term


\func
subst-respects-alpha-eq
    (t1 t2 : Term)
    (x : Nat)
    (s : Term)
    (p : t1 `AlphaEq` t2) : subst t1 x s `AlphaEq` subst t2 x s => {?}


\func
subst-right-unit-var-helper
    (v x : Nat)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d (Var x) (Var v)) (Var v) \elim d
        | inr pro => VarEq (inv pro)
        | inl con => VarEq idp


\func
subst-right-unit-lam-helper
    (v x : Nat)
    (t : Term)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d  (Lam v t) (lam-helper v (Var x) (var-helper-is-free-dec v x d) (Lam (suc v) (subst' t x (Var x) (\lam z => \case (z =? v) \with { | inr pro => suc v | inl con => z }))) (Lam v (subst t x (Var x))))) (Lam v t) \elim d
        | inr pro => LamEq (subst-right-unit t v)
        | inl con => LamEq {?}


\func
subst-right-unit
   (t : Term)
   (x : Nat) : subst t x (Var x) `AlphaEq` t \elim t
        | Var v     => subst-right-unit-var-helper v x (v =? x)
        | App t1 t2 => AppEq (subst-right-unit t1 x) (subst-right-unit t2 x)
        | Lam v t   => subst-right-unit-lam-helper v x t (v =? x)
