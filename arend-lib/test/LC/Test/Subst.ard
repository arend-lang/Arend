\import Combinators
\import Data.Bool
\import Data.Either
\import Data.Empty
\import Data.Fin
\import Data.Nat.Base
\import Data.Nat.Compare
\import Data.Unit
\import Logic
\import Paths


\import LC.Test.Term


\func
var-helper
	(n m : Nat)
	(d : Dec (n = m))
	(t1 : Term)
	(t2 : Term) : Term \elim d
		| inr pro => t1
        | inl con => t2


\func
lam-helper
    (x : Nat)
    (s : Term)
    (d : Dec (IsFree x s))
    (t1 : Term)
    (t2 : Term) : Term \elim d
        | inr pro => t1
        | inl con => t2


\func
subst'
    (t : Term)
    (y : Nat)
    (s : Term)
    (rho : Nat -> Nat) : Term \elim t
        | Var x     => var-helper (rho x) y (rho x =? y) s (Var (rho x))
        | App t1 t2 => App (subst' t1 y s rho) (subst' t2 y s rho)
        | Lam x t   => var-helper (rho x) y (rho x =? y) (Lam x t) (lam-helper x s (isFreeDec x s) (Lam (suc x) (subst' t y s (\lam z => \case (z =? x) \with { | inr pro => suc x | inl con => rho z } ))) (Lam x (subst' t y s rho)))


\func
subst
    (t : Term)
    (y : Nat)
    (s : Term) : Term => subst' t y s id
