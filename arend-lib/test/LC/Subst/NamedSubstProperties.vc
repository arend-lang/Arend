\open ::LC::Relation::AlphaEq
\open ::LC::Subst::Subst
\open ::LC::Term::Term
\open ::LC::Util::RVec


\open ::Combinators
\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths


-- Named substitution properties

-- nsubst (nsubst t x (Var x)) v (Var v) = t
-- nsubst (nsubst t x (Var x)) v (Var v) = (nsubst t x (Var x)) = t

\function
nsubst-right-unit-lam-helper
    (v x : Nat)
    (t : NTerm)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d  (NLam v t) (lam-helper v (NVar x) (var-helper-is-free-dec v x d) (NLam (suc v) (nsubst' t x (NVar x) (\lam z => \case z =? v | inr p => suc v | inl np => z;))) (NLam v (nsubst t x (NVar x))))) (NLam v t) <= \elim d
        | inr pro => LamEq (nsubst-right-unit t v)
        | inl con => LamEq {?} --(alpha-eq-trans (nsubst-right-unit (nsubst t x (NVar x)) v) (nsubst-right-unit t x))


\function
nsubst-right-unit-var-helper
    (v x : Nat)
    (d : Dec (v = x)) : AlphaEq (var-helper v x d (NVar x) (NVar v)) (NVar v) <= \elim d
        | inr pro => VarEq (inv pro)
        | inl con => VarEq idp


\function
nsubst-left-unit-helper
    (t : NTerm)
    (x : Nat)
    (d : Dec (x = x)) : AlphaEq (var-helper x x d t (NVar x)) t <= \elim d
        | inr pro => alpha-eq-refl
        | inl con => absurd (con (idpe x))


\function
nsubst-right-unit
   (t : NTerm)
   (x : Nat) : nsubst t x (NVar x) `AlphaEq` t <= \elim t
        | NVar v     => nsubst-right-unit-var-helper v x (v =? x)
        | NApp t1 t2 => AppEq (nsubst-right-unit t1 x) (nsubst-right-unit t2 x)
        | NLam v t   => nsubst-right-unit-lam-helper v x t (v =? x)


\function
nsubst-left-unit
    (t : NTerm)
    (x : Nat) : nsubst (NVar x) x t `AlphaEq` t => nsubst-left-unit-helper t x (x =? x)


\function
nsubst-respects-alpha-eq
    (t1 t2 : NTerm)
    (x : Nat)
    (s : NTerm)
    (p : t1 `AlphaEq` t2) : nsubst t1 x s `AlphaEq` nsubst t2 x s => {?} {-<= \elim t1, t2, p
        | NVar x, NVar y, VarEq pr          => {?}
        | NApp t1 s1, NApp t2 s2, AppEq p q => {?}
        | NLam x1 t1, NLam x2 t2, LamEq p   => {?}-}


\function
nsubst-inv
    (t : NTerm)
    (x y z : Nat) : nsubst (nsubst t x (NVar y)) y (NVar z) `AlphaEq` (nsubst t x (NVar z)) => {?} {-<= \elim t
        | NVar v     => {?}
        | NApp t s   => {?}
        | NLam v t   => {?}-}
