\open ::LC::Relation::AlphaEq
\open ::LC::Subst::Subst
\open ::LC::Term::Term
\open ::LC::Util::RVec


\open ::Combinators
\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::List \hiding (concat, snoc)
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths


-- Named substitution properties

{-
\function
nsubst-right-unit-var-helper 
    (v x : Nat)
    (d : Dec (x = v)) : AlphaEq (lookup-helper v (x, NVar x) nil d) (NVar v) <= \elim d
        | inr pro => VarEq pro
        | inl con => VarEq idp
-}


\function
nsubst-right-unit-var-helper
    (v x : Nat)
    (d : Dec (x = v)) : AlphaEq (\case d | inr _ => NVar x | inl _ => NVar v) (NVar v) <= \elim d
        | inr pro => VarEq pro
        | inl con => VarEq idp


\function
nsubst-right-unit
   (t : NTerm)
   (x : Nat) : nsubst t (singleton (x, (NVar x))) `AlphaEq` t <= \elim t
        | NVar v     => nsubst-right-unit-var-helper v x (x =? v) 
        | NApp t1 t2 => AppEq (nsubst-right-unit t1 x) (nsubst-right-unit t2 x)
        | NLam v t   => LamEq {?}

{-
\function
nsubst-left-unit-helper
    (x : Nat)
    (t : NTerm)
    (d : Dec (x = x)) : AlphaEq (lookup-helper x (x, t) nil d) t <= \elim d
        | inr pro => alpha-eq-refl
        | inl con => absurd (con idp)

\function
nsubst-left-unit
    (t : NTerm)
    (x : Nat) : nsubst (NVar x) (singleton (x, t)) `AlphaEq` t => nsubst-left-unit-helper x t (x =? x) 
-}
{-
\function
nsubst-assoc
    (t N M : NTerm)
    (x y : Nat)
    (p : Not (x = y))
    (pr : Not (IsFree x M)) : nsubst (nsubst t x N) y M `AlphaEq` nsubst (nsubst t y M) x (nsubst N y M) => {?}
-}
