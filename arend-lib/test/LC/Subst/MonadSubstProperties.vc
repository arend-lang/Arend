\open ::LC::Subst::Subst
\open ::LC::Term
\open ::LC::RVec

\open ::Combinators
\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths


-- All monadic stuff

--  fmap props

\function
map-inl-respects-id
    {L R : \Type}
    (e : Either L R) : map-inl (\lam x => x) e = e <= \elim e
        | inl l => idp
        | inr r => idp


\function
map-inl-respects-comp
    {A B C R : \Type}
    (f : A -> B)
    (g : B -> C)
    (e : Either A R) : map-inl g (map-inl f e) = map-inl (g `o` f) e <= \elim e
        | inl l => idp
        | inr r => idp


\function
fmap-respects-id
    {V : \Type}
    (t : FTerm V) : fmap (\lam x => x) t = t <= \elim t
        | FVar v => idp
        | FApp t1 t2 => pmap2 FApp (fmap-respects-id t1) (fmap-respects-id t2)
        | FLam t => \let
                        | rec => fmap-respects-id t
                        | fext => funExt (\lam _ => Either V Unit) (\lam x => x) (map-inl (\lam x => x)) (\lam e => inv (map-inl-respects-id e))
                        | rect => transport (\lam x => fmap {Either V Unit} {Either V Unit} x t = t) fext rec
                    \in pmap FLam rect


\function
fmap-respects-comp
    {A B C : \Type}
    (f : A -> B)
    (g : B -> C)
    (t : FTerm A) : fmap g (fmap f t) = fmap (g `o` f) t <= \elim t
        | FVar v => idp
        | FApp t1 t2 => pmap2 FApp (fmap-respects-comp f g t1) (fmap-respects-comp f g t2)
        | FLam t => \let
                        | rec => fmap-respects-comp (map-inl {A} {B} {Unit} f) (map-inl {B} {C} {Unit} g) t
                        | fext => funExt (\lam _ => Either C Unit) (\lam x => map-inl {B} {C} {Unit} g (map-inl {A} {B} f x)) (map-inl (g `o` f)) (map-inl-respects-comp f g)
                        | trrec => transport (\lam x => fmap (map-inl {B} {C} {Unit} g) (fmap (\lam (e : Either A Unit) => map-inl {A} {B} {Unit} f e) t) = fmap x t) fext rec
                    \in pmap FLam trrec


-- Helper lemmata

\function
return-right-unit-funext-helper
    {V : \Type}
    (e : Either V Unit) : return e = (bind-fun-helper return) e <= \elim e
        | inl v => idp
        | inr unit => idp


\function
Telescope
    (n : Nat)
    (A : \Type) : \Type <= \elim n
        | zero  => A
        | suc n => Either (Telescope n A) Unit


\function
map-inl-iterate
    {A : \Type}
    (n : Nat) : Telescope n A -> Telescope (suc n) A <= \elim n
        | zero  => inl
        | suc n => map-inl {Telescope n A} {Either (Telescope n A) Unit} {Unit} (map-inl-iterate n)


\function
bind-fun-helper-iterate
    {A B : \Type}
    (n : Nat)
    (f : A -> FTerm B) : Telescope n A -> FTerm (Telescope n B) <= \elim n
        | zero  => f
        | suc n => bind-fun-helper (bind-fun-helper-iterate n f)


{-
fmap {Either (Either A Unit) Unit} {Either (Either (Either A Unit) Unit) Unit} (map-inl {Either A Unit} {Either (Either A Unit) Unit} {Unit} inl) (fmap {Either A Unit} {Either (Either A Unit) Unit} (map-inl {A} {Either A Unit} {Unit} inl) t) =
fmap {Either (Either A Unit) Unit} {Either (Either (Either A Unit) Unit) Unit} (map-inl {Either A Unit} {Either (Either A Unit) Unit} {Unit} (map-inl {A} {Either A Unit} {Unit} inl) (fmap {Either A Unit} {Either (Either A Unit) Unit} (map-inl {A} {Either A Unit} {Unit} inl) t)

fmap {Either (Either A Unit) Unit} {Either (Either (Either A Unit) Unit) Unit} inl (fmap {Either A Unit} {Either (Either A Unit) Unit} inl t) =
fmap {Either (Either A Unit) Unit} {Either (Either (Either A Unit) Unit) Unit} (map-inl {Either A Unit} {Either (Either A Unit) Unit} {Unit} inl) (fmap {Either A Unit} {Either (Either A Unit) Unit} inl t)
-}

\function
bind-fun-helper-fmap-comm-helper'
    {A : \Type}
    (n : Nat)
    (t : FTerm (Telescope n A)) : fmap (map-inl-iterate n) (fmap (map-inl-iterate n) t) = fmap (map-inl-iterate (suc n)) (fmap (map-inl-iterate n) t) <= \elim n, t
        | zero, FVar a          => idp
        | suc n, FVar a         => idp
        | _, FApp t1 t2         => pmap2 FApp (bind-fun-helper-fmap-comm-helper' n t1) (bind-fun-helper-fmap-comm-helper' n t2)
        | _, FLam t             =>  \let
                                        | rec => bind-fun-helper-fmap-comm-helper' (suc n) t
                                    \in pmap FLam (bind-fun-helper-fmap-comm-helper' (suc n) t)

\function
bind-fun-helper-fmap-comm-helper
    {A : \Type}
    (t : FTerm A) : fmap {Either A Unit} {Either (Either A Unit) Unit} inl (fmap {A} {Either A Unit} inl t) = fmap {Either A Unit} {Either (Either A Unit) Unit} (map-inl inl) (fmap {A} {Either A Unit} inl t) <= \elim t
        | FVar a        => idp
        | FApp t1 t2    => pmap2 FApp (bind-fun-helper-fmap-comm-helper t1) (bind-fun-helper-fmap-comm-helper t2)
        | FLam t        =>  \let
                                | rec => bind-fun-helper-fmap-comm-helper t
                            \in pmap FLam {?}


\function
bind-fun-helper-fmap-comm
    {A B : \Type}
    (f : A -> FTerm B)
    (x : Either A Unit) : bind-fun-helper (bind-fun-helper f) (map-inl inl x) = fmap (map-inl inl) (bind-fun-helper f x) <= \elim x
        | inl a     => bind-fun-helper-fmap-comm-helper (f a)
        | inr unit  => idp


\function
bind-fmap-comm-lhs
    {A B : \Type}
    (t : FTerm (Either A Unit))
    (f : A -> FTerm B) : bind (fmap (map-inl inl) t) (bind-fun-helper (bind-fun-helper f)) = bind t (\lam x => bind-fun-helper (bind-fun-helper f) (map-inl inl x)) <= \elim t
        | FVar (inl a)      => idp
        | FVar (inr unit)   => idp
        | FApp t1 t2        => pmap2 FApp (bind-fmap-comm-lhs t1 f) (bind-fmap-comm-lhs t2 f)
        | FLam t            =>  \let
                                    | rec => bind-fmap-comm-lhs t (bind-fun-helper f)
                                \in pmap FLam {?}


\function
bind-fmap-comm-rhs
    {A B : \Type}
    (t : FTerm (Either A Unit))
    (f : A -> FTerm B) : fmap {Either B Unit} {Either (Either B Unit) Unit} (map-inl inl) (bind t (bind-fun-helper f)) = bind t (\lam x => fmap (map-inl inl) (bind-fun-helper f x)) <= \elim t
        | FVar (inl a)      => idp
        | FVar (inr unit)   => idp
        | FApp t1 t2        => pmap2 FApp (bind-fmap-comm-rhs t1 f) (bind-fmap-comm-rhs t2 f)
        | FLam t            =>  \let
                                    | rec => bind-fmap-comm-rhs t (bind-fun-helper f)
                                \in pmap FLam {?}


\function
bind-fmap-comm
    {A B : \Type}
    (t : FTerm  A)
    (f : A -> FTerm B) : bind (fmap {A} {Either A Unit} inl t) (bind-fun-helper f) = fmap {B} {Either B Unit} inl (bind t f) <= \elim t
        | FVar v        => idp
        | FApp t1 t2    => pmap2 FApp (bind-fmap-comm t1 f) (bind-fmap-comm t2 f)
        | FLam t        => \let
                                | lhs => bind-fmap-comm-lhs t f
                                | rhs => bind-fmap-comm-rhs t f
                                | fext => funExt (\lam _ => FTerm (Either (Either B Unit) Unit)) (\lam x => bind-fun-helper (bind-fun-helper f) (map-inl inl x)) (\lam x => fmap (map-inl inl) (bind-fun-helper f x)) (bind-fun-helper-fmap-comm f)
                                | trans => lhs *> (pmap (bind t) fext) *> (inv rhs)
                           \in pmap FLam trans


\function
bind-assoc-funext-helper
    {A B C : \Type}
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (x : Either A Unit) : bind ((bind-fun-helper f) x) (bind-fun-helper g) = bind-fun-helper (\lam a => bind (f a) g) x <= \elim x
        | inl a     => bind-fmap-comm (f a) g
        | inr unit  => idp


-- Proofs

\function
return-right-unit
    {V : \Type}
    (t : FTerm V) : t `bind` return = t <= \elim t
        | FVar v        => idp
        | FApp t1 t2    => pmap2 FApp (return-right-unit t1) (return-right-unit t2)
        | FLam t        =>  \let
                                | rec       => return-right-unit t
                                | funext    => funExt (\lam _ => FTerm (Either V Unit)) return (bind-fun-helper return) return-right-unit-funext-helper
                                | trrec     => transport (\lam x => bind t x = t) funext rec
                            \in pmap FLam trrec


\function
return-left-unit
    {V W : \Type}
    (x : V)
    (k : V -> FTerm W) : ((return x) `bind` k = k x) => idp


\function
bind-assoc
    {A B C : \Type}
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (t : FTerm A) : (t `bind` f) `bind` g = t `bind` (\lam x => (f x) `bind` g) <= \elim t
        | FVar v        => idp
        | FApp t1 t2    => pmap2 FApp (bind-assoc f g t1) (bind-assoc f g t2)
        | FLam t        =>  \let
                                | f'    => bind-fun-helper f
                                | g'    => bind-fun-helper g
                                | rec   => bind-assoc f' g' t
                                | fext  => funExt (\lam _ => FTerm (Either C Unit)) (\lam x => (f' x) `bind` g') (bind-fun-helper (\lam x => (f x) `bind` g)) (bind-assoc-funext-helper f g)
                                | trrec => transport (\lam x => (t `bind` f') `bind` g' = t `bind` x) fext rec
                            \in pmap FLam trrec
