\open ::LC::Subst::Subst
\open ::LC::Term

\open ::Data::Either
\open ::Data::Unit
\open ::Paths

-- Lemmata


\function
fun-helper-return-lemma
    {V : \Type}
    (n : Nat)
    (t : Telescope (suc n) V) : fun-helper n (return-helper n) t = FVar t <= \elim t
        | inl x => idp
        | inr unit => idp


\function
return-right-unit-lemma
    {V : \Type}
    (n : Nat)
    (t : FTerm (Telescope n V)) : bind-helper n t (return-helper n) = t <= \elim t
        | FVar x        => {?}
        | FApp t1 t2    => pmap2 FApp (return-right-unit-lemma n t1) (return-right-unit-lemma n t2)
        | FLam t        => pmap FLam {?}
{-
                            \let
                                | a => fun-helper {V} {V} n (return-helper n)
                                | b => return-helper {V} (suc n)
                                | p => return-right-unit-lemma (suc n) t
                                | q => fun-helper-return-lemma {V} n
                                | f_ext => funExt (\lam _ => FTerm (Telescope (suc n) V)) a b q
                            \in pmap FLam (transport (\lam a => bind-helper (suc n) t a = t) (inv f_ext) p)
-}

\function
bind-assoc-lemma
    {A B C : \Type}
    (n : Nat)
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (t : FTerm (Telescope n A)) : bind-helper n (bind-helper n t f) g = bind-helper n t (\lam x => bind-helper n (f x) g) <= \elim t
        | FVar t        => {?}
        | FApp t1 t2    => pmap2 FApp (bind-assoc-lemma n f g t1) (bind-assoc-lemma n f g t2)
        | FLam t        => pmap FLam {?}

-- Proofs

\function
return-right-unit
    {V : \Type}
    (t : FTerm V) : t `bind` return = t => return-right-unit-lemma 0 t


\function
return-left-unit
    {V W : \Type}
    (x : V)
    (k : V -> FTerm W) : ((return x) `bind` k = k x) => idp


\function
bind-assoc
    {A B C : \Type}
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (t : FTerm A) : (t `bind` f) `bind` g = t `bind` (\lam x => (f x) `bind` g) => bind-assoc-lemma zero f g t
