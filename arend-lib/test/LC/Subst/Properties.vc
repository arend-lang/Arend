\open ::LC::Subst::Subst
\open ::LC::Term
\open ::LC::RVec

\open ::Data::Bool
\open ::Data::Either
\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Unit
\open ::Logic
\open ::Paths


-- All named stuff
{-
\function
nsubst-right-unit-var-helper
    (y x : Nat)
    (d : Dec (y = x)) : var-helper y x d (NVar x) (NVar y) = NVar y <= \elim d
        | inr pro       => pmap NVar (inv pro)
        | inl contra    => idpe (NVar y)


\function
nsubst-right-unit-lam-helper
    (y x : Nat)
    (t : NTerm)
    (dv : Dec (y = x)) : lam-helper y (NVar x) (var-helper-is-free-dec y x dv) (NLam (suc y) (nsubst' t x (NVar x) (\lam z => \case z =? y | inr p => suc y | inl np => z))) (NLam y (nsubst' t x (NVar x) (\lam x' => x'))) = NLam y t <= \elim dv
        | inr pro       => transport (\lam k => lam-helper x (NVar x) (var-helper-is-free-dec x x (x =? x)) (NLam (suc x) (nsubst' t x (NVar x) (\lam z => (\case z =? k | inr _ => suc k | inl _ =>  z)))) (NLam x (nsubst' t x (NVar x) (\lam x  => x))) = NLam x t) (inv pro) (nsubst-right-unit (NLam x t) x)
        | inl contra    => pmap (NLam y) (nsubst-right-unit t x)


\function
nsubst-right-unit
    (t : NTerm)
    (x : Nat) : nsubst t x (NVar x) = t <= \elim t
        | NVar y        => nsubst-right-unit-var-helper y x (y =? x)
        | NApp t1 t2    => pmap2 NApp (nsubst-right-unit t1 x) (nsubst-right-unit t2 x)
        | NLam y t      => nsubst-right-unit-lam-helper y x t (y =? x)
-}

\function
nsubst-left-unit-helper
    (x : Nat)
    (d : Dec (x = x))
    (t : NTerm) : var-helper x x d t (NVar x) = t <= \elim d
        | inr idp       => idpe t
        | inl contra    => absurd (contra (idpe x))


\function
nsubst-left-unit
    (x : Nat)
    (t : NTerm) : nsubst (NVar x) x t = t => nsubst-left-unit-helper x (x =? x) t

{-
\function
nsubst-assoc
    (t : NTerm)
    (x y : Nat)
    (M N : NTerm)
    (p : IsFree x t)
    (q : IsFree x M -> Empty) : nsubst (nsubst t x p N) y _ M = nsubst (nsubst t y _ M) x _ (nsubst N y _ M) <= \elim t
		| NVar v 		=> {?}
		| NApp t1 t2 	=> {?} --pmap2 NApp (nsubst-assoc t1 x y M N p) (nsubst-assoc t2 x y M N p)
		| NLam v t 		=> {?}
-}

\function
plus-one-is-suc
    (n : Nat) : n + 1 = suc n <= \elim n
        | zero => idp
        | suc n => pmap suc (plus-one-is-suc n)


\function
gen-fins
    (n : Nat) : RVec n (Fin n) <= \elim n
        | zero => vnil
        | suc n => snoc (transport (\lam k => RVec n (Fin k)) (plus-one-is-suc n) (rmap (flift 1) (gen-fins n))) (from-nat n)


\function
gen-fs-test : gen-fins 2 = snoc (snoc vnil fzero) (fsuc fzero) => idp 


-- identity substitution [IVar n - 1, ..., IVar 0]
\function
gen-vars
    (n : Nat) : RVec n (ITerm n) => rmap IVar (rreverse (gen-fins n))


\function
identity2 : gen-vars 2 = snoc (snoc  vnil (IVar (fsuc fzero))) (IVar fzero) => idp


-- All index stuff

{-
\function
isubst-right-unit-var-helper 
    (n : Nat)
    (i : Fin n) : (gen-vars n) !! i = IVar i <= \elim n, i
        | suc n, fzero => {?}
        | suc n, fsuc j => {?}

\function
isubst-right-unit
    {n : Nat}
    (t : ITerm n) : isubst t (gen-vars n) = t <= \elim t
        | IVar i        => isubst-right-unit-var-helper n i
        | IApp t1 t2    => pmap2 IApp (isubst-right-unit t1) (isubst-right-unit t2)
        | ILam t        =>  \let
                                | p => isubst-right-unit t
                            \in pmap ILam {?}
-}

\function
isubst-left-unit
    {n m : Nat}
    (i : Fin n)
    (ts : RVec n (ITerm m)) : isubst (IVar i) ts = ts !! i => idp


\function
isubst-assoc-var-helper
    (n m k : Nat)
    (i : Fin n)
    (ts : RVec n (ITerm m))
    (ss : RVec m (ITerm k)) : isubst (ts !! i) ss = rmap (\lam x => isubst x ss) ts !! i <= \elim n, i, ts
        | suc n, fzero, snoc ts t   => idp
        | suc n, fsuc i, snoc ts t  => isubst-assoc-var-helper n m k i ts ss
                           
{-
\function
isubst-assoc-lam-helper
    (n m k : Nat)
    (ts : RVec n (ITerm m))
    (ss : RVec m (ITerm k)) : snoc (rmap weak (rmap (\lam x => isubst x ss) ts)) (IVar (from-nat k)) = rmap (\lam x => isubst x (snoc (rmap weak ss) (IVar (from-nat k)))) (snoc (rmap weak ts) (IVar (from-nat m))) <= \elim m, ss 
        | zero, vnil        =>  pmap2 snoc {?} idp
        | suc m, snoc ss s  => isubst-assoc-lam-helper n m k ts ss --pmap2 snoc {?} {?}
-}       


\function
subst-weak-lemma-helper
    {n m : Nat}
    (i : Fin n)
    (ss : RVec n (ITerm m)) : rmap weak ss !! i = weak (ss !! i) <= \elim n, i, ss
        | suc n, fzero, snoc ss s => idp
        | suc n, fsuc i, snoc ss s => subst-weak-lemma-helper i ss


\function
subst-weak-lemma 
    {n m : Nat}
    (t : ITerm n)
    (ss : RVec n (ITerm m)) : isubst (weak t) (snoc (rmap weak ss) (IVar (from-nat m))) = weak (isubst t ss) <= \elim t
        | IVar i => subst-weak-lemma-helper i ss
        | IApp t1 t2 => pmap2 IApp (subst-weak-lemma t1 ss) (subst-weak-lemma t2 ss)
        | ILam t => pmap ILam (subst-weak-lemma t (snoc (rmap weak ss) (IVar (from-nat m))))


{-

snoc 
    (rmap (\lam (x : ITerm (suc m)) => isubst x (snoc (rmap weak ss) (IVar (from-nat k)))) (rmap weak ts)) 
    (snoc (rmap weak ss) (IVar (from-nat k)) !! from-nat m) =
snoc
    (rmap weak (rmap (\lam (x : ITerm m) => isubst x ss) ts))
    (IVar (from-nat k))
-}

 
\function
isubst-assoc
    {n m k : Nat}
    (t : ITerm n)
    (ts : RVec n (ITerm m))
    (ss : RVec m (ITerm k)) : isubst (isubst t ts) ss = isubst t (rmap (\lam x => isubst x ss) ts) <= \elim t
        | IVar i        => isubst-assoc-var-helper n m k i ts ss
        | IApp t1 t2    => pmap2 IApp (isubst-assoc t1 ts ss) (isubst-assoc t2 ts ss)
        | ILam t        => \let
                                | ts' => snoc (rmap weak ts) (IVar (from-nat m))
                                | ss' => snoc (rmap weak ss) (IVar (from-nat k))
                                | p => isubst-assoc t ts' ss'
                                | pt => transport (\lam x => isubst (isubst t ts') ss' = isubst t x) {?} p
                            \in pmap ILam pt



-- All monadic stuff
-- Lemmata


\function
twistT-lemma
    {V : \Type}
    (n : Nat)
    (x : Telescope n V) : twistT n (fmap-telescope n FVar x) = FVar x <= \elim n
        | zero => idp
        | suc y => twistT-helper-lemma y x
            \where
                \function
                    twistT-helper-lemma
                    {V : \Type}
                    (n : Nat)
                    (e : Either (Telescope n V) Unit) : twistT (suc n) (fmap-telescope (suc n) FVar e) = FVar e <= \elim e
                        | inr unit => idp
                        | inl a => pmap (fmap inl) (twistT-lemma n a)


\function
return-right-unit-lemma
    {V : \Type}
    (n : Nat)
    (t : FTerm (Telescope n V)) : bind-helper n t return = t <= \elim t
        | FVar x        => twistT-lemma n x
        | FApp t1 t2    => pmap2 FApp (return-right-unit-lemma n t1) (return-right-unit-lemma n t2)
        | FLam t        => pmap FLam (return-right-unit-lemma (suc n) t)

{-
\function
bind-assoc-lemma
    {A B C : \Type}
    (n : Nat)
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (t : FTerm (Telescope n A)) : bind-helper n (bind-helper n t f) g = bind-helper n t (\lam x => bind (f x) g) <= \elim t
        | FVar t        => {?}
        | FApp t1 t2    => pmap2 FApp (bind-assoc-lemma n f g t1) (bind-assoc-lemma n f g t2)
        | FLam t        => pmap FLam (bind-assoc-lemma (suc n) f g t)
-}

-- Proofs

\function
return-right-unit
    {V : \Type}
    (t : FTerm V) : t `bind` return = t => return-right-unit-lemma zero t


\function
return-left-unit
    {V W : \Type}
    (x : V)
    (k : V -> FTerm W) : ((return x) `bind` k = k x) => idp

{-
\function
bind-assoc
    {A B C : \Type}
    (f : A -> FTerm B)
    (g : B -> FTerm C)
    (t : FTerm A) : (t `bind` f) `bind` g = t `bind` (\lam x => (f x) `bind` g) => bind-assoc-lemma zero f g t
-}
