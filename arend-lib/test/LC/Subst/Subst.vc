\open ::LC::Term
\open ::LC::Ctx
\open ::LC::Properties
\open ::LC::RVec

\open ::Data::Bool
\open ::Data::Either
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Unit

\open ::Paths


\function
(==) (n m : Nat) : Bool <= \elim n, m
    | zero, zero    => true
    | zero, suc _   => false
    | suc _, zero   => false
    | suc n, suc m  => n == m


\function
isFree
    (x : Nat)
    (t : NTerm) : Bool <= \elim t
        | NVar v        => x == v
        | NApp t1 t2    => (isFree x t1) `or` (isFree x t2)
        | NLam v t      => if (v == x) false (isFree x t)


\function
nsubst'
    (t : NTerm)
    (y : Nat)
    (s : NTerm)
    (rho : Nat -> Nat) : NTerm <= \elim t
        | NVar x     => if (rho x == y) s (NVar (rho x))
        | NApp t1 t2 => NApp (nsubst' t1 y s rho) (nsubst' t2 y s rho)
        | NLam x t   => if (isFree x s) (NLam (suc x) (nsubst' t y s (\lam z => if (z == y) (suc x) (rho y)))) (NLam x (nsubst' t y s rho))


\function
nsubst
    (t : NTerm)
    (y : Nat)
    (s : NTerm) : NTerm => nsubst' t y s (\lam x => x)


\function
weak
    {n : Nat}
    (t : ITerm n)
    (m : Nat) : ITerm (n + m) <= \elim t
        | IVar i => IVar (flift m i)
        | IApp t1 t2 => IApp (weak t1 m) (weak t2 m)
        | ILam t => ILam (weak t m)


\function
suc-is-plus-one (n : Nat) : suc n = n + 1 <= \elim n
    | zero => idp
    | suc n => pmap suc (suc-is-plus-one n)


\function
isubst
    {n m : Nat}
    (t : ITerm n)
    (ss : RVec n (ITerm m)) : ITerm m <= \elim t
        | IVar i        => ss !! i
        | IApp t1 t2    => IApp (isubst t1 ss) (isubst t2 ss)
        | ILam t        =>  \let
                                | ss' => transport (\lam k => RVec n (ITerm k)) (inv (suc-is-plus-one m)) (rmap (\lam s => weak s 1) ss)
                                | ss'' => snoc ss' (IVar (from-nat m))
                                | t' => isubst t ss''
                            \in ILam t'


\function
fmap
    {V W : \Type}
    (f : V -> W)
    (t : FTerm V) : FTerm W <= \elim t
        | FVar v        => FVar (f v)
        | FApp t1 t2    => FApp (fmap f t1) (fmap f t2)
        | FLam t        => FLam (fmap (map-inl f) t)

\function
return
    {V : \Type}
    (v : V) : FTerm V => FVar v


-- Something like Fun n, but parametrized with some type
-- God damn it, i have no idea how to name these types
\function
Telescope
    (n : Nat)
    (V : \Type) : \Type <= \elim n
        | zero  => V
        | suc n => Either (Telescope n V) Unit


\function
fmap-telescope-helper
    {V W : \Type}
    (n : Nat)
    (f : V -> W)
    (x : Either (Telescope n V) Unit) : Either (Telescope n W) Unit <= \elim x
        | inl y     => inl (fmap-telescope n f y)
        | inr unit  => inr unit


\function
fmap-telescope
    {V W : \Type}
    (n : Nat)
    (f : V -> W)
    (x : Telescope n V) : Telescope n W <= \elim n
        | zero  => f x
        | suc n => fmap-telescope-helper n f x


-- T is for Telescope
\function
    twistT-helper
    {V : \Type}
    (n : Nat)
    (t : Either (Telescope n (FTerm V)) Unit) : FTerm (Either (Telescope n V) Unit) <= \elim t
        | inl x => fmap {Telescope n V} {Either (Telescope n V) Unit} inl (twistT n x)
        | inr unit => FVar (inr unit)


\function
twistT
    {V : \Type}
    (n : Nat)
    (x : Telescope n (FTerm V)) : FTerm (Telescope n V) <= \elim n
        | zero  => x
        | suc n => twistT-helper n x


\function
bind-helper
    {V W : \Type}
    (n : Nat)
    (t : FTerm (Telescope n V))
    (k : V -> FTerm W) : FTerm (Telescope n W) <= \elim t
        | FVar x        => twistT n (fmap-telescope n k x)
        | FApp t1 t2    => FApp (bind-helper n t1 k) (bind-helper n t2 k)
        | FLam t        => FLam (bind-helper (suc n) t k)


\function
bind
    {V W : \Type}
    (t : FTerm V)
    (k : V -> FTerm W) : FTerm W => bind-helper zero t k
