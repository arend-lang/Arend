\import LC.Relation.Fresh
\import LC.Term.Term
\import LC.Util.Ctx
\import LC.Util.RVec

\import Combinators
\import Data.Bool
\import Data.Either
\import Data.Empty
\import Data.Fin
\import Data.List \hiding(concat, snoc)
\import Data.Nat.Base
\import Data.Nat.Compare
\import Data.Unit
\import Logic
\import Paths


\data
IsFree (x : Nat) (t : NTerm) \elim t
    | NVar v 	 => VarIsFree (p : x = v)
    | NApp t1 t2 => AppLeftIsFree (p : IsFree x t1)
    | NApp t1 t2 => AppRightIsFree (p : IsFree x t2)
    | NApp t1 t2 => AppBothIsFree (p : IsFree x t1) (q : IsFree x t2)
    | NLam v t 	 => LamIsFree (p : x != v) (q : IsFree x t)


\func
var-helper-is-free-dec
    (x v : Nat)
    (d : Dec (x = v)) : Dec (IsFree x (NVar v)) \elim d
        | inr pro => inr (VarIsFree pro)
        | inl con => inl (\lam p => \case p \with { | VarIsFree q => con q })


\func
app-helper-is-free-dec
    (x : Nat)
    (t1 t2 : NTerm)
    (d1 : Dec (IsFree x t1))
    (d2 : Dec (IsFree x t2)) : Dec (IsFree x (NApp t1 t2)) \elim d1, d2
        | inr pro1, inr pro2 => inr (AppBothIsFree pro1 pro2)
        | inr pro1, inl con2 => inr (AppLeftIsFree pro1)
        | inl con1, inr pro2 => inr (AppRightIsFree pro2)
        | inl con1, inl con2 => inl (\lam p => \case p \with { | AppLeftIsFree q1 => con1 q1 | AppRightIsFree q2 => con2 q2 | AppBothIsFree p1 q1 => con1 p1 })


\func
lam-helper-is-free-dec
    (x v : Nat)
    (t : NTerm)
    (dv : Dec (x = v))
    (dt : Dec (IsFree x t)) : Dec (IsFree x (NLam v t)) \elim dv
        | inr pro => inl (\lam p => \case p \with { | LamIsFree p q => p pro })
        | inl con => \case dt \with {
                | inr pro => inr (LamIsFree con pro)
                | inl con => inl (\lam p => \case p \with { | LamIsFree p q => con q })
            }


\func
isFreeDec
    (x : Nat)
    (t : NTerm) : Dec (IsFree x t) \elim t
        | NVar v        => var-helper-is-free-dec x v (x =? v)
        | NApp t1 t2    => app-helper-is-free-dec x t1 t2 (isFreeDec x t1) (isFreeDec x t2)
        | NLam v t      => lam-helper-is-free-dec x v t (x =? v) (isFreeDec x t)


-- t[x -> y]
\func
nsubst-var
    (t : NTerm)
    (x y : Nat) : NTerm \elim t
        | NVar z        => \case z =? x \with { | inr _ => NVar y | inl _ => NVar z }
        | NApp t1 t2    => NApp (nsubst-var t1 x y) (nsubst-var t2 x y)
        | NLam z t      => \case z =? x \with { | inr _ => NLam y (nsubst-var t x y) | inl _ => NLam z (nsubst-var t x y) }


\func
vars (t : NTerm) : List Nat \elim t
        | NVar x        => singleton x
        | NApp t1 t2    => vars t1 ++ vars t2
        | NLam x t      => x :-: vars t


\func
maxl (l : List Nat) : Nat => foldr max zero l


\func
gen-fresh-var (ts : List NTerm) : Nat => suc (maxl (concatMap vars ts))


\func
lookup
    (ps : List (\Sigma Nat NTerm))
    (x : Nat) : NTerm \elim ps
        | nil           => NVar x
        | :-: p ps      => \case p.1 =? x \with {
                                | inr _ => p.2
                                | inl _ => lookup ps x
                           }


\func
nsubst'
    (t : NTerm)
    (ps : List (\Sigma Nat NTerm)) : NTerm \elim t
        | NVar x        => lookup ps x 
        | NApp t1 t2    => NApp (nsubst' t1 ps) (nsubst' t2 ps)
        | NLam x t      =>  \let
                                | ts => (NLam x t) :-: (map (\lam (p : \Sigma Nat NTerm) => p.2) ps)
                                | x' => gen-fresh-var ts
                            \in NLam x' (nsubst' t ((x, NVar x') :-: ps))


\func
nsubst
    (t : NTerm)
    (y : Nat)
    (s : NTerm) : NTerm => nsubst' t (singleton (y, s))



\func
weak
    {n : Nat}
    (t : ITerm n) : ITerm (suc n) \elim t
        | IVar i        => IVar (fsuc i)
        | IApp t1 t2    => IApp (weak t1) (weak t2)
        | ILam t        => ILam (weak t)


\func
isubst
    {n m : Nat}
    (t : ITerm n)
    (ss : RVec n (ITerm m)) : ITerm m \elim t
        | IVar i        => ss !! i
        | IApp t1 t2    => IApp (isubst t1 ss) (isubst t2 ss)
        | ILam t        => ILam (isubst t (snoc (rmap weak ss) (IVar fzero)))


\func
fmap
    {V W : \Set}
    (f : V -> W)
    (t : FTerm V) : FTerm W \elim t
        | FVar v        => FVar (f v)
        | FApp t1 t2    => FApp (fmap f t1) (fmap f t2)
        | FLam t        => FLam (fmap (map-inl f) t)


\func
return
    {V : \Set}
    (v : V) : FTerm V => FVar v


\func
bind-fun-helper
    {V W : \Set}
    (k : V -> FTerm W)
    (e : Either V Unit) : FTerm (Either W Unit) \elim e
        | inl v     => fmap {W} {Either W Unit} inl (k v)
        | inr unit  => FVar (inr unit)


\func
bind
    {V W : \Set}
    (t : FTerm V)
    (k : V -> FTerm W) : FTerm W \elim t
        | FVar x        => k x
        | FApp t1 t2    => FApp (t1 `bind` k) (t2 `bind` k)
        | FLam t        => FLam (t `bind` (bind-fun-helper k))
