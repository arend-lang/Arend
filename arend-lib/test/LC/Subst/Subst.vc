\open ::LC::Term
\open ::LC::Ctx
\open ::LC::Properties
\open ::LC::RVec

\open ::Data::Either
\open ::Data::Nat::Base
\open ::Data::Unit

{-

\function
nsubst
    (t1 : NTerm)
    (x : Nat)
    (t2 : NTerm) : NTerm) <= \elim t1
        | NVar x    => {?}
        | NApp m n  => {?}
        | NLam x t  => {?}


\function
isubst
    {n m : Nat}
    (t : ITerm n)
    (ts : RVec n (ITerm m)) : ITerm m <= \elim t
        | IVar i        => ts !! i
        | IApp t1 t2    => IApp (isubst t1 ts) (isubst t2 ts)
        | ILam t        => ILam {?}
-}


\function
return
    {V : \Type}
    (v : V) : FTerm V => FVar v


\function
fmap
    {V W : \Type}
    (f : V -> W)
    (t : FTerm V) : FTerm W <= \elim t
        | FVar v        => FVar (f v)
        | FApp t1 t2    => FApp (fmap f t1) (fmap f t2)
        | FLam t        => FLam (fmap (map-inl f) t)



\function
twist
    {V : \Type}
    (x : Either (FTerm V) Unit) : FTerm (Either V Unit) <= \elim x
        | inl t     => fmap inl t
        | inr unit  => FVar (inr unit)


-- Something like Fun n, but parametrized with some type
-- God damn it, i have no idea how to name these types
\function
Telescope
    (n : Nat)
    (V : \Type) : \Type <= \elim n
        | zero  => Either V Unit
        | suc n => Either (Telescope n V) Unit

\function
fmap-telescope
    {V W : \Type}
    (n : Nat)
    (f : V -> W)
    (x : Telescope n V) : Telescope n W <= \elim n
        | zero  => map-inl f x
        | suc n => fmap-telescope-helper n f x
        \where
            \function
                fmap-telescope-helper
                    {V W : \Type}
                    (n : Nat)
                    (f : V -> W)
                    (x : Either (Telescope n V) Unit) : Either (Telescope n W) Unit <= \elim x
                        | inl y     => inl (fmap-telescope n f y)
                        | inr unit  => inr unit


-- T is for Telescope
\function
twistT
    {V : \Type}
    (n : Nat)
    (x : Telescope n (FTerm V)) : FTerm (Telescope n V) <= \elim n
        | zero  => twist x
        | suc n => twistT-helper n x
        \where
            \function
                twistT-helper
                {V : \Type}
                (n : Nat)
                (t : Either (Telescope n (FTerm V)) Unit) : FTerm (Either (Telescope n V) Unit) <= \elim t
                    | inl x => fmap {Telescope n V} {Either (Telescope n V) Unit} inl (twistT n x)
                    | inr unit => FVar (inr unit)


\function
bind-helper
    {V W : \Type}
    (n : Nat)
    (t : FTerm (Telescope n V))
    (k : V -> FTerm W) : FTerm (Telescope n W) <= \elim t
        | FVar x         => twistT n (fmap-telescope n k x)
        | FApp t1 t2     => FApp (bind-helper n t1 k) (bind-helper n t2 k)
        | FLam t         => FLam (bind-helper (suc n) t k)


\function
bind
    {V W : \Type}
    (t : FTerm V)
    (k : V -> FTerm W) : FTerm W <= \elim t
        | FVar x        => k x
        | FApp t1 t2    => FApp (bind t1 k) (bind t2 k)
        | FLam t        => FLam (bind-helper zero t k)
