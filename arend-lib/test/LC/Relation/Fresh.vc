\open ::Data::Either
\open ::Data::Empty
\open ::Data::List \hiding(concat, snoc)
\open ::Data::List::In
\open ::Data::List::Properties
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Data::Nat::Properties
\open ::Logic
\open ::Paths


\open ::LC::Subst::Subst
\open ::LC::Term::Term


\function (#) (x : Nat) (t : NTerm) => x `AppearsIn` vars t -> Empty


\function
le-refl
    (n : Nat) : n `Le` n <= \elim n
        | zero => le_z
        | suc n => le_ss (le-refl n)


\function
suc-max-gt-both
    (m n : Nat) : (suc (max m n) `Gt` m) && (suc (max m n) `Gt` n) <= \elim m, n
        | zero, zero    => (le_ss le_z, le_ss le_z)
        | zero, suc n   => (le_ss le_z, le_ss (le_ss (le-refl n))) 
        | suc m, zero   => (le_ss (le_ss (le-refl m)), le_ss le_z)
        | suc m, suc n  =>  \let
                                | rec => suc-max-gt-both m n
                            \in (le_ss rec.1, le_ss rec.2)
                            

\function
gt-neq
    (m n : Nat)
    (p : m `Gt` n)
    (q : m = n) : Empty <= \elim m, n, p
        | zero, zero, _!
        | zero, suc n, _!
        | suc m, zero, _            => zero-ne-suc (inv q)
        | suc m, suc n, le_ss p     => gt-neq m n p (pmap pred q)



\function
gt-max-gt-both
    (k m n : Nat)
    (p : k `Gt` max m n) : (k `Gt` m) && (k `Gt` n) =>  \let
                                                            | pr1 => (suc-max-gt-both m n).1
                                                            | pr2 => (suc-max-gt-both m n).2
                                                            | trans1 => le-trans pr1 p
                                                            | trans2 => le-trans pr2 p
                                                        \in (trans1, trans2)


\function
greater-than-max-not-appears-in-list
    (xs : List Nat)
    (k : Nat)
    (p : k `Gt` maxl xs)
    (q : AppearsIn k xs) : Empty <= \elim xs, q
        | nil, _! 
        | (:-:) x xs, here eq =>    \let
                                        | k-gt-x => (gt-max-gt-both k x (foldr max 0 xs) p).1
                                    \in gt-neq k x k-gt-x eq
        | (:-:) x xs, there q =>    \let
                                        | k-gt-max-xs => (gt-max-gt-both k x (foldr max 0 xs) p).2 
                                    \in greater-than-max-not-appears-in-list xs k k-gt-max-xs q


\function
suc-max-not-appears-in-list
    (xs : List Nat)
    (p : AppearsIn (suc (maxl xs)) xs) : Empty => greater-than-max-not-appears-in-list xs (suc (maxl xs)) (le-refl (suc (maxl xs))) p


\function
gen-fresh-is-fresh (t : NTerm) : gen-fresh-var (singleton t) # t <= \elim t
    | NVar x        => \lam p => suc-max-not-appears-in-list (singleton x) p 
    | NApp t1 t2    => \lam p => suc-max-not-appears-in-list (vars t1 ++ vars t2 ++ nil) (transport2 (\lam l1 l2 => AppearsIn (suc (maxl l1)) l2) (append-assoc (vars t1) (vars t2) nil) (transport (\lam x => vars t1 ++ vars t2 = x) (append-assoc (vars t1) (vars t2) nil) (inv (append-nil-right (vars t1 ++ vars t2)))) p)
    | NLam x t      => \lam p => suc-max-not-appears-in-list (x :-: vars t) (transport (\lam l => AppearsIn (suc (maxl (x :-: l))) (x :-: vars t)) (append-nil-right (vars t)) p)


\function
fresh-var-neq
    (x y : Nat)
    (p : x # (NVar y)) : x != y => \lam pr => p (here pr)


\function
gen-fresh-forall
    (xs : List NTerm)
    (t : NTerm)
    (p : t `AppearsIn` xs) : gen-fresh-var xs # t <= \elim xs, p
        | nil, _!
        | (:-:) x xs, here eq => \lam pr => {?}
        | (:-:) x xs, there p => \lam pr => {?}
