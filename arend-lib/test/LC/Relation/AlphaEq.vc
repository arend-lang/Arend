\import LC.Relation.Fresh
\import LC.Subst.NamedSubstProperties
\import LC.Subst.Subst
\import LC.Term.Term


\import Data.List \hiding (concat)
\import Data.List.In
\import Data.Nat.Base
\import Data.Nat.Compare
\import Logic
\import Paths


\data AlphaEq (t1 t2 : NTerm) \elim t1, t2
    | NVar x, NVar y           => VarEq (x = y)
    | NApp t1 s1, NApp t2 s2   => AppEq (AlphaEq t1 t2) (AlphaEq s1 s2)
    | NLam x t1, NLam y t2     => LamEq (b : Nat) (b != x) (b != y) (b # t1) (b # t2) (AlphaEq (nsubst-var t1 x b) (nsubst-var t2 y b))


\func
alpha-eq-refl
    {t : NTerm} : t `AlphaEq` t \elim t
        | NVar x     => VarEq idp 
        | NApp t1 t2 => AppEq (alpha-eq-refl) (alpha-eq-refl)
        | NLam x t   => \let 
                            | ts => NVar x :-: t :-: nil
                            | frv => gen-fresh-var ts
                            | proofs => gen-fresh-forall ts
                            | frv-ne-x => fresh-var-neq frv x (proofs (NVar x) (here idp))
                            | frt => proofs t (there (here idp))
                            | rec => nsubst-var-respects-alpha-eq t t x frv alpha-eq-refl
                        \in LamEq frv frv-ne-x frv-ne-x frt frt rec 


\func
alpha-eq-sym
    {t1 t2 : NTerm}
    (p : t1 `AlphaEq` t2) : t2 `AlphaEq` t1 \elim t1, t2, p
        | NVar x1, NVar x2, VarEq p                         => VarEq (inv p)
        | NApp t1 s1, NApp t2 s2, AppEq p1 p2               => AppEq (alpha-eq-sym p1) (alpha-eq-sym p2)
        | NLam x1 t1, NLam x2 t2, LamEq f ne1 ne2 fp1 fp2 p => LamEq f ne2 ne1 fp2 fp1 (alpha-eq-sym p)
                                                   
                                                  
\func
alpha-eq-trans
     {t1 t2 t3 : NTerm}
     (p1 : t1 `AlphaEq` t2)
     (p2 : t2 `AlphaEq` t3) : t1 `AlphaEq` t3 \elim t1, t2, t3, p1, p2
        | NVar x1, NVar x2, NVar x3, VarEq p1, VarEq p2                                                         => VarEq (p1 *> p2)
        | NApp t1 s1, NApp t2 s2, NApp t3 s3, AppEq p1 q1, AppEq p2 q2                                          => AppEq (alpha-eq-trans p1 p2) (alpha-eq-trans q1 q2)
        | NLam x1 t1, NLam x2 t2, NLam x3 t3, LamEq f1 ne11 ne12 fp11 fp12 p1, LamEq f2 ne21 ne22 fp21 fp22 p2  =>  
            \let
                | ts => NVar x1 :-: t1 :-: NVar x2 :-: t2 :-: NVar x3 :-: t3 :-: nil
                | fv => gen-fresh-var ts
                | proofs => gen-fresh-forall ts
                | fv-ne-x1 => fresh-var-neq fv x1 (proofs (NVar x1) (here idp))
            \in LamEq {?} {?} {?} {?} {?} {?}

