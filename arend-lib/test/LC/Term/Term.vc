\open ::LC::Util::Ctx
\open ::LC::Util::RVec

\open ::Data::Fin
\open ::Data::Unit
\open ::Data::Either
\open ::Data::Nat::Base
\open ::Data::Nat::Compare


\data NTerm : \Type \lp (\max 0 \lh)
    | NVar Nat
    | NApp NTerm NTerm
    | NLam Nat NTerm


\data FTerm (V : \Set)
    | FVar V
    | FApp (FTerm V) (FTerm V)
    | FLam (FTerm (Either V Unit))



\data ITerm (n : Nat) : \Type \lp (\max 0 \lh)
    | IVar (Fin n)
    | IApp (ITerm n) (ITerm n)
    | ILam (ITerm (suc n))


\data NTerm' : \oo-Type
    | NVar' Nat
    | NApp' NTerm' NTerm'
    | NLam' Nat NTerm'
    | trunc (t t' : NTerm') (p : AlphaEq' t t' (\lam x => x)) I
    \with
        | trunc t _ _ left => t
        | trunc _ t' _ right => t'


\data
AlphaEq' 
    (t1 : NTerm')
    (t2 : NTerm')
    (ren : Nat -> Nat) : \oo-Type 
        | VarEq' (x : Nat) (t1 = NVar' (ren x)) (t2 = NVar' x)
        | AppEq' (t1' t2' s1' s2' : NTerm') (p : AlphaEq' t1' t2' ren) (q : AlphaEq' s1' s2' ren) (t1 = NApp' t1' s1') (t2 = NApp' t2' s2')
        | LamEq' (x : Nat) (t1' t2' : NTerm') (p : AlphaEq' t1' t2' (\lam v => \case (v =? x) | inr pro => ren x | inl _ => v)) (t1 = NLam' (ren x) t1') (t2 = NLam' x t2')

