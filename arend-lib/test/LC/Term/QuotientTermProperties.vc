\open ::LC::Term::Term
\open ::LC::Util::Ctx
\open ::LC::Util::RVec

\open ::Data::Empty
\open ::Data::Nat::Base
\open ::Data::Fin
\open ::Paths


-- Quotient term properties

\function
gamma
    {n : Nat}
    (env : Ctx n)
    (t : QTerm env) : ITerm n <= \elim t
        | QVar i            => IVar i
        | QApp t1 t2        => IApp (gamma env t1) (gamma env t2)
        | QLam x t          => ILam (gamma (extend env x) t)
        | trunc t1 t2 pr i  => gamma-respects-alpha-eq env t1 env t2 pr @ i 

{-
\function
delta'
    {n : Nat}
    (env : Ctx n)
    (t : ITerm n) : QTerm env <= \elim t
        | IVar i        => QVar i
        | IApp t1 t2    => QApp (delta' env t1) (delta' env t2)
        | ILam t        => QLam (suc n) (delta' (extend env (suc n)) t)


\function
delta
    {n : Nat}
    (t : ITerm n) : \Sigma (env : Ctx n) (t' : QTerm env) => ((gen_env n), (delta' (gen_env n) t))
-}

\function
gamma-respects-alpha-eq
    {n : Nat}
    (env1 : Ctx n)
    (t1 : QTerm env1)
    (env2 : Ctx n)
    (t2 : QTerm env2)
    (proof : AlphaEq' env1 t1 env2 t2) : gamma env1 t1 = gamma env2 t2 <= \elim t1, t2, proof
        | QVar i, QVar j, QVarEq p              => pmap IVar p
        | QApp t1 s1, QApp t2 s2, QAppEq p q    => pmap2 IApp (gamma-respects-alpha-eq env1 t1 env2 t2 p) (gamma-respects-alpha-eq env1 s1 env2 s2 q) 
        | QLam x t1, QLam y t2, QLamEq p        => pmap ILam (gamma-respects-alpha-eq (extend env1 x) t1 (extend env2 y) t2 p)

{-
\function
gamma-delta-id
    {n : Nat}
    (t : ITerm n) : gamma (delta t).1 (delta t).2 = t <= \elim t
        | IVar i        => {?}
        | IApp t1 t2    => {?}
        | ILam t        => {?}

-}
