\open ::LC::Relation::AlphaEq
\open ::LC::Subst::Subst
\open ::LC::Term::Term
\open ::LC::Util::Ctx
\open ::LC::Util::Fun
\open ::LC::Util::RVec

\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Paths


-- named term properties


\data TermInCtx {n : Nat} (env : Ctx n) (t : NTerm)
    | TermInCtx {n} env (NVar x)     => VarInCtx (i : Fin n) (p : env !! i = x)
    | TermInCtx {n} env (NApp t1 t2) => AppInCtx (p : TermInCtx env t1) (q : TermInCtx env t2)
    | TermInCtx {n} env (NLam x t)   => LamInCtx (p : TermInCtx (extend env x) t)


\function
phi
    {n : Nat}
    (env : Ctx n)
    (t : NTerm)
    (proof : TermInCtx env t) : ITerm n <= \elim t, proof
        | NVar x, VarInCtx i p        => IVar i
        | NApp t1 t2, AppInCtx p q    => IApp (phi env t1 p) (phi env t2 q)
        | NLam x t, LamInCtx p        => ILam (phi (extend env x) t p)


\function
psi'
    {n : Nat}
    (env : Ctx n)
    (t : ITerm n) : \Sigma (t' : NTerm) (p : TermInCtx env t') <= \elim t
        | IVar i        => (NVar (env !! i), (VarInCtx i idp))
        | IApp t1 t2    => (NApp (psi' env t1).1 (psi' env t2).1, AppInCtx (psi' env t1).2 (psi' env t2).2)
        | ILam t        => (NLam n (psi' (extend env n) t).1, LamInCtx (psi' (extend env n) t).2)


\function
psi
    {n : Nat}
    (t : ITerm n) : \Sigma (env : Ctx n) (t' : NTerm) (proof : TermInCtx env t') => (gen_env n, (psi' (gen_env n) t).1, (psi' (gen_env n) t).2)


\function
phi-respects-alpha-eq
    {n : Nat}
    (env : Ctx n)
    (t1 t2 : NTerm)
    (p1 : TermInCtx env t1)
    (p2 : TermInCtx env t2)
    (proof : t1 `AlphaEq` t2) : (phi env t1 p1) = (phi env t2 p2) <= \elim t1, t2, p1, p2, proof
        | NVar x, NVar y, VarInCtx i p, VarInCtx j q, VarEq r                   =>  pmap IVar {?}
        | NApp t1 s1, NApp t2 s2, AppInCtx p1 q1, AppInCtx p2 q2, AppEq p q     =>  \let
                                                                                        | pr1 => phi-respects-alpha-eq env t1 t2 p1 p2 p
                                                                                        | pr2 => phi-respects-alpha-eq env s1 s2 q1 q2 q
                                                                                    \in pmap2 IApp pr1 pr2
        | NLam x t1, NLam y t2, LamInCtx p1, LamInCtx p2, LamEq p               => pmap ILam {?}

{-
\function
phi-psi-id
    {n : Nat}
    (t : ITerm n) : phi (psi t).1 (psi t).2 (psi t).3 = t <= \elim t
        | IVar i     => idp
        | IApp t1 t2 => pmap2 IApp (phi-psi-id t1) (phi-psi-id t2)
        | ILam t     => pmap ILam (phi-psi-id t)


\function
psi-phi-id
    {n : Nat}
    (t : NTerm)
    (env : Ctx n)
    (proof : TermInCtx env t) : ((psi (phi env t proof)).2 `AlphaEq` t) <= \elim t, proof
        | NVar x, VarInCtx p        => VarEq {?}
        | NApp t1 t2, AppInCtx p q  => AppEq (psi-phi-id t1 env p) (psi-phi-id t2 env q)
        | NLam x t, LamInCtx p      => LamEq {?} --(psi-phi-id t (extend env x) p)
-}
