\open ::LC::Subst::Subst
\open ::LC::Term::Term
\open ::LC::Util::Ctx
\open ::LC::Util::Fun
\open ::LC::Util::RVec

\open ::Data::Either
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Paths
\open ::Data::Unit


-- index term properties

{-
\function
gamma-helper
    {n : Nat}
    (i : Fin (suc n)) : Either (Fin n) Unit <= \elim i
        | fzero     => inr unit
        | fsuc i    => inl i


\function
gamma
    {n : Nat}
    (t : ITerm n) : FTerm (Fin n) <= \elim t
        | IVar i        => FVar i
        | IApp t1 t2    => FApp (gamma t1) (gamma t2)
        | ILam t        => FLam (fmap gamma-helper (gamma t))


\function
delta-helper
    {n : Nat}
    (e : Either (Fin n) Unit) : Fin (suc n) <= \elim e
        | inl i     => fsuc i
        | inr unit  => fzero


-- Sadly, but this definition fails termination checking
-- So, we are defining new type similar to Fin n
\function
delta
    {n : Nat}
    (t : FTerm (Fin n)) : ITerm n <= \elim t
        | FVar i        => IVar i
        | FApp t1 t2    => IApp (delta t1) (delta t2)
        | FLam t        => ILam (delta (fmap delta-helper t))
-}

\function
alpha
    {n : Nat}
    (t : ITerm n) : FTerm (Fun n) <= \elim t
        | IVar i        => FVar (from-fin i)
        | IApp t1 t2    => FApp (alpha t1) (alpha t2)
        | ILam t        => FLam (alpha t)


\function
beta
    {n : Nat}
    (t : FTerm (Fun n)) : ITerm n <= \elim t
        | FVar f        => IVar (to-fin f)
        | FApp t1 t2    => IApp (beta t1) (beta t2)
        | FLam t        => ILam (beta {suc n} t)


\function
alpha-beta-id
    {n : Nat}
    (t : FTerm (Fun n)) : alpha (beta t) = t <= \elim t
        | FVar f        => pmap FVar (from-to-fin-id f)
        | FApp t1 t2    => pmap2 FApp (alpha-beta-id t1) (alpha-beta-id t2)
        | FLam t        => pmap FLam (alpha-beta-id {suc n} t)


\function
beta-alpha-id
    {n : Nat}
    (t : ITerm n) : beta (alpha t) = t <= \elim t
        | IVar i        => pmap IVar (to-from-fin-id i)
        | IApp t1 t2    => pmap2 IApp (beta-alpha-id t1) (beta-alpha-id t2)
        | ILam t        => pmap ILam (beta-alpha-id t)
