\open ::LC::Util::Ctx
\open ::LC::Util::RVec

\open ::Data::Fin
\open ::Data::Unit
\open ::Data::Either
\open ::Data::Nat::Base
\open ::Data::Nat::Compare
\open ::Paths


-- N is for named

\data NTerm
    | NVar Nat
    | NApp NTerm NTerm
    | NLam Nat NTerm


-- F is for functor. Maybe rename to M because of monad?

\data FTerm (V : \Set)
    | FVar V
    | FApp (FTerm V) (FTerm V)
    | FLam (FTerm (Either V Unit))


-- I is for index

\data ITerm (n : Nat)
    | IVar (Fin n)
    | IApp (ITerm n) (ITerm n)
    | ILam (ITerm (suc n))


-- Q is for quotient
{-
\data QTerm {n : Nat} (env : Ctx n) : \oo-Type
    | QVar (i : Fin n)
    | QApp (QTerm env) (QTerm env)
    | QLam (v : Nat) (t : QTerm (extend env v))
    | trunc (t1 t2 : QTerm env) (p : AlphaEq' env t1 env t2) I
    \with
        | trunc t1  _   _ left     => t1
        | trunc _   t2  _ right    => t2


\data AlphaEq' {n : Nat} (env1 : Ctx n) (t1 : QTerm env1) (env2 : Ctx n) (t2 : QTerm env2) : \oo-Type
    | AlphaEq' env1 (QVar i) env2 (QVar j)          => QVarEq (i = j)
    | AlphaEq' env1 (QApp t1 s1) env2 (QApp t2 s2)  => QAppEq (p : AlphaEq' env1 t1 env2 t2) (q : AlphaEq' env1 s1 env2 s2)
    | AlphaEq' env1 (QLam x1 t1) env2 (QLam x2 t2)  => QLamEq (p : AlphaEq' (extend env1 x1) t1 (extend env2 x2) t2)
-}

\data QTerm : \oo-Type
    | QVar (x : Nat)
    | QApp QTerm QTerm
    | QLam (x : Nat) (t : QTerm)
    | trunc {n : Nat} (env1 : Ctx n) (t1 : QTerm) (p1 : TermInCtx' env1 t1) (env2 : Ctx n) (t2 : QTerm) (p2 : TermInCtx' env2 t2) (p : AlphaEq' env1 t1 p1 env2 t2 p2) I
    \with
        | trunc _ t1 _ _ t2 _ _ left     => t1
        | trunc _ t1 _ _ t2 _ _ right    => t2


\data AlphaEq'
    {n : Nat}
    (env1 : Ctx n)
    (t1 : QTerm)
    (p1 : TermInCtx' env1 t1)
    (env2 : Ctx n)
    (t2 : QTerm)
    (p2 : TermInCtx' env2 t2) : \oo-Type
        | AlphaEq' env1 (QVar x) (QVarInCtx i p) env2 (QVar y) (QVarInCtx j q)              => QVarEq (i = j)
        | AlphaEq' env1 (QApp t1 s1) (QAppInCtx p1 q1) env2 (QApp t2 s2) (QAppInCtx p2 q2)  => QAppEq (p : AlphaEq' env1 t1 p1 env2 t2 p2) (q : AlphaEq' env1 s1 q1 env2 s2 q2)
        | AlphaEq' env1 (QLam x1 t1) (QLamInCtx p1) env2 (QLam x2 t2) (QLamInCtx p2)        => QLamEq (p : AlphaEq' (extend env1 x1) t1 p1 (extend env2 x2) t2 p2)


\data TermInCtx' {n : Nat} (env : Ctx n) (t : QTerm) : \oo-Type
    | TermInCtx' {n} env (QVar x)       => QVarInCtx (i : Fin n) (x = env !! i)
    | TermInCtx' {n} env (QApp t1 t2)   => QAppInCtx (p : TermInCtx' env t1) (q : TermInCtx' env t2)
    | TermInCtx' {n} env (QLam x t)     => QLamInCtx (p : TermInCtx' (extend env x) t)
