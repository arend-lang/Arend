\import LC.Term.Term

\import Combinators
\import Data.Fin
\import Data.Nat.Base
\import Data.Nat.Compare
\import Equiv
\import Logic


\func
isFin (s : \Type) => \Sigma (n : Nat) (s = Fin n)


\func
FinPerm (V : \Type) => \Sigma (pi : V -> V) (isequiv pi) (isFin (\Sigma (v : V) (pi v != v)))


\func
FinPermAction (S : \Type) => FinPerm Nat -> S -> S

{-
\func
actQTerm-helper (p : FinPerm Nat) (t : QTerm) : QTerm <= \elim t
    | QVar x => QVar (p.1 x)
    | QApp t1 t2 => QApp (actQTerm-helper p t1) (actQTerm-helper p t2)
    | QLam ts => QLam (actQTerm-helper p ts.1, {?})


\func
actQTerm : FinPermAction QTerm => \lam p t => actQTerm-helper p t


\func
EqClass (T : \Type) (act : FinPermAction T) => \Sigma (t : T) (pr : \Pi (t' : T) -> \Sigma (pi' : FinPerm Nat) (pr' : act pi' t' = t))
-}
