\open ::Data::Empty
\open ::Data::Fin
\open ::Data::Nat::Base
\open ::Data::Nat::Properties
\open ::Paths


\data RVec (n : Nat) (A : \Type)
    | RVec  zero   A => vnil
    | RVec (suc n) A => snoc (RVec n A) A


\function \infix 6
(!!) {n : Nat} {A : \Type} (xs : RVec n A) (i : Fin n) : A <= \elim n, xs, i
    | suc n, snoc xs x, fzero => x
    | suc n, snoc xs x, fsuc i => xs !! i


\function
rhead {n : Nat} {A : \Type} (xs : RVec (suc n) A) : A <= \elim xs
    | snoc xs x => x


\function
rtail {n : Nat} {A : \Type} (xs : RVec (suc n) A) : RVec n A <= \elim xs
    | snoc xs x => xs


\function
rmap {n : Nat} {A B : \Type} (f : A -> B) (xs : RVec n A) : RVec n B <= \elim n, xs
    | zero, vnil => vnil
    | suc n, snoc xs x => snoc (rmap f xs) (f x)


-- Move to ::Data::Nat::Properties?
\function
suc-assoc (n m : Nat) : suc (n + m) = n + (suc m) <= \elim n
    | zero => idp
    | suc n => pmap suc (suc-assoc n m)


\function
rreverse-acc {n m : Nat} {A : \Type} (xs : RVec n A) (acc : RVec m A) : RVec (n + m) A <= \elim n, xs
    | zero, vnil => acc
    | suc n, snoc xs x => transport (\lam k => RVec k A) (inv (suc-assoc n m)) (rreverse-acc xs (snoc acc x))


\function
rreverse {n : Nat} {A : \Type} (xs : RVec n A) : RVec n A => transport (\lam k => RVec k A) (inv (plus-comm0 n)) (rreverse-acc xs vnil)


\function
snoc-lemma {n : Nat} {A : \Type} (xs : RVec (suc n) A) : snoc (rtail xs) (rhead xs) = xs <= \elim xs
    | snoc xs x => idp
