\import Data.Empty
\import Data.Fin
\import Data.Nat.Base
\import Data.Nat.Properties
\import Paths


\data RVec (n : Nat) (A : \Type) \elim n
    | zero => vnil
    | (suc n) => snoc (RVec n A) A


\func \infix 6 !! {n : Nat} {A : \Type} (xs : RVec n A) (i : Fin n) : A \elim n, xs, i
    | suc n, snoc xs x, fzero => x
    | suc n, snoc xs x, fsuc i => xs !! i


\func
rhead {n : Nat} {A : \Type} (xs : RVec (suc n) A) : A \elim xs
    | snoc xs x => x


\func
rtail {n : Nat} {A : \Type} (xs : RVec (suc n) A) : RVec n A \elim xs
    | snoc xs x => xs


\func
rmap {n : Nat} {A B : \Type} (f : A -> B) (xs : RVec n A) : RVec n B \elim n, xs
    | zero, vnil => vnil
    | suc n, snoc xs x => snoc (rmap f xs) (f x)


-- Move to Data.Nat.Properties?
\func
suc-assoc (n m : Nat) : suc (n + m) = n + (suc m) \elim n
    | zero => idp
    | suc n => pmap suc (suc-assoc n m)


\func
rreverse-acc {n m : Nat} {A : \Type} (xs : RVec n A) (acc : RVec m A) : RVec (n + m) A \elim n, xs
    | zero, vnil => acc
    | suc n, snoc xs x => transport (\lam k => RVec k A) (inv (suc-assoc n m)) (rreverse-acc xs (snoc acc x))


\func
rreverse {n : Nat} {A : \Type} (xs : RVec n A) : RVec n A => transport (\lam k => RVec k A) (inv (plus-comm0 n)) (rreverse-acc xs vnil)


\func
snoc-lemma {n : Nat} {A : \Type} (xs : RVec (suc n) A) : snoc (rtail xs) (rhead xs) = xs \elim xs
    | snoc xs x => idp
