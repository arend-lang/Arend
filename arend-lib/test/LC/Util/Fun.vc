\import Data.Either
\import Data.Empty
\import Data.Nat.Base
\import Data.Unit
\import Data.Fin
\import Paths


-- like Fin n, but Fun n
\func
Fun
    (n : Nat) : \Type \lp (\max 0 \lh) \elim n
        | zero  => Empty
        | suc n => Either (Fun n) Unit


\func
from-fin
    {n : Nat}
    (i : Fin n) : Fun n \elim n, i
        | suc y, fzero => inr unit
        | suc y, fsuc x => inl (from-fin x)


\func
to-fin
    {n : Nat}
    (f : Fun n) : Fin n \elim n
        | suc y => \case f \with {
                | inr unit => fzero
                | inl x => fsuc (to-fin x)
            }


\func
from-to-fin-id
    {n : Nat}
    (f : Fun n) : from-fin (to-fin f) = f \elim n
        | suc y => helper f
        \where
            \func
            helper
                {n : Nat}
                (f : Either (Fun n) Unit) : from-fin {suc n} (to-fin {suc n} f) = f \elim f
                    | inl x => pmap inl (from-to-fin-id x)
                    | inr unit => idp


\func
to-from-fin-id
    {n : Nat}
    (i : Fin n) : to-fin (from-fin i) = i \elim n, i
        | suc _, fzero => idp
        | suc _, fsuc x => pmap fsuc (to-from-fin-id x)
