\function
isContr (A : \Type0) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\function
squeeze1 (i j : I)
    <= coe (\lam x => left = x) (path (\lam _ => left)) j @ i

\function
squeeze (i j : I)
    <= coe (\lam i => Path (\lam j => left = squeeze1 i j) (path (\lam _ => left)) (path (\lam j => squeeze1 i j))) (path (\lam _ => path (\lam _ => left))) right @ i @ j

\function
transport {A : \Type0} (B : A -> \Type0) {a a' : A} (p : a = a') (b : B a)
    <= coe (\lam i => B (p @ i)) b right

\function
concat {A : I -> \Type0} {a : A left} {a' a'' : A right} (p : Path A a a') (q : a' = a'')
    <= transport (Path A a) q p

\function \infixr 9
(*) {A : \Type0} {a a' a'' : A} (p : a = a') (q : a' = a'')
    <= concat p q

\function
psqueeze {A : \Type0} {a a' : A} (p : a = a') (i : I) : a = p @ i
    => path (\lam j => p @ squeeze i j)

\function
idp {A : \Type0} {a : A} => path (\lam _ => a)

\function
Jl {A : \Type0} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type0) (b : B a idp) {a' : A} (p : a = a') : B a' p
    <= coe (\lam i => B (p @ i) (psqueeze p i)) b right

\function
inv {A : \Type0} {a a' : A} (p : a = a')
    <= transport (\lam a'' => a'' = a) p idp

\function
inv-concat {A : \Type0} {a a' : A} (p : a = a') : inv p * p = idp
    <= Jl (\lam _ q => inv q * q = idp) idp p

\function
idp-over (A : I -> \Type0) (a : A left) => path (coe A a)

\function
path-over {A : I -> \Type0} {a : A left} {a' : A right} (p : coe A a right = a') <= concat (idp-over A a) p


\function
I-isContr : isContr I => (left, \lam i => path (\lam j => squeeze i j))

\function
isProp (A : \Type0) => \Pi (a a' : A) -> a = a'

\function
isSet (A : \Type0) => \Pi (a a' : A) -> isProp (a = a')

\function
ofHlevel (n : Nat) (A : \Type0) : \Type0 <= \elim n
    | zero => isContr A
    | suc n => \Pi (a a' : A) -> ofHlevel n (a = a')

\function
ofHlevel1-isProp (A : \Type0) (f : ofHlevel (suc zero) A) : isProp A => \lam a a' => f a a'.proj1

\function
isContr-isProp (A : \Type0) (c : isContr A) : isProp A => \lam a a' => inv (c.proj2 a) * c.proj2 a'

\function
isProp-ofHlevel1 (A : \Type0) (f : isProp A) : ofHlevel (suc zero) A => \lam a a' => (inv (f a a) * f a a', Jl (\lam x q => inv (f a a) * f a x = q) (inv-concat (f a a)))

\function
isProp-isSet (A : \Type0) (p : isProp A) : isSet A => \lam a a' => isContr-isProp (a = a') (isProp-ofHlevel1 A p a a')

\function
isProp-isProp (A : \Type0) : isProp (isProp A) => \lam f g => path (\lam i a a' => isProp-isSet A f a a' (f a a') (g a a') @ i)

\function
SigmaExt {A : \Type0} {B : A -> \Type0} (x y : \Sigma (a : A) (B a)) (p : x.proj1 = y.proj1) (q : transport B p (x.proj2) = y.proj2) : x = y
    => path (\lam i => (p @ i, path-over q @ i))

\function
isContrFun-isProp (A : \Type0) : isProp (isContr A) =>
    \lam c1 c2 => SigmaExt c1 c2 (c1.proj2 (c2.proj1))
    (path (\lam i a' => isProp-isSet A (isContr-isProp A c1) (c2.proj1) a'
        (transport (\lam a => \Pi (a' : A) -> a = a') (c1.proj2 (c2.proj1)) (c1.proj2) a') (c2.proj2 a') @ i))

\function
ofHlevel-isProp (n : Nat) (A : \Type0) : isProp (ofHlevel n A) <= \elim n
    | zero => isContr-isProp A
    | suc n => \lam f g => path (\lam i a a' => ofHlevel-isProp n (a = a') (f a a') (g a a') @ i)
