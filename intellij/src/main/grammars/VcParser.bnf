{
    parserClass = "org.vclang.lang.core.parser.VcParser"

    implements = 'org.vclang.lang.core.psi.ext.VcCompositeElement'
    extends = 'org.vclang.lang.core.psi.ext.VcCompositeElementImpl'

    elementTypeHolderClass = "org.vclang.lang.core.psi.VcTypes"

    elementTypeClass = "org.vclang.lang.core.psi.VcCompositeElementType"
    tokenTypeClass = "org.vclang.lang.core.psi.VcTokenType"

    psiClassPrefix = "Vc"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.vclang.lang.core.psi"
    psiImplPackage = "org.vclang.lang.core.psi.impl"

    generateTokenAccessors = true

    tokens = [
        LBRACE              = '{'
        RBRACE              = '}'
        LPAREN              = '('
        RPAREN              = ')'
        COLON               = ':'
        COLONCOLON          = '::'
        ARROW               = '->'
        FAT_ARROW           = '=>'
        DOT                 = '.'
        COMMA               = ','
        UNDERSCORE          = '_'
        GRAVE               = '`'
        PIPE                = '|'
        BLOCK_COMMENT_START = '{-'
        BLOCK_COMMENT_END   = '-}'

        OPEN_KW             = '\open'
        EXPORT_KW           = '\export'
        HIDING_KW           = '\hiding'
        FUNCTION_KW         = '\function'
        NON_ASSOC_KW        = '\infix'
        LEFT_ASSOC_KW       = '\infixl'
        RIGHT_ASSOC_KW      = '\infixr'
        PROP_KW             = '\Prop'
        WHERE_KW            = '\where'
        WITH_KW             = '\with'
        ELIM_KW             = '\elim'
        FIELD_KW            = '\field'
        NEW_KW              = '\new'
        PI_KW               = '\Pi'
        SIGMA_KW            = '\Sigma'
        LAM_KW              = '\lam'
        LET_KW              = '\let'
        IN_KW               = '\in'
        CASE_KW             = '\case'
        WITH_KW             = '\with'
        IMPLEMENT_KW        = '\implement'
        DATA_KW             = '\data'
        CLASS_KW            = '\class'
        EXTENDS_KW          = '\extends'
        VIEW_KW             = '\view'
        ON_KW               = '\on'
        BY_KW               = '\by'
        INSTANCE_KW         = '\instance'
        TRUNCATED_KW        = '\truncated'
        DEFAULT_KW          = '\default'
        LP_KW               = '\lp'
        LH_KW               = '\lh'
        SUC_KW              = '\suc'
        MAX_KW              = '\max'

        INFIX               = "regexp:[~!@#$%\^&*\-+=<>?/|:;\[\]]+";
        PREFIX              = "regexp:[a-zA-Z_][~!@#$%\^&*\-+=<>?/|:;\[\]a-zA-Z0-9_']*"
        NUMBER              = "regexp:[0-9]+"
        MODULE_NAME         = "regexp:::[a-zA-Z_][a-zA-Z0-9_']*"

        SET                 = "regexp:\\Set\d*"
        UNIVERSE            = "regexp:\\Type\d*"
        TRUNCATED_UNIVERSE  = "regexp:\\(\d+|oo)-Type\d*"

        LINE_COMMENT        = "regexp:--[^\r\n]*"
        BLOCK_COMMENT       = '{- BLOCK_COMMENT -}'
    ]

    extends("def(Function|Abstract|Implement|Data|Class|ClassView|Instance)") = definition
    extends("(arr|binOp|pi|sigma|lam|let|case)Expr") = expr
}

sourceNode ::= statements

statements ::= topStatement* { mixin = "org.vclang.lang.core.psi.ext.VcStatementsImplMixin" }

private topStatement ::= !<<eof>> statement { recoverWhile = statement_recover }

private statement_recover ::= !(OPEN_KW      | EXPORT_KW    | FUNCTION_KW | FIELD_KW |
                                IMPLEMENT_KW | TRUNCATED_KW | DATA_KW     | CLASS_KW |
                                VIEW_KW      | DEFAULT_KW   | INSTANCE_KW)

statement ::= statCmd | statDef

statCmd ::= nsCmd nsCmdRoot fieldAcc* [HIDING_KW? LPAREN <<comma_separated_sequence identifier>> RPAREN] {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcStatCmdImplMixin"
}

nsCmd ::= OPEN_KW | EXPORT_KW

nsCmdRoot ::= modulePath | identifier {
    mixin = "org.vclang.lang.core.psi.ext.VcNsCmdRootImplMixin"
}

statDef ::= definition

definition ::= defFunction
    | defAbstract
    | defImplement
    | defData
    | defClass
    | defClassView
    | defInstance {
    implements = [ "org.vclang.lang.core.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.Definition" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.DefinitionAdapter"
}

defFunction ::= FUNCTION_KW prec identifier tele* [COLON expr] functionBody where? {
    pin = 1
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "org.vclang.lang.core.Surrogate.StatementCollection"
                   "com.jetbrains.jetpad.vclang.term.Abstract.FunctionDefinition" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.FunctionDefinitionAdapter"
}

defAbstract ::= FIELD_KW prec identifier COLON expr {
    pin = 1
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.ClassField" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ClassFieldAdapter"
}

defImplement ::= IMPLEMENT_KW identifier FAT_ARROW expr {
    pin = 1
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.Implementation" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ImplementationAdapter"
}

defData ::= TRUNCATED_KW? DATA_KW prec identifier tele* [COLON expr] dataBody {
    pin = 2
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.DataDefinition" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.DataDefinitionAdapter"
}

defClass ::= CLASS_KW identifier tele* [EXTENDS_KW <<comma_separated_sequence atomFieldsAcc>>] [LBRACE statement* RBRACE] where? {
    pin = 1
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "org.vclang.lang.core.Surrogate.StatementCollection"
                   "com.jetbrains.jetpad.vclang.term.Abstract.ClassDefinition" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ClassDefinitionAdapter"
}

defClassView ::= VIEW_KW identifier ON_KW expr BY_KW identifier LBRACE classViewField* RBRACE {
    pin = 1
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.ClassView" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ClassViewAdapter"
}

defInstance ::= DEFAULT_KW? INSTANCE_KW identifier tele* FAT_ARROW expr {
    pin = 2
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.ClassViewInstance" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ClassViewInstanceAdapter"
}

functionBody ::= withoutElim | withElim
withoutElim ::= FAT_ARROW !ELIM_KW expr
withElim ::= elim? clauses

dataBody ::= dataClauses | dataConstructors
dataClauses ::= elim constructorClause*
dataConstructors ::= [FAT_ARROW PIPE? constructor] (PIPE constructor)*

constructorClause ::= PIPE <<comma_separated_sequence pattern>> FAT_ARROW (constructor | LBRACE <<pipe_separated_sequence constructor>> RPAREN)

elim ::= WITH_KW | FAT_ARROW ELIM_KW <<comma_separated_sequence atomFieldsAcc>>

classViewField ::= identifier [FAT_ARROW prec identifier] {
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.ClassViewField" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ClassViewFieldAdapter"
}

where ::= WHERE_KW (LBRACE statement* RBRACE | statement) { pin = 1 }

pattern ::= atomPattern | patternConstructor {
    mixin = "org.vclang.lang.core.psi.ext.VcPatternImplMixin"
}

patternConstructor ::= prefix atomPatternOrID*

atomPatternOrID ::= atomPattern | prefix

atomPattern ::= LPAREN pattern? RPAREN
    | LBRACE pattern RBRACE
    | UNDERSCORE

constructor ::= prec identifier tele* [elim? clausesWithBraces] {
    implements = [ "org.vclang.lang.core.psi.ext.VcNamedElement"
                   "com.jetbrains.jetpad.vclang.term.Abstract.Constructor" ]
    mixin = "org.vclang.lang.core.psi.ext.adapters.ConstructorAdapter"
}

prec ::= [associativity NUMBER]

associativity ::= NON_ASSOC_KW
    | LEFT_ASSOC_KW
    | RIGHT_ASSOC_KW

expr0 ::= binOpLeft* binOpArg

expr ::= arrExpr
    | caseExpr
    | sigmaExpr
    | piExpr
    | lamExpr
    | letExpr
    | binOpExpr

arrExpr ::= expr ARROW expr { rightAssociative = true }

binOpExpr ::= binOpLeft* newExpr

caseExpr ::= CASE_KW <<comma_separated_sequence expr0>> WITH_KW clausesWithBraces { pin = 1 }

piExpr ::= PI_KW tele+ ARROW expr {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcPiExprImplMixin"
}

sigmaExpr ::= SIGMA_KW tele+ {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcSigmaExprImplMixin"
}

lamExpr ::= LAM_KW tele+ FAT_ARROW expr {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcLamExprImplMixin"
}

letExpr ::= LET_KW <<pipe_separated_sequence letClause>> IN_KW expr {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcLetExprImplMixin"
}

clauses ::= clausesWithBraces | (PIPE clause)*
private clausesWithBraces ::= LBRACE <<pipe_separated_sequence clause>>? RBRACE

letClause ::= identifier tele* typeAnnotation? FAT_ARROW expr

typeAnnotation ::= COLON expr { pin = 1 }

clause ::= <<comma_separated_sequence pattern>> [FAT_ARROW expr]

levelExpr ::= atomLevelExpr
    | sucLevelExpr
    | maxLevelExpr

atomLevelExpr ::= LP_KW
    | LH_KW
    | NUMBER
    | LPAREN levelExpr RPAREN

sucLevelExpr ::= SUC_KW atomLevelExpr { pin = 1 }

maxLevelExpr ::= MAX_KW atomLevelExpr atomLevelExpr { pin = 1 }

binOpArg ::= universeBinOp
    | setUniverseBinOp
    | truncatedUniverseBinOp
    | argumentBinOp

universeBinOp ::= UNIVERSE [atomLevelExpr atomLevelExpr?] { pin = 1 }

setUniverseBinOp ::= SET atomLevelExpr? { pin = 1 }

truncatedUniverseBinOp ::= TRUNCATED_UNIVERSE atomLevelExpr? { pin = 1 }

argumentBinOp ::= atomFieldsAcc argument*

binOpLeft ::= newExpr infix

newExpr ::= NEW_KW? binOpArg implementStatements? {
    pin = 1
    mixin = "org.vclang.lang.core.psi.ext.VcNewExprImplMixin"
}

fieldAcc ::= DOT (NUMBER | identifier) { pin = 1 }

modulePath ::= moduleName+ {
    implements = [ "org.vclang.lang.core.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.lang.core.psi.ext.VcModulePathImplMixin"
}
moduleName ::= MODULE_NAME

atom ::= literal
    | tuple
    | NUMBER
    | atomModuleCall

tuple ::= LPAREN <<comma_separated_sequence expr>> RPAREN

atomModuleCall ::= modulePath

atomFieldsAcc ::= atom fieldAcc*

implementStatements ::= LBRACE <<pipe_separated_sequence implementStatement>>? RBRACE

implementStatement ::= identifier FAT_ARROW expr

argument ::= atomFieldsAcc
    | universeAtom
    | LBRACE expr RBRACE

literal ::= prefix
    | PROP_KW
    | UNDERSCORE
    | goal

goal ::= LBRACE '?' identifier? [LBRACE expr RBRACE] RBRACE

universeAtom ::= SET
    | UNIVERSE
    | TRUNCATED_UNIVERSE

tele ::= literal
    | universeAtom
    | LPAREN typedExpr RPAREN
    | LBRACE typedExpr RBRACE

typedExpr ::= unknownOrID+ COLON expr | expr  // expr [COLON expr]

unknownOrID ::= identifier | UNDERSCORE

identifier ::= PREFIX | INFIX {
    implements = [ "org.vclang.lang.core.psi.ext.VcReferenceElement"
                   "org.vclang.lang.core.psi.ext.VcNamedElement" ]
    mixin = "org.vclang.lang.core.psi.ext.VcIdentifierImplMixin"
}

prefix ::= PREFIX | GRAVE INFIX {
    implements = [ "org.vclang.lang.core.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.lang.core.psi.ext.VcPrefixImplMixin"
}

infix ::= INFIX | GRAVE PREFIX {
    implements = [ "org.vclang.lang.core.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.lang.core.psi.ext.VcInfixImplMixin"
}

postfix ::= INFIX GRAVE | PREFIX GRAVE {
    implements = [ "org.vclang.lang.core.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.lang.core.psi.ext.VcPostfixImplMixin"
}

private meta comma_separated_sequence ::= <<p>> (COMMA <<p>>)* { pin(".*") = 1 }

private meta pipe_separated_sequence ::= PIPE? <<p>> (PIPE <<p>>)* { pin(".*") = 1 }
