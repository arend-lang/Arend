{
    parserClass = "org.vclang.lang.parser.VcParser"

    implements = 'org.vclang.psi.ext.VcCompositeElement'
    extends = 'org.vclang.psi.ext.VcCompositeElementImpl'

    elementTypeHolderClass = "org.vclang.psi.VcElementTypes"

    elementTypeClass = "org.vclang.psi.VcCompositeElementType"
    tokenTypeClass = "org.vclang.psi.VcTokenType"

    psiClassPrefix = "Vc"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.vclang.psi"
    psiImplPackage = "org.vclang.psi.impl"

    generateTokenAccessors = true

    tokens = [
        LBRACE              = '{'
        RBRACE              = '}'
        LGOAL               = '{?'
        LPAREN              = '('
        RPAREN              = ')'
        COLON               = ':'
        ARROW               = '->'
        FAT_ARROW           = '=>'
        DOT                 = '.'
        COMMA               = ','
        UNDERSCORE          = '_'
        PIPE                = '|'
        BLOCK_COMMENT_START = '{-'
        BLOCK_COMMENT_END   = '-}'

        OPEN_KW             = '\open'
        IMPORT_KW           = '\import'
        HIDING_KW           = '\hiding'
        USING_KW            = '\using'
        AS_KW               = '\as'
        FUNCTION_KW         = '\func'
        NON_ASSOC_KW        = '\fix'
        LEFT_ASSOC_KW       = '\fixl'
        RIGHT_ASSOC_KW      = '\fixr'
        INFIX_NON_KW        = '\infix'
        INFIX_LEFT_KW       = '\infixl'
        INFIX_RIGHT_KW      = '\infixr'
        PROP_KW             = '\Prop'
        WHERE_KW            = '\where'
        WITH_KW             = '\with'
        ELIM_KW             = '\elim'
        NEW_KW              = '\new'
        PI_KW               = '\Pi'
        SIGMA_KW            = '\Sigma'
        LAM_KW              = '\lam'
        LET_KW              = '\let'
        IN_KW               = '\in'
        CASE_KW             = '\case'
        DATA_KW             = '\data'
        CLASS_KW            = '\class'
        RECORD_KW           = '\record'
        EXTENDS_KW          = '\extends'
        INSTANCE_KW         = '\instance'
        TRUNCATED_KW        = '\truncated'
        LP_KW               = '\lp'
        LH_KW               = '\lh'
        SUC_KW              = '\suc'
        LEVELS_KW           = '\levels'
        MAX_KW              = '\max'
        INVALID_KW          = '\invalid'

        LINE_COMMENT        = "regexp:--[^\r\n]*"
        BLOCK_COMMENT       = '{- BLOCK_COMMENT -}'
    ]

    extends("def(Function|Data|Class|Instance)") = definition
    extends("(arr|new|pi|sigma|lam|let|case)Expr") = expr
    extends("(universe|setUniverse|truncatedUniverse|argument)AppExpr") = appExpr
    extends("atomArgument|newArg|universeAtom|implicitArgument|infixArgument|postfixArgument") = argument
}

statements ::= (topStatement | topStatement_recovery)*

private topStatement ::= !<<eof>> statement

private topStatement_recovery ::= topStatement_recover {
    recoverWhile = topStatement_recover
}

private topStatement_recover ::= !(OPEN_KW | IMPORT_KW | FUNCTION_KW | TRUNCATED_KW | DATA_KW | RECORD_KW | CLASS_KW | INSTANCE_KW | <<eof>>)

private statement_recover ::= !(WHERE_KW | RBRACE) & topStatement_recover

statement ::= statCmd | definition | statement_recovery

private statement_recovery ::= statement_recover {
    recoverWhile = statement_recover
}

statCmd ::= nsCmd ns_longName nsUsing? [HIDING_KW LPAREN <<comma_separated_sequence refIdentifier>> RPAREN] {
    pin = 1
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.NamespaceCommandHolder" ]
    mixin = "org.vclang.psi.ext.VcStatCmdImplMixin"
}

private ns_longName ::= longName {
    recoverWhile = ns_longName_recover
}

private ns_longName_recover ::= !(USING_KW | LPAREN | HIDING_KW) & statement_recover

nsCmd ::= OPEN_KW | IMPORT_KW

nsUsing ::= nsUsingUsing | nsUsingParams {
  recoverWhile = nsUsing_recover
}

private nsUsingUsing ::= USING_KW nsUsingParams {
    pin = 1
}

private nsUsingParams ::= LPAREN <<comma_separated_sequence nsId>>? RPAREN {
    pin = 1
}

private nsUsing_recover ::= !(LPAREN | HIDING_KW) & statement_recover

nsId ::= ns_refIdentifier [AS_KW prec? defIdentifier] {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.NameRenaming" ]
    mixin = "org.vclang.psi.ext.VcNsIdImplMixin"
    recoverWhile = nsId_recover
}

private nsId_recover ::= !(COMMA | RPAREN) & nsUsing_recover

private ns_refIdentifier ::= refIdentifier {
    recoverWhile = ns_refIdentifier_recover
}

private ns_refIdentifier_recover ::= !(AS_KW | COMMA | RPAREN) & nsUsing_recover

private classStats ::= LBRACE classStat* RBRACE { pin = 1 }

classStat ::= classFieldOrImplement | definition { recoverWhile = classStat_recover }

private classStat_recover ::= !(PIPE | RBRACE) & statement_recover

private classFieldOrImplement ::= pipe_def (classField | classImplement) { pin = 1 }

classField ::= prec? defIdentifier_typeTele typeTele* COLON expr {
    pin = 4
    implements = [ "org.vclang.psi.ext.PsiLocatedReferable"
                   "com.jetbrains.jetpad.vclang.term.group.Group.InternalReferable"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ClassField" ]
    mixin = "org.vclang.psi.ext.impl.ClassFieldAdapter"
    stubClass = "org.vclang.psi.stubs.VcClassFieldStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

classFieldSyn ::= refIdentifier fat_arrow_def prec? defIdentifier_classFieldSyn {
    pin = 1
    implements = [ "org.vclang.psi.ext.PsiLocatedReferable"
                   "com.jetbrains.jetpad.vclang.term.group.Group.InternalReferable"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ClassFieldSynonym" ]
    mixin = "org.vclang.psi.ext.impl.ClassFieldSynAdapter"
    stubClass = "org.vclang.psi.stubs.VcClassFieldSynStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private defIdentifier_classFieldSyn ::= defIdentifier {
    recoverWhile = pipe_seq_recover
}

classImplement ::= coClausePrivate {
    pin = 1
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ClassFieldImpl" ]
    mixin = "org.vclang.psi.ext.impl.ClassFieldImplAdapter"
    stubClass = "org.vclang.psi.stubs.VcClassImplementStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

definition ::= defFunction
    | defData
    | defClass
    | defInstance {
    implements = [ "org.vclang.psi.ext.PsiConcreteReferable"
                   "com.jetbrains.jetpad.vclang.term.group.ChildGroup" ]
    mixin = "org.vclang.psi.ext.impl.DefinitionAdapter"
}

defFunction ::= FUNCTION_KW prec? defIdentifier_func nameTele* [COLON expr] functionBody where? {
    pin = 1
    mixin = "org.vclang.psi.ext.impl.FunctionDefinitionAdapter"
    stubClass = "org.vclang.psi.stubs.VcDefFunctionStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private defIdentifier_func ::= defIdentifier {
    recoverWhile = defIdentifier_func_recover
}

private defIdentifier_func_recover ::= !(COLON | FAT_ARROW | WITH_KW | ELIM_KW | PIPE) & nameTele_first & statement_recover

defData ::= dataKw prec? defIdentifier_typeTele typeTele* dataUniverse? dataBody where? {
    pin = 1
    mixin = "org.vclang.psi.ext.impl.DataDefinitionAdapter"
    stubClass = "org.vclang.psi.stubs.VcDefDataStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private dataUniverse ::= COLON universeExpr {
    pin = 1
    recoverWhile = dataUniverse_recover
}

private dataUniverse_recover ::= !(PIPE | WITH_KW | ELIM_KW | FAT_ARROW) & statement_recover

private dataKw ::= truncatedKW DATA_KW | DATA_KW {
    pin(".*") = 1
}

private truncatedKW ::= TRUNCATED_KW {
  recoverWhile = statement_recover
}

defClass ::= (defClassClass | defClassRecord) where? {
    implements = "com.jetbrains.jetpad.vclang.naming.reference.ClassReferable"
    mixin = "org.vclang.psi.ext.impl.ClassDefinitionAdapter"
    stubClass = "org.vclang.psi.stubs.VcDefClassStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private defClassClass ::= CLASS_KW defClassHeader classBody? { pin = 1 }

private defClassRecord ::= RECORD_KW defClassHeader recordBody? { pin = 1 }

private defClassHeader ::= prec? defIdentifier fieldTele* [EXTENDS_KW <<comma_separated_sequence longName>>]

private classBody ::= classBodySyn | classStats {
    recoverWhile = statement_recover
}

private recordBody ::= classStats {
    recoverWhile = statement_recover
}

defInstance ::= INSTANCE_KW defIdentifier_instance nameTele* COLON argumentAppExpr coClauses? where? {
    pin = 1
    mixin = "org.vclang.psi.ext.impl.InstanceAdapter"
    stubClass = "org.vclang.psi.stubs.VcDefInstanceStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private defIdentifier_instance ::= defIdentifier {
    recoverWhile = defIdentifier_instance_recover
}

private defIdentifier_instance_recover ::= !COLON & nameTele_first & statement_recover

private classBodySyn ::= fat_arrow_def refIdentifier classBodySynStats? { pin = 1 }

private classBodySynStats ::= LBRACE classFieldSyn? (pipe_def classFieldSyn)* RBRACE { pin = 1 }

functionBody ::= functionTermBody | elim? functionClauses {
    recoverWhile = statement_recover
}

private functionTermBody ::= FAT_ARROW expr { pin = 1 }

dataBody ::= elim constructorClause* | [fat_arrow_def_pipe pipe_def? constructor] (pipe_def constructor)* {
    recoverWhile = statement_recover
}

private fat_arrow_def_pipe ::= FAT_ARROW {
    recoverWhile = def_pipe_recover
}

private def_pipe_recover ::= !(ID | PIPE | assoc) & statement_recover

private pipe_def ::= PIPE {
    recoverWhile = def_recover
}

private def_recover ::= !(ID | assoc) & statement_recover

constructorClause ::= PIPE <<comma_separated_sequence pattern>> fat_arrow_def_pipe_lbrace (constructor | LBRACE <<pipe_separated_sequence constructor>> RBRACE) {
    pin = 1
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ConstructorClause" ]
    mixin = "org.vclang.psi.ext.VcConstructorClauseImplMixin"
}

private fat_arrow_def ::= FAT_ARROW {
    recoverWhile = def_recover
}

private fat_arrow_def_pipe_lbrace ::= FAT_ARROW {
    recoverWhile = def_pipe_lbrace_recover
}

private def_pipe_lbrace_recover ::= !(ID | PIPE | LBRACE | assoc) & statement_recover

elim ::= WITH_KW | ELIM_KW <<comma_separated_sequence refIdentifier>> { pin(".*") = 1}

where ::= WHERE_KW (statementList | statement) { pin = 1 }

private statementList ::= LBRACE statement* RBRACE {
    pin = 1
}

pattern ::= atomPattern | patternConstructor {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Pattern" ]
    mixin = "org.vclang.psi.ext.VcPatternImplMixin"
    recoverWhile = pattern_recover
}

private pattern_recover ::= !(RPAREN | RBRACE | FAT_ARROW | PIPE | COMMA) & statement_recover

private patternConstructor ::= defIdentifier_pattern atomPatternOrPrefix* { pin = 1 }

atomPatternOrPrefix ::= atomPattern | defIdentifier_pattern {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Pattern" ]
    mixin = "org.vclang.psi.ext.VcPatternImplMixin"
}

private defIdentifier_pattern ::= defIdentifier {
    recoverWhile = defIdentifier_pattern_recover
}

private defIdentifier_pattern_recover ::= !(ID | LPAREN | LBRACE | UNDERSCORE) & pattern_recover

atomPattern ::= LPAREN <<comma_separated_sequence pattern>>? RPAREN
    | LBRACE pattern RBRACE
    | NUMBER
    | NEGATIVE_NUMBER
    | UNDERSCORE

constructor ::= prec? defIdentifier_typeTele typeTele* [elim? clausesWithBraces] {
    pin = 2
    implements = [ "org.vclang.psi.ext.PsiLocatedReferable"
                   "com.jetbrains.jetpad.vclang.term.group.Group.InternalReferable"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Constructor"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ConstructorClause" ]
    mixin = "org.vclang.psi.ext.impl.ConstructorAdapter"
    stubClass = "org.vclang.psi.stubs.VcConstructorStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
}

private assoc ::= NON_ASSOC_KW | LEFT_ASSOC_KW | RIGHT_ASSOC_KW | INFIX_NON_KW | INFIX_LEFT_KW | INFIX_RIGHT_KW

prec ::= assoc NUMBER

expr ::= arrExpr
    | sigmaExpr
    | piExpr
    | lamExpr
    | letExpr
    | newExpr
    | caseExpr {
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Expression"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Parameter" ]
    mixin = "org.vclang.psi.ext.VcExprImplMixin"
}

private expr_recover ::= !(LBRACE | RBRACE | RPAREN | IN_KW | ARROW | COMMA | PIPE | WITH_KW | ELIM_KW | FAT_ARROW) & statement_recover

arrExpr ::= expr ARROW expr {
    pin = 2
    rightAssociative = true
    mixin = "org.vclang.psi.ext.VcArrExprImplMixin"
}

newExpr ::= NEW_KW argumentAppExpr newExprTail
    | appExpr newExprTail {
    pin(".*") = 1
    mixin = "org.vclang.psi.ext.VcNewExprImplMixin"
}

private newExprTail ::= [LBRACE <<pipe_separated_sequence coClause>>? RBRACE (argument | argumentRecovery)*]

universeExpr ::= universeAppExpr
    | setUniverseAppExpr
    | truncatedUniverseAppExpr
    | PROP_KW {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcUniverseExprImplMixin"
}

appExpr ::= universeAppExpr
    | setUniverseAppExpr
    | truncatedUniverseAppExpr
    | argumentAppExpr {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcAppExprImplMixin"
    recoverWhile = expr_recover
}

caseExpr ::= CASE_KW <<comma_separated_sequence expr>> WITH_KW clausesWithBraces {
    pin = 1
    mixin = "org.vclang.psi.ext.VcCaseExprImplMixin"
    recoverWhile = expr_recover
}

piExpr ::= PI_KW typeTele+ ARROW expr {
    pin = 1
    mixin = "org.vclang.psi.ext.VcPiExprImplMixin"
}

sigmaExpr ::= SIGMA_KW typeTele* {
    pin = 1
    mixin = "org.vclang.psi.ext.VcSigmaExprImplMixin"
}

lamExpr ::= LAM_KW nameTele+ FAT_ARROW expr {
    pin = 1
    mixin = "org.vclang.psi.ext.VcLamExprImplMixin"
}

letExpr ::= LET_KW <<pipe_separated_sequence letClause>> IN_KW expr {
    pin = 1
    mixin = "org.vclang.psi.ext.VcLetExprImplMixin"
}

functionClauses ::= clausesWithBraces | (PIPE clause)*
private clausesWithBraces ::= LBRACE [pipe_def? clause] (pipe_def clause)* RBRACE { pin = 1 }

coClauses ::= LBRACE <<pipe_separated_sequence coClause>>? RBRACE | (PIPE coClause)+ {
    pin(".*") = 1
    recoverWhile = statement_recover
}

private pipe_seq_recover ::= !(PIPE | RBRACE) & statement_recover

clause ::= <<comma_separated_sequence pattern>> [FAT_ARROW expr] {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.FunctionClause" ]
    mixin = "org.vclang.psi.ext.VcClauseImplMixin"
    recoverWhile = pipe_seq_recover
}

coClause ::= coClausePrivate {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ClassFieldImpl" ]
    mixin = "org.vclang.psi.ext.VcCoClauseImplMixin"
    recoverWhile = pipe_seq_recover
}

private coClausePrivate ::= longName (coClauseRec | coClauseImpl) { pin = 1 }

private coClauseImpl ::= nameTele* FAT_ARROW expr { pin = 1 }

private coClauseRec ::= LBRACE <<pipe_separated_sequence coClause>>? RBRACE { pin = 1 }

letClause ::= defIdentifier_letClause nameTele* typeAnnotation? FAT_ARROW expr {
    pin = 1
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LetClause" ]
    mixin = "org.vclang.psi.ext.VcLetClauseImplMixin"
}

private defIdentifier_letClause ::= defIdentifier {
    recoverWhile = defIdentifier_letClause_recover
}

private defIdentifier_letClause_recover ::= !(COLON | FAT_ARROW | IN_KW) & nameTele_first & statement_recover

typeAnnotation ::= COLON expr { pin = 1 }

levelExpr ::= atomLevelExpr
    | SUC_KW atomLevelExpr
    | MAX_KW atomLevelExpr atomLevelExpr {
    pin(".*") = 1
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LevelExpression" ]
    mixin = "org.vclang.psi.ext.VcLevelExprImplMixin"
    recoverWhile = levelExpr_recover
}

private levelExpr_recover ::= !RPAREN & statement_recover

atomLevelExpr ::= LP_KW
    | LH_KW
    | NUMBER
    | LPAREN levelExpr RPAREN {
    pin(".*") = 1
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LevelExpression" ]
    mixin = "org.vclang.psi.ext.VcAtomLevelExprImplMixin"
}

universeAppExpr ::= UNIVERSE [atomLevelExpr atomLevelExpr?] {
    pin = 1
    mixin = "org.vclang.psi.ext.VcUniverseAppExprImplMixin"
}

setUniverseAppExpr ::= SET atomLevelExpr? {
    pin = 1
    mixin = "org.vclang.psi.ext.VcSetUniverseAppExprImplMixin"
}

truncatedUniverseAppExpr ::= TRUNCATED_UNIVERSE atomLevelExpr? {
    pin = 1
    mixin = "org.vclang.psi.ext.VcTruncatedUniverseAppExprImplMixin"
}

onlyLevelExpr ::= atomOnlyLevelExpr
    | MAX_KW atomLevelExpr atomLevelExpr
    | SUC_KW atomLevelExpr {
    pin(".*") = 1
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LevelExpression" ]
    mixin = "org.vclang.psi.ext.VcOnlyLevelExprImplMixin"
}

levelsExpr ::= levelsLevels | LPAREN levelsExpr RPAREN

private levelsLevels ::= LEVELS_KW (PROP_KW | (atomLevelExpr | UNDERSCORE) (atomLevelExpr | UNDERSCORE)) { pin = 1 }

atomOnlyLevelExpr ::= LP_KW
    | LH_KW
    | LPAREN onlyLevelExpr RPAREN {
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LevelExpression" ]
    mixin = "org.vclang.psi.ext.VcAtomOnlyLevelExprImplMixin"
}

argumentAppExpr ::= (longNameExpr | atomFieldsAcc) (argument | argumentRecovery)* {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcArgumentAppExprImplMixin"
    name = "defCall"
}

longNameExpr ::= longName (levelsExpr | atomOnlyLevelExpr atomOnlyLevelExpr?) {
    pin = 2
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcLongNameExprImplMixin"
}

fieldAcc ::= DOT NUMBER { pin = 1 }

atom ::= literal
    | tuple
    | NEGATIVE_NUMBER
    | NUMBER {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcAtomImplMixin"
}

tuple ::= LPAREN <<comma_separated_sequence tupleExpr>>? RPAREN {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcTupleImplMixin"
}

private tupleExpr ::= expr {
    recoverWhile = tupleExpr_recover
}

private tupleExpr_recover ::= !(RPAREN | COMMA) & statement_recover

atomFieldsAcc ::= atom fieldAcc* {
    pin = 1
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcAtomFieldsAccImplMixin"
    recoverWhile = argument_recover
}

argument ::= atomArgument
    | newArg
    | universeAtom
    | implicitArgument
    | infixArgument
    | postfixArgument {
    implements = [ "org.vclang.psi.ext.VcCompositeElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Argument"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.BinOpSequenceElem" ]
    mixin = "org.vclang.psi.ext.VcArgumentImplMixin"
}

private argumentRecovery ::= argument_recover {
    recoverWhile = argument_recover
}

private argument_recover ::= !(NEW_KW | NUMBER | INFIX | POSTFIX) & typeTele_recover

atomArgument ::= atomFieldsAcc {
    implements = "org.vclang.psi.ext.VcCompositeElement"
    mixin = "org.vclang.psi.ext.VcAtomArgumentImplMixin"
}

implicitArgument ::= LBRACE expr RBRACE {
    implements = "org.vclang.psi.ext.VcCompositeElement"
    mixin = "org.vclang.psi.ext.VcImplicitArgumentImplMixin"
}

infixArgument ::= INFIX {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcInfixArgumentImplMixin"
}

postfixArgument ::= POSTFIX {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcPostfixArgumentImplMixin"
}

newArg ::= NEW_KW argumentAppExpr [LBRACE <<pipe_separated_sequence coClause>>? RBRACE] {
    pin = 1
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcNewArgImplMixin"
}

longName ::= refIdentifier (DOT refIdentifier)* {
    pin = 1
    implements = [ "org.vclang.psi.ext.VcSourceNode"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.LongReference" ]
    mixin = "org.vclang.psi.ext.VcLongNameImplMixin"
}

literal ::= longName
    | PROP_KW
    | UNDERSCORE
    | goal {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcLiteralImplMixin"
}

goal ::= LGOAL defIdentifier_goal? [LBRACE expr RBRACE] RBRACE {
    pin = 1
    implements = "org.vclang.psi.ext.PsiReferable"
    mixin = "org.vclang.psi.ext.PsiReferableImpl"
}

private defIdentifier_goal ::= defIdentifier {
    recoverWhile = defIdentifier_goal_recover
}

private defIdentifier_goal_recover ::= !(LBRACE | RBRACE) & statement_recover

universeAtom ::= SET
    | UNIVERSE
    | TRUNCATED_UNIVERSE {
    implements = "org.vclang.psi.VcExpr"
    mixin = "org.vclang.psi.ext.VcUniverseAtomImplMixin"
}

nameTele ::= identifierOrUnknown
    | nameTeleExplicit
    | nameTeleImplicit {
        implements = [ "org.vclang.psi.ext.VcCompositeElement"
                       "com.jetbrains.jetpad.vclang.term.abs.Abstract.Parameter" ]
        mixin = "org.vclang.psi.ext.VcNameTeleImplMixin"
        recoverWhile = nameTele_recover
    }

private nameTeleExplicit ::= LPAREN identifierOrUnknown+ COLON expr RPAREN { pin = 1}

private nameTeleImplicit ::= LBRACE identifierOrUnknown [identifierOrUnknown* COLON expr] RBRACE { pin = 1 }

private nameTele_first ::= !(ID | UNDERSCORE | LPAREN | LBRACE)

private nameTele_recover ::= !(ID | UNDERSCORE | LPAREN | LBRACE | FAT_ARROW | COLON | PIPE | RBRACE | WITH_KW | ELIM_KW) & statement_recover

fieldTele ::= fieldTeleExplicit | fieldTeleImplicit {
        implements = [ "org.vclang.psi.ext.VcCompositeElement"
                       "com.jetbrains.jetpad.vclang.term.abs.Abstract.Parameter" ]
        mixin = "org.vclang.psi.ext.VcFieldTeleImplMixin"
        recoverWhile = fieldTele_recover
    }

private fieldTeleExplicit ::= LPAREN fieldDefIdentifier+ COLON expr RPAREN { pin = 1 }

private fieldTeleImplicit ::= LBRACE fieldDefIdentifier+ COLON expr RBRACE { pin = 2 }

private fieldTele_recover ::= !(EXTENDS_KW | FAT_ARROW | LBRACE | LPAREN) & statement_recover

typeTele ::= literal
    | universeAtom
    | typedTeleExplicit
    | typedTeleImplicit {
        implements = [ "org.vclang.psi.ext.VcCompositeElement"
                       "com.jetbrains.jetpad.vclang.term.abs.Abstract.Parameter" ]
        mixin = "org.vclang.psi.ext.VcTypeTeleImplMixin"
        recoverWhile = typeTele_recover
    }

private typedTeleExplicit ::= LPAREN typedExpr RPAREN { pin = 1 }

private typedTeleImplicit ::= LBRACE typedExpr RBRACE { pin = 1 }

private typeTele_recover ::= !(LPAREN | LBRACE | ID | COLON | WITH_KW | ELIM_KW | FAT_ARROW | RPAREN | RBRACE | PIPE | ARROW | COMMA | IN_KW | SET | UNIVERSE | TRUNCATED_UNIVERSE | PROP_KW | UNDERSCORE | LGOAL) & statement_recover

typedExpr ::= typedExprNamed | expr

private typedExprNamed ::= identifierOrUnknown+ COLON expr { pin = 2 }

identifierOrUnknown ::= defIdentifier | UNDERSCORE

fieldDefIdentifier ::= defIdentifier {
    implements = [ "org.vclang.psi.ext.PsiLocatedReferable"
                   "com.jetbrains.jetpad.vclang.term.group.Group.InternalReferable"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.ClassField"
                   "org.vclang.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.psi.ext.impl.FieldDefIdentifierAdapter"
    stubClass = "org.vclang.psi.stubs.VcClassFieldParamStub"
    elementTypeFactory = "org.vclang.psi.stubs.StubImplementationsKt.factory"
    recoverWhile = fieldDefIdentifier_recover
}

private fieldDefIdentifier_recover ::= !(COLON | ID | EXTENDS_KW | FAT_ARROW | LBRACE | LPAREN) & topStatement_recover

defIdentifier ::= ID {
    implements = [ "org.vclang.psi.ext.PsiReferable"
                   "org.vclang.psi.ext.VcReferenceElement" ]
    mixin = "org.vclang.psi.ext.VcDefIdentifierImplMixin"
}

private defIdentifier_typeTele ::= defIdentifier {
    recoverWhile = typeTele_recover
}

refIdentifier ::= ID {
    implements = [ "org.vclang.psi.ext.VcReferenceElement"
                   "com.jetbrains.jetpad.vclang.term.abs.Abstract.Reference" ]
    mixin = "org.vclang.psi.ext.VcRefIdentifierImplMixin"
}

private meta comma_separated_sequence ::= <<p>> (COMMA <<p>>)* { pin(".*") = 1 }

private meta pipe_separated_sequence ::= pipe_def? <<p>> (pipe_def <<p>>)*
