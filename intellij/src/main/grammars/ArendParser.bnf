{
    parserClass = "org.arend.parser.ArendParser"
    parserImports = ["static org.arend.parser.ParserMixin.recursion_guard_"]

    implements = 'org.arend.psi.ext.ArendCompositeElement'
    extends = 'org.arend.psi.ext.ArendCompositeElementImpl'

    elementTypeHolderClass = "org.arend.psi.ArendElementTypes"

    elementTypeClass = "org.arend.psi.ArendCompositeElementType"
    tokenTypeClass = "org.arend.psi.ArendTokenType"

    psiClassPrefix = "Arend"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.arend.psi"
    psiImplPackage = "org.arend.psi.impl"

    generateTokenAccessors = true

    tokens = [
        LBRACE              = '{'
        RBRACE              = '}'
        TGOAL               = '{?}'
        LGOAL               = '{?'
        LPAREN              = '('
        RPAREN              = ')'
        COLON               = ':'
        ARROW               = '->'
        FAT_ARROW           = '=>'
        DOT                 = '.'
        COMMA               = ','
        UNDERSCORE          = '_'
        PIPE                = '|'
        LINE_DOC_COMMENT_START = '-- |'
        BLOCK_COMMENT_START = '{-'
        BLOCK_COMMENT_END   = '-}'
        BLOCK_DOC_COMMENT_START = '{- |'
        BLOCK_DOC_TEXT      = "regexp:([^{-]|-[^}]|\{[^-])+"
        LINE_DOC_TEXT       = "regexp:[^\r\n]*"

        OPEN_KW             = '\open'
        IMPORT_KW           = '\import'
        HIDING_KW           = '\hiding'
        USING_KW            = '\using'
        AS_KW               = '\as'
        MODULE_KW           = '\module'
        FUNCTION_KW         = '\func'
        LEMMA_KW            = '\lemma'
        FIELD_KW            = '\field'
        PROPERTY_KW         = '\property'
        CLASSIFYING_KW      = '\classifying'
        COERCE_KW           = '\coerce'
        USE_KW              = '\use'
        NON_ASSOC_KW        = '\fix'
        LEFT_ASSOC_KW       = '\fixl'
        RIGHT_ASSOC_KW      = '\fixr'
        INFIX_NON_KW        = '\infix'
        INFIX_LEFT_KW       = '\infixl'
        INFIX_RIGHT_KW      = '\infixr'
        PROP_KW             = '\Prop'
        THIS_KW             = '\this'
        WHERE_KW            = '\where'
        WITH_KW             = '\with'
        COWITH_KW           = '\cowith'
        ELIM_KW             = '\elim'
        NEW_KW              = '\new'
        PI_KW               = '\Pi'
        SIGMA_KW            = '\Sigma'
        LAM_KW              = '\lam'
        LET_KW              = '\let'
        LETS_KW             = '\let!'
        IN_KW               = '\in'
        CASE_KW             = '\case'
        RETURN_KW           = '\return'
        DATA_KW             = '\data'
        CLASS_KW            = '\class'
        RECORD_KW           = '\record'
        EXTENDS_KW          = '\extends'
        INSTANCE_KW         = '\instance'
        TRUNCATED_KW        = '\truncated'
        LP_KW               = '\lp'
        LH_KW               = '\lh'
        SUC_KW              = '\suc'
        LEVEL_KW            = '\level'
        MAX_KW              = '\max'
        INVALID_KW          = '\invalid'

        LINE_COMMENT        = "regexp:-- ([^|])[^\r\n]*"
        BLOCK_COMMENT       = '{- BLOCK_COMMENT -}'
        // LINE_DOC_COMMENT    = '  '

    ]

    extends("def(Function|Data|Class|Instance)") = definition
    extends("(arr|new|pi|sigma|lam|let|case)Expr") = expr
    extends("(universe|setUniverse|truncatedUniverse|argument)AppExpr") = appExpr
    extends("atomArgument|newArg|universeAtom|implicitArgument|infixArgument|postfixArgument") = argument
}

statements ::= (topStatement | topStatement_recovery)*

private topStatement ::= !<<eof>> statement

private topStatement_recovery ::= topStatement_recover {
    recoverWhile = topStatement_recover
}

private topStatement_recover ::= !(OPEN_KW | IMPORT_KW | MODULE_KW | FUNCTION_KW | LEMMA_KW | USE_KW | FIELD_KW | PROPERTY_KW | TRUNCATED_KW | DATA_KW | RECORD_KW | CLASS_KW | INSTANCE_KW | <<eof>>)

private statement_recover ::= !(WHERE_KW | RBRACE) & topStatement_recover

statement ::= statCmd | definition | defModule | statement_recovery

private statement_recovery ::= statement_recover {
    recoverWhile = statement_recover
}

statCmd ::= (OPEN_KW | IMPORT_KW) ns_longName nsUsing? [HIDING_KW LPAREN <<comma_separated_sequence refIdentifier>> RPAREN] {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.NamespaceCommandHolder" ]
    mixin = "org.arend.psi.ext.ArendStatCmdImplMixin"
}

private ns_longName ::= longName {
    recoverWhile = ns_longName_recover
}

private ns_longName_recover ::= !(USING_KW | LPAREN | HIDING_KW) & statement_recover

nsUsing ::= nsUsingUsing | nsUsingParams {
  recoverWhile = nsUsing_recover
}

private nsUsingUsing ::= USING_KW nsUsingParams {
    pin = 1
}

private nsUsingParams ::= LPAREN <<comma_separated_sequence nsId>>? RPAREN {
    pin = 1
}

private nsUsing_recover ::= !(LPAREN | HIDING_KW) & statement_recover

nsId ::= ns_refIdentifier [AS_KW prec? defIdentifier] {
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.NameRenaming" ]
    mixin = "org.arend.psi.ext.ArendNsIdImplMixin"
    recoverWhile = nsId_recover
}

private nsId_recover ::= !(COMMA | RPAREN) & nsUsing_recover

private ns_refIdentifier ::= refIdentifier {
    recoverWhile = ns_refIdentifier_recover
}

private ns_refIdentifier_recover ::= !(AS_KW | COMMA | RPAREN) & nsUsing_recover

private classStats ::= LBRACE classStatRecovery classStat* RBRACE | classFieldOrImplement* {
    pin(".*") = 1
    recoverWhile = statement_recover
}

classStat ::= classFieldOrImplement | definition | classFieldStat | defModule { recoverWhile = classStat_recover }

private classStatRecovery ::= {
  recoverWhile = classStat_recover
}

private classStat_recover ::= !(PIPE | RBRACE) & statement_recover

private classFieldOrImplement ::= pipe_def (classField | classImplement) { pin = 1 }

private classFieldStat ::= (FIELD_KW | PROPERTY_KW) classField { pin = 1 }

classField ::= prec? defIdentifier_typeTele typeTele* COLON returnExpr {
    pin = 4
    implements = [ "org.arend.psi.ext.PsiLocatedReferable"
                   "org.arend.psi.ext.impl.ArendInternalReferable"
                   "org.arend.naming.reference.FieldReferable"
                   "org.arend.term.abs.Abstract.ClassField" ]
    mixin = "org.arend.psi.ext.impl.ClassFieldAdapter"
    stubClass = "org.arend.psi.stubs.ArendClassFieldStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

classImplement ::= coClausePrivate {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.ClassFieldImpl"
                   "org.arend.psi.CoClauseBase" ]
    mixin = "org.arend.psi.ext.impl.ClassFieldImplAdapter"
    stubClass = "org.arend.psi.stubs.ArendClassImplementStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

definition ::= defFunction
    | defData
    | defClass
    | defInstance {
    implements = [ "org.arend.psi.ext.PsiConcreteReferable"
                   "org.arend.psi.ext.impl.ArendGroup" ]
    mixin = "org.arend.psi.ext.impl.DefinitionAdapter"
}

defModule ::= moduleHeader where? {
    pin = 1
    implements = "org.arend.psi.ext.impl.ArendGroup"
    mixin = "org.arend.psi.ext.impl.ModuleAdapter"
    stubClass = "org.arend.psi.stubs.ArendDefModuleStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

private moduleHeader ::= MODULE_KW defIdentifier {
    pin = 1
    recoverWhile = statement_recover
}

defFunction ::= (FUNCTION_KW | LEMMA_KW | useMod) prec? defIdentifier_func nameTele* functionType? functionBody? where? {
    pin = 1
    implements = [ "org.arend.term.abs.Abstract.FunctionDefinition"
                   "org.arend.psi.ClassReferenceHolder" ]
    mixin = "org.arend.psi.ext.impl.FunctionDefinitionAdapter"
    stubClass = "org.arend.psi.stubs.ArendDefFunctionStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

private functionType ::= COLON returnExpr { pin = 1 }

returnExpr ::= expr | LEVEL_KW atomFieldsAcc atomFieldsAcc { pin(".*") = 1 }

private useMod ::= USE_KW (COERCE_KW | LEVEL_KW) { pin = 1 }

private defIdentifier_func ::= defIdentifier {
    recoverWhile = defIdentifier_func_recover
}

private defIdentifier_func_recover ::= !(COLON | FAT_ARROW | COWITH_KW | WITH_KW | ELIM_KW | PIPE) & nameTele_first & statement_recover

defInstance ::= INSTANCE_KW prec? defIdentifier_func nameTele* functionType? instanceBody? where? {
    pin = 1
    implements = [ "org.arend.term.abs.Abstract.FunctionDefinition"
                   "org.arend.psi.ClassReferenceHolder" ]
    mixin = "org.arend.psi.ext.impl.InstanceAdapter"
    stubClass = "org.arend.psi.stubs.ArendDefInstanceStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

defData ::= dataKw prec? defIdentifier_typeTele typeTele* dataUniverse? dataBody? where? {
    pin = 1
    mixin = "org.arend.psi.ext.impl.DataDefinitionAdapter"
    stubClass = "org.arend.psi.stubs.ArendDefDataStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

private dataUniverse ::= COLON universeExpr {
    pin = 1
    recoverWhile = dataUniverse_recover
}

private dataUniverse_recover ::= !(PIPE | WITH_KW | ELIM_KW | FAT_ARROW) & statement_recover

private dataKw ::= truncatedKW DATA_KW | DATA_KW {
    pin(".*") = 1
}

private truncatedKW ::= TRUNCATED_KW {
  recoverWhile = statement_recover
}

defClass ::= (defClassClass | defClassRecord) where? {
    implements = "org.arend.naming.reference.ClassReferable"
    mixin = "org.arend.psi.ext.impl.ClassDefinitionAdapter"
    stubClass = "org.arend.psi.stubs.ArendDefClassStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

private defClassClass ::= CLASS_KW defClassHeader classStats { pin = 1 }

private defClassRecord ::= RECORD_KW defClassHeader classStats { pin = 1 }

private defClassHeader ::= prec? defIdentifier fieldTele* [EXTENDS_KW <<comma_separated_sequence longName>>]

functionBody ::= functionTermBody
    | COWITH_KW coClauses?
    | elim functionClauses?
    | functionClauses {
    pin(".*") = 1
    recoverWhile = statement_recover
}

instanceBody ::= functionTermBody
    | elim functionClauses?
    | COWITH_KW coClauses?
    | coClauseReg+ {
    pin(".*") = 1
    recoverWhile = statement_recover
}

private functionTermBody ::= FAT_ARROW expr { pin = 1 }

dataBody ::= elim constructorClauses | [fat_arrow_def_pipe pipe_def? constructor] (pipe_def constructor)+ {
    recoverWhile = statement_recover
}

private constructorClauses ::= LBRACE constructorClause* RBRACE | constructorClause* { pin(".*") = 1 }

private fat_arrow_def_pipe ::= FAT_ARROW {
    recoverWhile = def_pipe_recover
}

private def_pipe_recover ::= !(ID | PIPE | assoc) & statement_recover

private pipe_def ::= PIPE {
    recoverWhile = def_recover
}

private def_recover ::= !(ID | LPAREN | assoc) & statement_recover

constructorClause ::= PIPE <<comma_separated_sequence pattern>> fat_arrow_def_pipe_lbrace (constructor | LBRACE <<pipe_separated_sequence constructor>> RBRACE) {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.ConstructorClause" ]
    mixin = "org.arend.psi.ext.ArendConstructorClauseImplMixin"
}

private fat_arrow_def_pipe_lbrace ::= FAT_ARROW {
    recoverWhile = def_pipe_lbrace_recover
}

private def_pipe_lbrace_recover ::= !(ID | PIPE | LBRACE | assoc) & statement_recover

elim ::= WITH_KW | ELIM_KW <<comma_separated_sequence refIdentifier>> { pin(".*") = 1}

where ::= WHERE_KW (statementList | statement) { pin = 1 }

private statementList ::= LBRACE statement* RBRACE {
    pin = 1
}

pattern ::= atomPattern asPattern? | patternConstructor {
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.Pattern" ]
    mixin = "org.arend.psi.ext.ArendPatternImplMixin"
    recoverWhile = pattern_recover
}

private pattern_recover ::= !(RPAREN | RBRACE | FAT_ARROW | PIPE | COMMA) & statement_recover

private patternConstructor ::= defIdentifier_pattern (private_typeAnnotation | atomPatternOrPrefix* asPattern?) { pin = 1 }

asPattern ::= AS_KW defIdentifier private_typeAnnotation? {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.TypedReferable" ]
    mixin = "org.arend.psi.ext.ArendAsPatternImplMixin"
}

private private_typeAnnotation ::= COLON expr { pin = 1 }

atomPatternOrPrefix ::= atomPattern | defIdentifier_pattern {
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.Pattern" ]
    mixin = "org.arend.psi.ext.ArendPatternImplMixin"
}

private defIdentifier_pattern ::= defIdentifier !DOT | longName {
    recoverWhile = defIdentifier_pattern_recover
}

private defIdentifier_pattern_recover ::= !(ID | LPAREN | LBRACE | NUMBER | UNDERSCORE | COLON | AS_KW) & pattern_recover

atomPattern ::= LPAREN <<comma_separated_sequence pattern>>? RPAREN
    | LBRACE pattern RBRACE
    | NUMBER
    | NEGATIVE_NUMBER
    | UNDERSCORE

constructor ::= prec? defIdentifier_constructor typeTele* /* TODO[hits] [COLON expr] */ [elim? clausesWithBraces] {
    pin = 2
    implements = [ "org.arend.psi.ext.PsiLocatedReferable"
                   "org.arend.psi.ext.impl.ArendInternalReferable"
                   "org.arend.term.abs.Abstract.Constructor"
                   "org.arend.term.abs.Abstract.ConstructorClause" ]
    mixin = "org.arend.psi.ext.impl.ConstructorAdapter"
    stubClass = "org.arend.psi.stubs.ArendConstructorStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
}

private defIdentifier_constructor ::= defIdentifier {
    recoverWhile = defIdentifier_constructor_recover
}

private defIdentifier_constructor_recover ::= !(LPAREN | LBRACE | ID | PROP_KW | UNDERSCORE | TGOAL | LGOAL | SET | UNIVERSE | TRUNCATED_UNIVERSE | COLON | WITH_KW | ELIM_KW | PIPE | RBRACE) & statement_recover

private assoc ::= NON_ASSOC_KW | LEFT_ASSOC_KW | RIGHT_ASSOC_KW | INFIX_NON_KW | INFIX_LEFT_KW | INFIX_RIGHT_KW

prec ::= assoc NUMBER { pin = 1 }

expr ::= arrExpr
    | sigmaExpr
    | piExpr
    | lamExpr
    | letExpr
    | newExpr
    | caseExpr {
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.Expression"
                   "org.arend.term.abs.Abstract.Parameter" ]
    mixin = "org.arend.psi.ext.ArendExprImplMixin"
}

private expr_recover ::= !(LBRACE | RBRACE | RPAREN | IN_KW | ARROW | COMMA | PIPE | COWITH_KW | WITH_KW | ELIM_KW | FAT_ARROW | AS_KW | RETURN_KW | COLON) & statement_recover

arrExpr ::= expr ARROW expr {
    pin = 2
    rightAssociative = true
    mixin = "org.arend.psi.ext.ArendArrExprImplMixin"
}

newExpr ::= NEW_KW argumentAppExpr newExprTail
    | appExpr newExprTail {
    pin(".*") = 1
    mixin = "org.arend.psi.ext.ArendNewExprImplMixin"
}

private coClauseSequence ::= coClauseReg* {
    recoverWhile = statement_recover
}

private newExprTail ::= [LBRACE coClauseSequence RBRACE (argument | argumentRecovery)*]

universeExpr ::= universeAppExpr
    | setUniverseAppExpr
    | truncatedUniverseAppExpr
    | PROP_KW {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendUniverseExprImplMixin"
}

appExpr ::= universeAppExpr
    | setUniverseAppExpr
    | truncatedUniverseAppExpr
    | argumentAppExpr {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendAppExprImplMixin"
    recoverWhile = expr_recover
}

caseExpr ::= CASE_KW <<comma_separated_sequence caseArg>> returnCaseExpr? WITH_KW clausesWithBraces {
    pin = 1
    mixin = "org.arend.psi.ext.ArendCaseExprImplMixin"
    recoverWhile = expr_recover
}

private returnCaseExpr ::= RETURN_KW returnExpr {
    pin = 1
    recoverWhile = returnCaseExpr_recover
}

private returnCaseExpr_recover ::= !WITH_KW & expr_recover

caseArg ::= caseArgExprAs [COLON expr] {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.CaseArgument" ]
    mixin = "org.arend.psi.ext.ArendCaseArgImplMixin"
    recoverWhile = caseArg_recover
}

private caseArg_recover ::= !(COMMA | RETURN_KW | WITH_KW) & expr_recover

private caseArgExprAs ::= caseArgExpr [AS_KW defIdentifier] {
    pin = 1
    recoverWhile = caseArgExprAs_recover
}

private caseArgExprAs_recover ::= !COLON & expr_recover

private caseArgExpr ::= expr {
    recoverWhile = caseArgExpr_recover
}

private caseArgExpr_recover ::= !(AS_KW | COLON) & expr_recover

piExpr ::= PI_KW typeTele+ ARROW expr {
    pin = 1
    mixin = "org.arend.psi.ext.ArendPiExprImplMixin"
}

sigmaExpr ::= SIGMA_KW typeTele* {
    pin = 1
    mixin = "org.arend.psi.ext.ArendSigmaExprImplMixin"
}

lamExpr ::= LAM_KW nameTele+ FAT_ARROW expr {
    pin = 1
    mixin = "org.arend.psi.ext.ArendLamExprImplMixin"
}

letExpr ::= (LET_KW | LETS_KW) <<pipe_separated_sequence letClause>> IN_KW expr {
    pin = 1
    mixin = "org.arend.psi.ext.ArendLetExprImplMixin"
}

functionClauses ::= clausesWithBraces | (pipe_pattern clause)+
private clausesWithBraces ::= LBRACE [pipe_pattern? clause] pipeClause* RBRACE { pin = 1 }

private pipeClause ::= pipe_pattern clause { pin = 1 }

private pipe_pattern ::= PIPE {
    recoverWhile = pipe_pattern_recover
}

private pipe_pattern_recover ::= !(ID | LPAREN | LBRACE | NUMBER | NEGATIVE_NUMBER | UNDERSCORE) & statement_recover

private coClauses ::= LBRACE coClauseSequence RBRACE | coClauseReg+ {
    pin(".*") = 1
    recoverWhile = statement_recover
}

private pipe_seq_recover ::= !(PIPE | RBRACE) & statement_recover

clause ::= <<comma_separated_sequence pattern>> [FAT_ARROW expr] {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.FunctionClause" ]
    mixin = "org.arend.psi.ext.ArendClauseImplMixin"
    recoverWhile = pipe_seq_recover
}

coClause ::= PIPE coClausePrivate {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.ClassFieldImpl"
                   "org.arend.psi.CoClauseBase" ]
    mixin = "org.arend.psi.ext.ArendCoClauseImplMixin"
}

private coClauseReg ::= coClause {
    recoverWhile = pipe_seq_recover
}

private coClauseImp ::= coClause {
    recoverWhile = co_clause_imp_recover
}

private co_clause_imp_recover ::= !(PIPE | RBRACE | ID | UNDERSCORE) & statement_recover

private coClausePrivate ::= longName (coClauseRec | coClauseImpl) { pin = 1 }

private coClauseImpl ::= nameTele* FAT_ARROW expr { pin = 1 }

private coClauseRec ::= LBRACE coClauseImp* RBRACE

letClause ::= letClauseName FAT_ARROW expr {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LetClause" ]
    mixin = "org.arend.psi.ext.ArendLetClauseImplMixin"
}

private letClauseName ::= defIdentifier_letClause nameTele* typeAnnotation? | letClausePattern { pin(".*") = 1 }

letClausePattern ::= defIdentifier typeAnnotation? | LPAREN <<comma_separated_sequence letClausePattern>> RPAREN {
    pin(".*") = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LetClausePattern" ]
    mixin = "org.arend.psi.ext.ArendLetClausePatternImplMixin"
}

private defIdentifier_letClause ::= defIdentifier {
    recoverWhile = defIdentifier_letClause_recover
}

private defIdentifier_letClause_recover ::= !(COLON | FAT_ARROW | IN_KW) & nameTele_first & statement_recover

typeAnnotation ::= COLON expr { pin = 1 }

levelExpr ::= atomLevelExpr
    | SUC_KW atomLevelExpr
    | MAX_KW atomLevelExpr atomLevelExpr {
    pin(".*") = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LevelExpression" ]
    mixin = "org.arend.psi.ext.ArendLevelExprImplMixin"
    recoverWhile = levelExpr_recover
}

private levelExpr_recover ::= !RPAREN & statement_recover

atomLevelExpr ::= LP_KW
    | LH_KW
    | NUMBER
    | LPAREN levelExpr RPAREN {
    pin(".*") = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LevelExpression" ]
    mixin = "org.arend.psi.ext.ArendAtomLevelExprImplMixin"
}

universeAppExpr ::= UNIVERSE [atomLevelExpr atomLevelExpr?] {
    pin = 1
    mixin = "org.arend.psi.ext.ArendUniverseAppExprImplMixin"
}

setUniverseAppExpr ::= SET atomLevelExpr? {
    pin = 1
    mixin = "org.arend.psi.ext.ArendSetUniverseAppExprImplMixin"
}

truncatedUniverseAppExpr ::= TRUNCATED_UNIVERSE atomLevelExpr? {
    pin = 1
    mixin = "org.arend.psi.ext.ArendTruncatedUniverseAppExprImplMixin"
}

onlyLevelExpr ::= atomOnlyLevelExpr
    | MAX_KW atomLevelExpr atomLevelExpr
    | SUC_KW atomLevelExpr {
    pin(".*") = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LevelExpression" ]
    mixin = "org.arend.psi.ext.ArendOnlyLevelExprImplMixin"
}

levelsExpr ::= levelsLevels | LPAREN levelsExpr RPAREN

private levelsLevels ::= LEVEL_KW (PROP_KW | (atomLevelExpr | UNDERSCORE) (atomLevelExpr | UNDERSCORE)) { pin = 1 }

atomOnlyLevelExpr ::= LP_KW
    | LH_KW
    | LPAREN onlyLevelExpr RPAREN {
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LevelExpression" ]
    mixin = "org.arend.psi.ext.ArendAtomOnlyLevelExprImplMixin"
}

argumentAppExpr ::= (longNameExpr | atomFieldsAcc) (argument | argumentRecovery)* {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendArgumentAppExprImplMixin"
    name = "defCall"
}

longNameExpr ::= longName (levelsExpr | atomOnlyLevelExpr atomOnlyLevelExpr?) {
    pin = 2
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendLongNameExprImplMixin"
}

fieldAcc ::= DOT NUMBER { pin = 1 }

atom ::= literal
    | tuple
    | NEGATIVE_NUMBER
    | NUMBER
    | THIS_KW {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendAtomImplMixin"
}

tuple ::= LPAREN <<comma_separated_sequence tupleExpr>>? RPAREN {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendTupleImplMixin"
}

tupleExpr ::= expr [COLON expr] {
    pin = 1
    recoverWhile = tupleExpr_recover
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.Expression" ]
    mixin = "org.arend.psi.ext.ArendTupleExprImplMixin"
}

private tupleExpr_recover ::= !(RPAREN | COMMA) & statement_recover

atomFieldsAcc ::= atom fieldAcc* {
    pin = 1
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendAtomFieldsAccImplMixin"
    recoverWhile = argument_recover
}

argument ::= atomArgument
    | newArg
    | universeAtom
    | implicitArgument
    | infixArgument
    | postfixArgument {
    implements = [ "org.arend.psi.ext.ArendCompositeElement"
                   "org.arend.term.abs.Abstract.Argument"
                   "org.arend.term.abs.Abstract.BinOpSequenceElem" ]
    mixin = "org.arend.psi.ext.ArendArgumentImplMixin"
}

private argumentRecovery ::= argument_recover {
    recoverWhile = argument_recover
}

private argument_recover ::= !(NEW_KW | NUMBER | INFIX | POSTFIX | AS_KW | RETURN_KW | COWITH_KW | THIS_KW) & typeTele_recover

atomArgument ::= atomFieldsAcc {
    implements = "org.arend.psi.ext.ArendCompositeElement"
    mixin = "org.arend.psi.ext.ArendAtomArgumentImplMixin"
}

implicitArgument ::= LBRACE expr RBRACE {
    implements = "org.arend.psi.ext.ArendCompositeElement"
    mixin = "org.arend.psi.ext.ArendImplicitArgumentImplMixin"
}

infixArgument ::= INFIX {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendInfixArgumentImplMixin"
}

postfixArgument ::= POSTFIX {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendPostfixArgumentImplMixin"
}

newArg ::= NEW_KW argumentAppExpr [LBRACE coClauseSequence RBRACE] {
    pin = 1
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendNewArgImplMixin"
}

longName ::= refIdentifier (DOT refIdentifier)* {
    pin = 1
    implements = [ "org.arend.psi.ext.ArendSourceNode"
                   "org.arend.term.abs.Abstract.LongReference" ]
    mixin = "org.arend.psi.ext.ArendLongNameImplMixin"
}

literal ::= longName
    | PROP_KW
    | UNDERSCORE
    | goal {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendLiteralImplMixin"
}

goal ::= TGOAL | lGoal {
    implements = "org.arend.psi.ext.PsiReferable"
    mixin = "org.arend.psi.ext.PsiReferableImpl"
}

private lGoal ::= LGOAL defIdentifier_goal? [LPAREN expr? RPAREN] RBRACE { pin = 1 }

private defIdentifier_goal ::= defIdentifier {
    recoverWhile = defIdentifier_goal_recover
}

private defIdentifier_goal_recover ::= !(LPAREN | RBRACE) & statement_recover

universeAtom ::= SET
    | UNIVERSE
    | TRUNCATED_UNIVERSE {
    implements = "org.arend.psi.ArendExpr"
    mixin = "org.arend.psi.ext.ArendUniverseAtomImplMixin"
}

nameTele ::= identifierOrUnknown
    | nameTeleExplicit
    | nameTeleImplicit {
        implements = [ "org.arend.psi.ext.ArendCompositeElement"
                       "org.arend.term.abs.Abstract.Parameter" ]
        mixin = "org.arend.psi.ext.ArendNameTeleImplMixin"
        recoverWhile = nameTele_recover
    }

private nameTeleExplicit ::= LPAREN identifierOrUnknown+ COLON expr RPAREN { pin = 1}

private nameTeleImplicit ::= LBRACE identifierOrUnknown [identifierOrUnknown* COLON expr] RBRACE { pin = 1 }

private nameTele_first ::= !(ID | UNDERSCORE | LPAREN | LBRACE)

private nameTele_recover ::= !(ID | UNDERSCORE | LPAREN | LBRACE | FAT_ARROW | COLON | PIPE | RBRACE | WITH_KW | COWITH_KW | ELIM_KW) & statement_recover

fieldTele ::= fieldTeleExplicit | fieldTeleImplicit | fieldTeleRecovery {
        implements = [ "org.arend.psi.ext.ArendCompositeElement"
                       "org.arend.term.abs.Abstract.FieldParameter" ]
        mixin = "org.arend.psi.ext.ArendFieldTeleImplMixin"
    }

private fieldTeleExplicit ::= LPAREN CLASSIFYING_KW? fieldDefIdentifier+ COLON expr RPAREN { pin = 1 }

private fieldTeleImplicit ::= LBRACE CLASSIFYING_KW? fieldDefIdentifier+ COLON expr RBRACE { pin = 3 }

private fieldTeleRecovery ::= fieldTele_recover {
    recoverWhile = fieldTele_recover
}

private fieldTele_recover ::= !(EXTENDS_KW | FAT_ARROW | LBRACE | LPAREN | PIPE) & statement_recover

typeTele ::= literal
    | universeAtom
    | typedTeleExplicit
    | typedTeleImplicit {
        implements = [ "org.arend.psi.ext.ArendCompositeElement"
                       "org.arend.term.abs.Abstract.Parameter" ]
        mixin = "org.arend.psi.ext.ArendTypeTeleImplMixin"
        recoverWhile = typeTele_recover
    }

private typedTeleExplicit ::= LPAREN typedExpr RPAREN { pin = 1 }

private typedTeleImplicit ::= LBRACE typedExpr RBRACE { pin = 1 }

private typeTele_recover ::= !(LPAREN | LBRACE | ID | COLON | WITH_KW | ELIM_KW | FAT_ARROW | RPAREN | RBRACE | PIPE | ARROW | COMMA | IN_KW | SET | UNIVERSE | TRUNCATED_UNIVERSE | PROP_KW | UNDERSCORE | TGOAL | LGOAL) & statement_recover

typedExpr ::= typedExprNamed | expr

private typedExprNamed ::= identifierOrUnknown+ COLON expr { pin = 2 }

identifierOrUnknown ::= defIdentifier | UNDERSCORE

fieldDefIdentifier ::= defIdentifier {
    implements = [ "org.arend.psi.ext.PsiLocatedReferable"
                   "org.arend.psi.ext.impl.ArendInternalReferable"
                   "org.arend.term.abs.Abstract.ClassField"
                   "org.arend.naming.reference.FieldReferable"
                   "org.arend.psi.ext.ArendReferenceElement" ]
    mixin = "org.arend.psi.ext.impl.FieldDefIdentifierAdapter"
    stubClass = "org.arend.psi.stubs.ArendClassFieldParamStub"
    elementTypeFactory = "org.arend.psi.stubs.StubImplementationsKt.factory"
    recoverWhile = fieldDefIdentifier_recover
}

private fieldDefIdentifier_recover ::= !(COLON | ID | EXTENDS_KW | FAT_ARROW | LBRACE | LPAREN) & topStatement_recover

defIdentifier ::= ID {
    implements = [ "org.arend.psi.ext.PsiReferable"
                   "org.arend.psi.ext.ArendReferenceElement" ]
    mixin = "org.arend.psi.ext.ArendDefIdentifierImplMixin"
}

private defIdentifier_typeTele ::= defIdentifier {
    recoverWhile = typeTele_recover
}

refIdentifier ::= ID {
    implements = [ "org.arend.psi.ext.ArendReferenceElement"
                   "org.arend.term.abs.Abstract.Reference" ]
    mixin = "org.arend.psi.ext.ArendRefIdentifierImplMixin"
}

private meta comma_separated_sequence ::= <<p>> (COMMA <<p>>)* { pin(".*") = 1 }

private meta piped ::= pipe_def <<p>> { pin = 1 }

private meta pipe_separated_sequence ::= pipe_def? <<p>> (<<piped <<p>> >>)*
